-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Padding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 : OUT STD_LOGIC;
    conv_layer1_2_2_2_1_2_2_2_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    padd_out_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    padd_out_data_V_ce0 : OUT STD_LOGIC;
    padd_out_data_V_we0 : OUT STD_LOGIC;
    padd_out_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Padding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_x_assign_cast6_fu_112_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_x_assign_cast6_reg_255 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_122_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_263 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_268 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_146_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_281 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal brmerge2_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_180_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_27_reg_290 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp3_reg_295 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_fu_202_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_303 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_11_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_308 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_x_assign_reg_78 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_y_assign_reg_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_z_assign_reg_101 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_14_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not1_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_184_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_208_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_212_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_221_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_231_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp4_fu_239_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_245_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_x_assign_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_x_assign_reg_78 <= i_reg_263;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_x_assign_reg_78 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_y_assign_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_y_assign_reg_90 <= j_reg_281;
            elsif (((exitcond2_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_y_assign_reg_90 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_z_assign_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_z_assign_reg_101 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_z_assign_reg_101 <= c_reg_303;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                brmerge2_reg_286 <= brmerge2_fu_174_p2;
                tmp3_reg_295 <= tmp3_fu_190_p2;
                tmp_27_reg_290 <= tmp_27_fu_180_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_303 <= c_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_263 <= i_fu_122_p2;
                    p_x_assign_cast6_reg_255(2 downto 0) <= p_x_assign_cast6_fu_112_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_281 <= j_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_not_reg_273 <= p_not_fu_134_p2;
                tmp_s_reg_268 <= tmp_s_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_11_reg_308(4 downto 0) <= tmp_11_fu_226_p1(4 downto 0);
            end if;
        end if;
    end process;
    p_x_assign_cast6_reg_255(4 downto 3) <= "00";
    tmp_11_reg_308(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_116_p2, ap_CS_fsm_state3, exitcond1_fu_140_p2, ap_CS_fsm_state4, exitcond_fu_196_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_116_p2)
    begin
        if ((((exitcond2_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_116_p2)
    begin
        if (((exitcond2_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge2_fu_174_p2 <= (tmp_fu_164_p2 or tmp1_fu_169_p2);
    c_fu_202_p2 <= std_logic_vector(unsigned(p_z_assign_reg_101) + unsigned(ap_const_lv2_1));
    conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 <= tmp_14_fu_250_p1(3 - 1 downto 0);

    conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_140_p2 <= "1" when (p_y_assign_reg_90 = ap_const_lv3_4) else "0";
    exitcond2_fu_116_p2 <= "1" when (p_x_assign_reg_78 = ap_const_lv3_4) else "0";
    exitcond_fu_196_p2 <= "1" when (p_z_assign_reg_101 = ap_const_lv2_2) else "0";
    i_fu_122_p2 <= std_logic_vector(unsigned(p_x_assign_reg_78) + unsigned(ap_const_lv3_1));
    j_fu_146_p2 <= std_logic_vector(unsigned(p_y_assign_reg_90) + unsigned(ap_const_lv3_1));
    p_not1_fu_158_p2 <= "1" when (unsigned(p_y_assign_reg_90) > unsigned(ap_const_lv3_2)) else "0";
    p_not_fu_134_p2 <= "1" when (unsigned(p_x_assign_reg_78) > unsigned(ap_const_lv3_2)) else "0";
    p_x_assign_cast6_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_x_assign_reg_78),5));

    padd_out_data_V_address0_assign_proc : process(ap_CS_fsm_state4, tmp_11_fu_226_p1, tmp_11_reg_308, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            padd_out_data_V_address0 <= tmp_11_reg_308(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            padd_out_data_V_address0 <= tmp_11_fu_226_p1(5 - 1 downto 0);
        else 
            padd_out_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    padd_out_data_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            padd_out_data_V_ce0 <= ap_const_logic_1;
        else 
            padd_out_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    padd_out_data_V_d0_assign_proc : process(conv_layer1_2_2_2_1_2_2_2_input_data_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            padd_out_data_V_d0 <= conv_layer1_2_2_2_1_2_2_2_input_data_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            padd_out_data_V_d0 <= ap_const_lv16_0;
        else 
            padd_out_data_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    padd_out_data_V_we0_assign_proc : process(brmerge2_reg_286, ap_CS_fsm_state4, exitcond_fu_196_p2, ap_CS_fsm_state5)
    begin
        if ((((brmerge2_reg_286 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((brmerge2_reg_286 = ap_const_lv1_1) and (exitcond_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            padd_out_data_V_we0 <= ap_const_logic_1;
        else 
            padd_out_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_169_p2 <= (p_not_reg_273 or p_not1_fu_158_p2);
    tmp2_fu_212_p4 <= ((tmp_29_fu_208_p1 & tmp_27_reg_290) & ap_const_lv2_0);
    tmp3_fu_190_p2 <= std_logic_vector(unsigned(tmp_28_fu_184_p2) + unsigned(p_x_assign_reg_78));
    tmp4_fu_239_p2 <= std_logic_vector(unsigned(tmp_12_fu_231_p3) + unsigned(ap_const_lv3_5));
    tmp_10_fu_221_p2 <= std_logic_vector(unsigned(p_x_assign_cast6_reg_255) + unsigned(tmp2_fu_212_p4));
    tmp_11_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_221_p2),64));
    tmp_12_fu_231_p3 <= (tmp_29_fu_208_p1 & ap_const_lv2_0);
    tmp_13_fu_245_p2 <= std_logic_vector(unsigned(tmp4_fu_239_p2) + unsigned(tmp3_reg_295));
    tmp_14_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_245_p2),64));
    tmp_27_fu_180_p1 <= p_y_assign_reg_90(2 - 1 downto 0);
    tmp_28_fu_184_p2 <= std_logic_vector(shift_left(unsigned(p_y_assign_reg_90),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    tmp_29_fu_208_p1 <= p_z_assign_reg_101(1 - 1 downto 0);
    tmp_9_fu_152_p2 <= "1" when (p_y_assign_reg_90 = ap_const_lv3_0) else "0";
    tmp_fu_164_p2 <= (tmp_s_reg_268 or tmp_9_fu_152_p2);
    tmp_s_fu_128_p2 <= "1" when (p_x_assign_reg_78 = ap_const_lv3_0) else "0";
end behav;
