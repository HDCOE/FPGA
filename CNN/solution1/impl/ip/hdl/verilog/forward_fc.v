// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward_fc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fc_layer_2_2_2_2_input_data_V_address0,
        fc_layer_2_2_2_2_input_data_V_ce0,
        fc_layer_2_2_2_2_input_data_V_q0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] fc_layer_2_2_2_2_input_data_V_address0;
output   fc_layer_2_2_2_2_input_data_V_ce0;
input  [15:0] fc_layer_2_2_2_2_input_data_V_q0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fc_layer_2_2_2_2_input_data_V_ce0;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] fc1_W_data_V_address0;
reg    fc1_W_data_V_ce0;
wire   [9:0] fc1_W_data_V_q0;
wire   [1:0] filter_fu_183_p2;
reg   [1:0] filter_reg_336;
wire    ap_CS_fsm_state2;
wire   [2:0] p_x_assign_cast_fu_201_p1;
reg   [2:0] p_x_assign_cast_reg_341;
wire    ap_CS_fsm_state3;
wire   [1:0] i_fu_211_p2;
reg   [1:0] i_reg_349;
wire   [15:0] fc_layer_output_data_2_fu_221_p3;
wire   [0:0] exitcond2_fu_205_p2;
wire   [15:0] fc_layer_output_data_3_fu_229_p3;
wire   [1:0] j_fu_243_p2;
reg   [1:0] j_reg_367;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_8_fu_249_p1;
reg   [0:0] tmp_8_reg_372;
wire   [0:0] exitcond3_fu_237_p2;
wire   [1:0] c_fu_259_p2;
reg   [1:0] c_reg_380;
wire    ap_CS_fsm_state5;
wire   [2:0] tmp_6_fu_278_p2;
reg   [2:0] tmp_6_reg_385;
wire   [0:0] exitcond_fu_253_p2;
wire    ap_CS_fsm_state6;
reg  signed [9:0] fc1_W_data_V_load_reg_400;
wire    ap_CS_fsm_state7;
reg   [15:0] fc_layer_output_data_reg_72;
reg   [15:0] fc_layer_output_data_1_reg_84;
reg   [1:0] p_z_assign_reg_96;
reg   [15:0] p_Val2_s_reg_108;
wire   [0:0] exitcond1_fu_177_p2;
reg   [1:0] p_x_assign_reg_120;
reg   [15:0] dot_out_1_reg_131;
reg   [1:0] p_y_assign_reg_143;
reg   [15:0] p_Val2_1_reg_154;
reg   [1:0] p_z_assign_1_reg_166;
wire   [63:0] tmp_3_fu_291_p1;
wire   [63:0] tmp_7_fu_296_p1;
wire   [0:0] tmp_fu_217_p1;
wire   [0:0] tmp_10_fu_265_p1;
wire   [2:0] tmp1_fu_269_p4;
wire   [4:0] tmp_1_fu_283_p3;
wire  signed [23:0] grp_fu_324_p3;
wire   [23:0] grp_fu_324_p2;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
end

Conv_forward_convbkb #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
fc1_W_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc1_W_data_V_address0),
    .ce0(fc1_W_data_V_ce0),
    .q0(fc1_W_data_V_q0)
);

Lenet_mac_muladd_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
Lenet_mac_muladd_eOg_U18(
    .din0(fc1_W_data_V_load_reg_400),
    .din1(fc_layer_2_2_2_2_input_data_V_q0),
    .din2(grp_fu_324_p2),
    .dout(grp_fu_324_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if (((exitcond1_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_0_preg <= fc_layer_output_data_reg_72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 16'd0;
    end else begin
        if (((exitcond1_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_1_preg <= fc_layer_output_data_1_reg_84;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        dot_out_1_reg_131 <= p_Val2_s_reg_108;
    end else if (((exitcond_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        dot_out_1_reg_131 <= p_Val2_1_reg_154;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_1_reg_154 <= dot_out_1_reg_131;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_1_reg_154 <= {{grp_fu_324_p3[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_reg_108 <= 16'd0;
    end else if (((exitcond3_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_s_reg_108 <= dot_out_1_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_x_assign_reg_120 <= 2'd0;
    end else if (((exitcond3_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_x_assign_reg_120 <= i_reg_349;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_y_assign_reg_143 <= 2'd0;
    end else if (((exitcond_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_y_assign_reg_143 <= j_reg_367;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_z_assign_1_reg_166 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_z_assign_1_reg_166 <= c_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_z_assign_reg_96 <= filter_reg_336;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_z_assign_reg_96 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_reg_380 <= c_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fc1_W_data_V_load_reg_400 <= fc1_W_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        fc_layer_output_data_1_reg_84 <= fc_layer_output_data_3_fu_229_p3;
        fc_layer_output_data_reg_72 <= fc_layer_output_data_2_fu_221_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        filter_reg_336 <= filter_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_349 <= i_fu_211_p2;
        p_x_assign_cast_reg_341[1 : 0] <= p_x_assign_cast_fu_201_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_367 <= j_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_6_reg_385 <= tmp_6_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_8_reg_372 <= tmp_8_fu_249_p1;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_0 = fc_layer_output_data_reg_72;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((exitcond1_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_1 = fc_layer_output_data_1_reg_84;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fc1_W_data_V_ce0 = 1'b1;
    end else begin
        fc1_W_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fc_layer_2_2_2_2_input_data_V_ce0 = 1'b1;
    end else begin
        fc_layer_2_2_2_2_input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign c_fu_259_p2 = (p_z_assign_1_reg_166 + 2'd1);

assign exitcond1_fu_177_p2 = ((p_z_assign_reg_96 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_205_p2 = ((p_x_assign_reg_120 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond3_fu_237_p2 = ((p_y_assign_reg_143 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_253_p2 = ((p_z_assign_1_reg_166 == 2'd2) ? 1'b1 : 1'b0);

assign fc1_W_data_V_address0 = tmp_3_fu_291_p1;

assign fc_layer_2_2_2_2_input_data_V_address0 = tmp_7_fu_296_p1;

assign fc_layer_output_data_2_fu_221_p3 = ((tmp_fu_217_p1[0:0] === 1'b1) ? fc_layer_output_data_reg_72 : p_Val2_s_reg_108);

assign fc_layer_output_data_3_fu_229_p3 = ((tmp_fu_217_p1[0:0] === 1'b1) ? p_Val2_s_reg_108 : fc_layer_output_data_1_reg_84);

assign filter_fu_183_p2 = (p_z_assign_reg_96 + 2'd1);

assign grp_fu_324_p2 = {{p_Val2_1_reg_154}, {8'd0}};

assign i_fu_211_p2 = (p_x_assign_reg_120 + 2'd1);

assign j_fu_243_p2 = (p_y_assign_reg_143 + 2'd1);

assign p_x_assign_cast_fu_201_p1 = p_x_assign_reg_120;

assign tmp1_fu_269_p4 = {{{tmp_10_fu_265_p1}, {tmp_8_reg_372}}, {1'd0}};

assign tmp_10_fu_265_p1 = p_z_assign_1_reg_166[0:0];

assign tmp_1_fu_283_p3 = {{p_z_assign_reg_96}, {tmp_6_fu_278_p2}};

assign tmp_3_fu_291_p1 = tmp_1_fu_283_p3;

assign tmp_6_fu_278_p2 = (p_x_assign_cast_reg_341 + tmp1_fu_269_p4);

assign tmp_7_fu_296_p1 = tmp_6_reg_385;

assign tmp_8_fu_249_p1 = p_y_assign_reg_143[0:0];

assign tmp_fu_217_p1 = p_z_assign_reg_96[0:0];

always @ (posedge ap_clk) begin
    p_x_assign_cast_reg_341[2] <= 1'b0;
end

endmodule //forward_fc
