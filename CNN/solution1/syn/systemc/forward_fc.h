// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _forward_fc_HH_
#define _forward_fc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Lenet_mac_muladd_eOg.h"
#include "Conv_forward_convbkb.h"

namespace ap_rtl {

struct forward_fc : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > fc_layer_2_2_2_2_input_data_V_address0;
    sc_out< sc_logic > fc_layer_2_2_2_2_input_data_V_ce0;
    sc_in< sc_lv<16> > fc_layer_2_2_2_2_input_data_V_q0;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;


    // Module declarations
    forward_fc(sc_module_name name);
    SC_HAS_PROCESS(forward_fc);

    ~forward_fc();

    sc_trace_file* mVcdFile;

    Conv_forward_convbkb* fc1_W_data_V_U;
    Lenet_mac_muladd_eOg<1,1,10,16,24,24>* Lenet_mac_muladd_eOg_U18;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > fc1_W_data_V_address0;
    sc_signal< sc_logic > fc1_W_data_V_ce0;
    sc_signal< sc_lv<10> > fc1_W_data_V_q0;
    sc_signal< sc_lv<2> > filter_fu_183_p2;
    sc_signal< sc_lv<2> > filter_reg_336;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > p_x_assign_cast_fu_201_p1;
    sc_signal< sc_lv<3> > p_x_assign_cast_reg_341;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > i_fu_211_p2;
    sc_signal< sc_lv<2> > i_reg_349;
    sc_signal< sc_lv<16> > fc_layer_output_data_2_fu_221_p3;
    sc_signal< sc_lv<1> > exitcond2_fu_205_p2;
    sc_signal< sc_lv<16> > fc_layer_output_data_3_fu_229_p3;
    sc_signal< sc_lv<2> > j_fu_243_p2;
    sc_signal< sc_lv<2> > j_reg_367;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_8_fu_249_p1;
    sc_signal< sc_lv<1> > tmp_8_reg_372;
    sc_signal< sc_lv<1> > exitcond3_fu_237_p2;
    sc_signal< sc_lv<2> > c_fu_259_p2;
    sc_signal< sc_lv<2> > c_reg_380;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > tmp_6_fu_278_p2;
    sc_signal< sc_lv<3> > tmp_6_reg_385;
    sc_signal< sc_lv<1> > exitcond_fu_253_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<10> > fc1_W_data_V_load_reg_400;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<16> > fc_layer_output_data_reg_72;
    sc_signal< sc_lv<16> > fc_layer_output_data_1_reg_84;
    sc_signal< sc_lv<2> > p_z_assign_reg_96;
    sc_signal< sc_lv<16> > p_Val2_s_reg_108;
    sc_signal< sc_lv<1> > exitcond1_fu_177_p2;
    sc_signal< sc_lv<2> > p_x_assign_reg_120;
    sc_signal< sc_lv<16> > dot_out_1_reg_131;
    sc_signal< sc_lv<2> > p_y_assign_reg_143;
    sc_signal< sc_lv<16> > p_Val2_1_reg_154;
    sc_signal< sc_lv<2> > p_z_assign_1_reg_166;
    sc_signal< sc_lv<64> > tmp_3_fu_291_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_296_p1;
    sc_signal< sc_lv<1> > tmp_fu_217_p1;
    sc_signal< sc_lv<1> > tmp_10_fu_265_p1;
    sc_signal< sc_lv<3> > tmp1_fu_269_p4;
    sc_signal< sc_lv<5> > tmp_1_fu_283_p3;
    sc_signal< sc_lv<24> > grp_fu_324_p3;
    sc_signal< sc_lv<24> > grp_fu_324_p2;
    sc_signal< sc_lv<16> > ap_return_0_preg;
    sc_signal< sc_lv<16> > ap_return_1_preg;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_17;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_c_fu_259_p2();
    void thread_exitcond1_fu_177_p2();
    void thread_exitcond2_fu_205_p2();
    void thread_exitcond3_fu_237_p2();
    void thread_exitcond_fu_253_p2();
    void thread_fc1_W_data_V_address0();
    void thread_fc1_W_data_V_ce0();
    void thread_fc_layer_2_2_2_2_input_data_V_address0();
    void thread_fc_layer_2_2_2_2_input_data_V_ce0();
    void thread_fc_layer_output_data_2_fu_221_p3();
    void thread_fc_layer_output_data_3_fu_229_p3();
    void thread_filter_fu_183_p2();
    void thread_grp_fu_324_p2();
    void thread_i_fu_211_p2();
    void thread_j_fu_243_p2();
    void thread_p_x_assign_cast_fu_201_p1();
    void thread_tmp1_fu_269_p4();
    void thread_tmp_10_fu_265_p1();
    void thread_tmp_1_fu_283_p3();
    void thread_tmp_3_fu_291_p1();
    void thread_tmp_6_fu_278_p2();
    void thread_tmp_7_fu_296_p1();
    void thread_tmp_8_fu_249_p1();
    void thread_tmp_fu_217_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
