// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_tensor_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_V_address0,
        in1_V_ce0,
        in1_V_we0,
        in1_V_d0,
        p_read,
        p_read1,
        size1_x,
        size1_y
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] in1_V_address0;
output   in1_V_ce0;
output   in1_V_we0;
output  [15:0] in1_V_d0;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [31:0] size1_x;
input  [31:0] size1_y;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_V_ce0;
reg in1_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] next_mul_fu_127_p2;
reg   [31:0] next_mul_reg_202;
wire    ap_CS_fsm_state2;
wire   [1:0] k_1_fu_138_p2;
reg   [1:0] k_1_reg_210;
wire   [15:0] in2_V_load_phi_fu_148_p3;
reg   [15:0] in2_V_load_phi_reg_215;
wire   [0:0] exitcond2_fu_132_p2;
wire  signed [31:0] tmp_fu_158_p2;
reg  signed [31:0] tmp_reg_220;
wire    ap_CS_fsm_state3;
wire   [0:0] ap_phi_mux_j_phi_fu_107_p4;
wire   [31:0] tmp3_fu_164_p2;
reg   [31:0] tmp3_reg_225;
wire    ap_CS_fsm_state4;
reg   [1:0] k_reg_79;
reg   [31:0] phi_mul_reg_90;
reg   [0:0] j_reg_102;
wire    ap_CS_fsm_state5;
wire   [0:0] ap_phi_mux_i_phi_fu_119_p4;
reg   [0:0] i_reg_115;
wire  signed [63:0] tmp_8_fu_177_p1;
wire   [0:0] tmp_23_fu_144_p1;
wire   [31:0] j_cast3_fu_154_p1;
wire  signed [31:0] tmp3_fu_164_p1;
wire   [31:0] i_cast2_fu_168_p1;
wire   [31:0] tmp_7_fu_172_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_115 <= 1'd0;
    end else if (((ap_phi_mux_i_phi_fu_119_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_115 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_i_phi_fu_119_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_102 <= 1'd1;
    end else if (((exitcond2_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_102 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_j_phi_fu_107_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_79 <= k_1_reg_210;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_79 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_j_phi_fu_107_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_90 <= next_mul_reg_202;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in2_V_load_phi_reg_215 <= in2_V_load_phi_fu_148_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_1_reg_210 <= k_1_fu_138_p2;
        next_mul_reg_202 <= next_mul_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp3_reg_225 <= tmp3_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_j_phi_fu_107_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_reg_220 <= tmp_fu_158_p2;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in1_V_ce0 = 1'b1;
    end else begin
        in1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_i_phi_fu_119_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in1_V_we0 = 1'b1;
    end else begin
        in1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_phi_mux_j_phi_fu_107_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((ap_phi_mux_i_phi_fu_119_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_phi_mux_i_phi_fu_119_p4 = i_reg_115;

assign ap_phi_mux_j_phi_fu_107_p4 = j_reg_102;

assign exitcond2_fu_132_p2 = ((k_reg_79 == 2'd2) ? 1'b1 : 1'b0);

assign i_cast2_fu_168_p1 = i_reg_115;

assign in1_V_address0 = tmp_8_fu_177_p1;

assign in1_V_d0 = in2_V_load_phi_reg_215;

assign in2_V_load_phi_fu_148_p3 = ((tmp_23_fu_144_p1[0:0] === 1'b1) ? p_read1 : p_read);

assign j_cast3_fu_154_p1 = j_reg_102;

assign k_1_fu_138_p2 = (k_reg_79 + 2'd1);

assign next_mul_fu_127_p2 = (phi_mul_reg_90 + size1_y);

assign tmp3_fu_164_p1 = size1_x;

assign tmp3_fu_164_p2 = ($signed(tmp_reg_220) * $signed(tmp3_fu_164_p1));

assign tmp_23_fu_144_p1 = k_reg_79[0:0];

assign tmp_7_fu_172_p2 = (i_cast2_fu_168_p1 + tmp3_reg_225);

assign tmp_8_fu_177_p1 = $signed(tmp_7_fu_172_p2);

assign tmp_fu_158_p2 = (j_cast3_fu_154_p1 + phi_mul_reg_90);

endmodule //copy_tensor_2
