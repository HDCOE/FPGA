// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Lenet,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.718312,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=16,HLS_SYN_FF=3993,HLS_SYN_LUT=5460,HLS_VERSION=2018_2}" *)

module Lenet (
        ap_clk,
        ap_rst_n,
        s_axi_axilite_AWVALID,
        s_axi_axilite_AWREADY,
        s_axi_axilite_AWADDR,
        s_axi_axilite_WVALID,
        s_axi_axilite_WREADY,
        s_axi_axilite_WDATA,
        s_axi_axilite_WSTRB,
        s_axi_axilite_ARVALID,
        s_axi_axilite_ARREADY,
        s_axi_axilite_ARADDR,
        s_axi_axilite_RVALID,
        s_axi_axilite_RREADY,
        s_axi_axilite_RDATA,
        s_axi_axilite_RRESP,
        s_axi_axilite_BVALID,
        s_axi_axilite_BREADY,
        s_axi_axilite_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;
parameter    C_S_AXI_AXILITE_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITE_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_axilite_AWVALID;
output   s_axi_axilite_AWREADY;
input  [C_S_AXI_AXILITE_ADDR_WIDTH - 1:0] s_axi_axilite_AWADDR;
input   s_axi_axilite_WVALID;
output   s_axi_axilite_WREADY;
input  [C_S_AXI_AXILITE_DATA_WIDTH - 1:0] s_axi_axilite_WDATA;
input  [C_S_AXI_AXILITE_WSTRB_WIDTH - 1:0] s_axi_axilite_WSTRB;
input   s_axi_axilite_ARVALID;
output   s_axi_axilite_ARREADY;
input  [C_S_AXI_AXILITE_ADDR_WIDTH - 1:0] s_axi_axilite_ARADDR;
output   s_axi_axilite_RVALID;
input   s_axi_axilite_RREADY;
output  [C_S_AXI_AXILITE_DATA_WIDTH - 1:0] s_axi_axilite_RDATA;
output  [1:0] s_axi_axilite_RRESP;
output   s_axi_axilite_BVALID;
input   s_axi_axilite_BREADY;
output  [1:0] s_axi_axilite_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    data_in_data_V_ce0;
wire   [15:0] data_in_data_V_q0;
wire   [31:0] data_in_size_x;
wire   [31:0] data_in_size_y;
wire   [31:0] data_in_size_z;
reg    conv_data_V_ce0;
reg    conv_data_V_we0;
wire   [31:0] conv_size_x;
wire   [31:0] conv_size_y;
wire   [31:0] conv_size_z;
reg    relu_data_V_ce0;
reg    relu_data_V_we0;
wire   [31:0] relu_size_x;
wire   [31:0] relu_size_y;
wire   [31:0] relu_size_z;
wire   [31:0] pool_size_x;
wire   [31:0] pool_size_y;
wire   [31:0] pool_size_z;
wire   [31:0] fc_size_x;
wire   [31:0] fc_size_y;
wire   [31:0] fc_size_z;
wire   [31:0] data_out_size_x;
wire   [31:0] data_out_size_y;
wire   [31:0] data_out_size_z;
reg   [31:0] data_in_size_x_read_reg_319;
reg   [31:0] data_in_size_y_read_reg_324;
reg   [31:0] data_in_size_z_read_reg_329;
reg   [31:0] data_out_size_x_read_reg_334;
reg   [31:0] data_out_size_y_read_reg_339;
reg   [31:0] conv_size_x_read_reg_344;
reg   [31:0] conv_size_y_read_reg_349;
reg   [31:0] relu_size_x_read_reg_354;
reg   [31:0] relu_size_y_read_reg_359;
reg   [31:0] fc_size_x_read_reg_364;
reg   [31:0] fc_size_y_read_reg_369;
reg   [15:0] fc1_output_data_0_V_reg_374;
wire    ap_CS_fsm_state12;
wire    grp_forward_fc_fu_268_ap_idle;
wire    grp_forward_fc_fu_268_ap_ready;
wire    grp_forward_fc_fu_268_ap_done;
wire    grp_copy_tensor_1_fu_225_ap_idle;
wire    grp_copy_tensor_1_fu_225_ap_ready;
wire    grp_copy_tensor_1_fu_225_ap_done;
reg    ap_block_state12_on_subcall_done;
reg   [15:0] fc1_output_data_1_V_reg_380;
reg   [15:0] softmax_input_data_0_reg_386;
wire    ap_CS_fsm_state13;
wire    grp_copy_tensor_3_fu_281_ap_idle;
wire    grp_copy_tensor_3_fu_281_ap_ready;
wire    grp_copy_tensor_3_fu_281_ap_done;
wire    grp_copy_tensor_fu_248_ap_idle;
wire    grp_copy_tensor_fu_248_ap_ready;
wire    grp_copy_tensor_fu_248_ap_done;
reg    ap_block_state13_on_subcall_done;
reg   [15:0] softmax_input_data_1_reg_391;
reg   [15:0] softmax_y_hat_data_0_reg_396;
wire    ap_CS_fsm_state14;
wire    grp_softmax_fu_204_ap_idle;
wire    grp_softmax_fu_204_ap_ready;
wire    grp_softmax_fu_204_ap_done;
reg   [15:0] softmax_y_hat_data_1_reg_401;
reg   [2:0] conv1_input_data_V_address0;
reg    conv1_input_data_V_ce0;
reg    conv1_input_data_V_we0;
wire   [15:0] conv1_input_data_V_q0;
reg   [2:0] conv1_output_data_V_address0;
reg    conv1_output_data_V_ce0;
reg    conv1_output_data_V_we0;
wire   [15:0] conv1_output_data_V_q0;
wire   [15:0] conv1_a_slice_pad_da_q0;
reg   [2:0] fx_input_data_V_address0;
reg    fx_input_data_V_ce0;
reg    fx_input_data_V_we0;
wire   [15:0] fx_input_data_V_q0;
reg   [2:0] fx_output_data_V_address0;
reg    fx_output_data_V_ce0;
reg    fx_output_data_V_we0;
wire   [15:0] fx_output_data_V_q0;
reg   [2:0] fc1_input_data_V_address0;
reg    fc1_input_data_V_ce0;
reg    fc1_input_data_V_we0;
wire   [15:0] fc1_input_data_V_q0;
wire    grp_softmax_fu_204_ap_start;
wire   [15:0] grp_softmax_fu_204_ap_return_0;
wire   [15:0] grp_softmax_fu_204_ap_return_1;
wire    grp_Conv_forward_fu_216_ap_start;
wire    grp_Conv_forward_fu_216_ap_done;
wire    grp_Conv_forward_fu_216_ap_idle;
wire    grp_Conv_forward_fu_216_ap_ready;
wire   [2:0] grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0;
wire    grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;
wire   [2:0] grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0;
wire    grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0;
wire    grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0;
wire   [15:0] grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0;
wire   [4:0] grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0;
wire    grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0;
wire    grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0;
wire   [15:0] grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0;
wire    grp_copy_tensor_1_fu_225_ap_start;
wire   [2:0] grp_copy_tensor_1_fu_225_in1_V_address0;
wire    grp_copy_tensor_1_fu_225_in1_V_ce0;
wire    grp_copy_tensor_1_fu_225_in1_V_we0;
wire   [15:0] grp_copy_tensor_1_fu_225_in1_V_d0;
wire   [2:0] grp_copy_tensor_1_fu_225_in2_V_address0;
wire    grp_copy_tensor_1_fu_225_in2_V_ce0;
reg   [15:0] grp_copy_tensor_1_fu_225_in2_V_q0;
reg   [31:0] grp_copy_tensor_1_fu_225_size1_x;
reg   [31:0] grp_copy_tensor_1_fu_225_size1_y;
reg   [31:0] grp_copy_tensor_1_fu_225_size2_x;
reg   [31:0] grp_copy_tensor_1_fu_225_size2_y;
reg   [31:0] grp_copy_tensor_1_fu_225_size2_z;
wire    grp_copy_tensor_fu_248_ap_start;
wire   [2:0] grp_copy_tensor_fu_248_in1_V_address0;
wire    grp_copy_tensor_fu_248_in1_V_ce0;
wire    grp_copy_tensor_fu_248_in1_V_we0;
wire   [15:0] grp_copy_tensor_fu_248_in1_V_d0;
wire    grp_copy_tensor_2_fu_258_ap_start;
wire    grp_copy_tensor_2_fu_258_ap_done;
wire    grp_copy_tensor_2_fu_258_ap_idle;
wire    grp_copy_tensor_2_fu_258_ap_ready;
wire   [4:0] grp_copy_tensor_2_fu_258_in1_V_address0;
wire    grp_copy_tensor_2_fu_258_in1_V_ce0;
wire    grp_copy_tensor_2_fu_258_in1_V_we0;
wire   [15:0] grp_copy_tensor_2_fu_258_in1_V_d0;
wire    grp_forward_fc_fu_268_ap_start;
wire   [2:0] grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0;
wire    grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0;
wire   [15:0] grp_forward_fc_fu_268_ap_return_0;
wire   [15:0] grp_forward_fc_fu_268_ap_return_1;
wire    grp_forward_ReLu_fu_275_ap_start;
wire    grp_forward_ReLu_fu_275_ap_done;
wire    grp_forward_ReLu_fu_275_ap_idle;
wire    grp_forward_ReLu_fu_275_ap_ready;
wire   [2:0] grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0;
wire    grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0;
wire   [2:0] grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0;
wire    grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0;
wire    grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0;
wire   [15:0] grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0;
wire    grp_copy_tensor_3_fu_281_ap_start;
wire   [15:0] grp_copy_tensor_3_fu_281_ap_return_0;
wire   [15:0] grp_copy_tensor_3_fu_281_ap_return_1;
reg    grp_softmax_fu_204_ap_start_reg;
reg    grp_Conv_forward_fu_216_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_copy_tensor_1_fu_225_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
reg    grp_copy_tensor_fu_248_ap_start_reg;
reg    grp_copy_tensor_2_fu_258_ap_start_reg;
wire    ap_CS_fsm_state15;
reg    grp_forward_fc_fu_268_ap_start_reg;
reg    grp_forward_ReLu_fu_275_ap_start_reg;
reg    grp_copy_tensor_3_fu_281_ap_start_reg;
reg   [14:0] ap_NS_fsm;
reg    ap_block_state8_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 grp_softmax_fu_204_ap_start_reg = 1'b0;
#0 grp_Conv_forward_fu_216_ap_start_reg = 1'b0;
#0 grp_copy_tensor_1_fu_225_ap_start_reg = 1'b0;
#0 grp_copy_tensor_fu_248_ap_start_reg = 1'b0;
#0 grp_copy_tensor_2_fu_258_ap_start_reg = 1'b0;
#0 grp_forward_fc_fu_268_ap_start_reg = 1'b0;
#0 grp_forward_ReLu_fu_275_ap_start_reg = 1'b0;
#0 grp_copy_tensor_3_fu_281_ap_start_reg = 1'b0;
end

Lenet_axilite_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITE_DATA_WIDTH ))
Lenet_axilite_s_axi_U(
    .AWVALID(s_axi_axilite_AWVALID),
    .AWREADY(s_axi_axilite_AWREADY),
    .AWADDR(s_axi_axilite_AWADDR),
    .WVALID(s_axi_axilite_WVALID),
    .WREADY(s_axi_axilite_WREADY),
    .WDATA(s_axi_axilite_WDATA),
    .WSTRB(s_axi_axilite_WSTRB),
    .ARVALID(s_axi_axilite_ARVALID),
    .ARREADY(s_axi_axilite_ARREADY),
    .ARADDR(s_axi_axilite_ARADDR),
    .RVALID(s_axi_axilite_RVALID),
    .RREADY(s_axi_axilite_RREADY),
    .RDATA(s_axi_axilite_RDATA),
    .RRESP(s_axi_axilite_RRESP),
    .BVALID(s_axi_axilite_BVALID),
    .BREADY(s_axi_axilite_BREADY),
    .BRESP(s_axi_axilite_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .data_in_data_V_address0(grp_copy_tensor_1_fu_225_in2_V_address0),
    .data_in_data_V_ce0(data_in_data_V_ce0),
    .data_in_data_V_q0(data_in_data_V_q0),
    .data_in_size_x(data_in_size_x),
    .data_in_size_y(data_in_size_y),
    .data_in_size_z(data_in_size_z),
    .conv_data_V_address0(grp_copy_tensor_1_fu_225_in1_V_address0),
    .conv_data_V_ce0(conv_data_V_ce0),
    .conv_data_V_we0(conv_data_V_we0),
    .conv_data_V_d0(grp_copy_tensor_1_fu_225_in1_V_d0),
    .conv_size_x(conv_size_x),
    .conv_size_y(conv_size_y),
    .conv_size_z(conv_size_z),
    .relu_data_V_address0(grp_copy_tensor_1_fu_225_in1_V_address0),
    .relu_data_V_ce0(relu_data_V_ce0),
    .relu_data_V_we0(relu_data_V_we0),
    .relu_data_V_d0(grp_copy_tensor_1_fu_225_in1_V_d0),
    .relu_size_x(relu_size_x),
    .relu_size_y(relu_size_y),
    .relu_size_z(relu_size_z),
    .pool_size_x(pool_size_x),
    .pool_size_y(pool_size_y),
    .pool_size_z(pool_size_z),
    .fc_data_V_address0(grp_copy_tensor_fu_248_in1_V_address0),
    .fc_data_V_ce0(grp_copy_tensor_fu_248_in1_V_ce0),
    .fc_data_V_we0(grp_copy_tensor_fu_248_in1_V_we0),
    .fc_data_V_d0(grp_copy_tensor_fu_248_in1_V_d0),
    .fc_size_x(fc_size_x),
    .fc_size_y(fc_size_y),
    .fc_size_z(fc_size_z),
    .data_out_data_V_address0(grp_copy_tensor_2_fu_258_in1_V_address0),
    .data_out_data_V_ce0(grp_copy_tensor_2_fu_258_in1_V_ce0),
    .data_out_data_V_we0(grp_copy_tensor_2_fu_258_in1_V_we0),
    .data_out_data_V_d0(grp_copy_tensor_2_fu_258_in1_V_d0),
    .data_out_size_x(data_out_size_x),
    .data_out_size_y(data_out_size_y),
    .data_out_size_z(data_out_size_z)
);

Lenet_conv1_inputjbC #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
conv1_input_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv1_input_data_V_address0),
    .ce0(conv1_input_data_V_ce0),
    .we0(conv1_input_data_V_we0),
    .d0(grp_copy_tensor_1_fu_225_in1_V_d0),
    .q0(conv1_input_data_V_q0)
);

Lenet_conv1_inputjbC #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
conv1_output_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv1_output_data_V_address0),
    .ce0(conv1_output_data_V_ce0),
    .we0(conv1_output_data_V_we0),
    .d0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0),
    .q0(conv1_output_data_V_q0)
);

Lenet_conv1_a_slilbW #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv1_a_slice_pad_da_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0),
    .ce0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0),
    .we0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0),
    .d0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0),
    .q0(conv1_a_slice_pad_da_q0)
);

Lenet_conv1_inputjbC #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
fx_input_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fx_input_data_V_address0),
    .ce0(fx_input_data_V_ce0),
    .we0(fx_input_data_V_we0),
    .d0(grp_copy_tensor_1_fu_225_in1_V_d0),
    .q0(fx_input_data_V_q0)
);

Lenet_conv1_inputjbC #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
fx_output_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fx_output_data_V_address0),
    .ce0(fx_output_data_V_ce0),
    .we0(fx_output_data_V_we0),
    .d0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0),
    .q0(fx_output_data_V_q0)
);

Lenet_conv1_inputjbC #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
fc1_input_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc1_input_data_V_address0),
    .ce0(fc1_input_data_V_ce0),
    .we0(fc1_input_data_V_we0),
    .d0(grp_copy_tensor_1_fu_225_in1_V_d0),
    .q0(fc1_input_data_V_q0)
);

softmax grp_softmax_fu_204(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_softmax_fu_204_ap_start),
    .ap_done(grp_softmax_fu_204_ap_done),
    .ap_idle(grp_softmax_fu_204_ap_idle),
    .ap_ready(grp_softmax_fu_204_ap_ready),
    .classifier_1_1_2_input_data_0_V_read(softmax_input_data_0_reg_386),
    .classifier_1_1_2_input_data_1_V_read(softmax_input_data_1_reg_391),
    .ap_return_0(grp_softmax_fu_204_ap_return_0),
    .ap_return_1(grp_softmax_fu_204_ap_return_1)
);

Conv_forward grp_Conv_forward_fu_216(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Conv_forward_fu_216_ap_start),
    .ap_done(grp_Conv_forward_fu_216_ap_done),
    .ap_idle(grp_Conv_forward_fu_216_ap_idle),
    .ap_ready(grp_Conv_forward_fu_216_ap_ready),
    .conv_layer1_2_2_2_1_2_2_2_input_data_V_address0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0),
    .conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0),
    .conv_layer1_2_2_2_1_2_2_2_input_data_V_q0(conv1_input_data_V_q0),
    .conv_layer1_2_2_2_1_2_2_2_output_data_V_address0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0),
    .conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0),
    .conv_layer1_2_2_2_1_2_2_2_output_data_V_we0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0),
    .conv_layer1_2_2_2_1_2_2_2_output_data_V_d0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0),
    .conv_layer1_2_2_2_1_2_2_2_output_data_V_q0(conv1_output_data_V_q0),
    .conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0),
    .conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0),
    .conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0),
    .conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0),
    .conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_q0(conv1_a_slice_pad_da_q0)
);

copy_tensor_1 grp_copy_tensor_1_fu_225(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_tensor_1_fu_225_ap_start),
    .ap_done(grp_copy_tensor_1_fu_225_ap_done),
    .ap_idle(grp_copy_tensor_1_fu_225_ap_idle),
    .ap_ready(grp_copy_tensor_1_fu_225_ap_ready),
    .in1_V_address0(grp_copy_tensor_1_fu_225_in1_V_address0),
    .in1_V_ce0(grp_copy_tensor_1_fu_225_in1_V_ce0),
    .in1_V_we0(grp_copy_tensor_1_fu_225_in1_V_we0),
    .in1_V_d0(grp_copy_tensor_1_fu_225_in1_V_d0),
    .in2_V_address0(grp_copy_tensor_1_fu_225_in2_V_address0),
    .in2_V_ce0(grp_copy_tensor_1_fu_225_in2_V_ce0),
    .in2_V_q0(grp_copy_tensor_1_fu_225_in2_V_q0),
    .size1_x(grp_copy_tensor_1_fu_225_size1_x),
    .size1_y(grp_copy_tensor_1_fu_225_size1_y),
    .size2_x(grp_copy_tensor_1_fu_225_size2_x),
    .size2_y(grp_copy_tensor_1_fu_225_size2_y),
    .size2_z(grp_copy_tensor_1_fu_225_size2_z)
);

copy_tensor grp_copy_tensor_fu_248(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_tensor_fu_248_ap_start),
    .ap_done(grp_copy_tensor_fu_248_ap_done),
    .ap_idle(grp_copy_tensor_fu_248_ap_idle),
    .ap_ready(grp_copy_tensor_fu_248_ap_ready),
    .in1_V_address0(grp_copy_tensor_fu_248_in1_V_address0),
    .in1_V_ce0(grp_copy_tensor_fu_248_in1_V_ce0),
    .in1_V_we0(grp_copy_tensor_fu_248_in1_V_we0),
    .in1_V_d0(grp_copy_tensor_fu_248_in1_V_d0),
    .in2_0_V_read(fc1_output_data_0_V_reg_374),
    .in2_1_V_read(fc1_output_data_1_V_reg_380),
    .size1_x(fc_size_x_read_reg_364),
    .size1_y(fc_size_y_read_reg_369)
);

copy_tensor_2 grp_copy_tensor_2_fu_258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_tensor_2_fu_258_ap_start),
    .ap_done(grp_copy_tensor_2_fu_258_ap_done),
    .ap_idle(grp_copy_tensor_2_fu_258_ap_idle),
    .ap_ready(grp_copy_tensor_2_fu_258_ap_ready),
    .in1_V_address0(grp_copy_tensor_2_fu_258_in1_V_address0),
    .in1_V_ce0(grp_copy_tensor_2_fu_258_in1_V_ce0),
    .in1_V_we0(grp_copy_tensor_2_fu_258_in1_V_we0),
    .in1_V_d0(grp_copy_tensor_2_fu_258_in1_V_d0),
    .p_read(softmax_y_hat_data_0_reg_396),
    .p_read1(softmax_y_hat_data_1_reg_401),
    .size1_x(data_out_size_x_read_reg_334),
    .size1_y(data_out_size_y_read_reg_339)
);

forward_fc grp_forward_fc_fu_268(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_forward_fc_fu_268_ap_start),
    .ap_done(grp_forward_fc_fu_268_ap_done),
    .ap_idle(grp_forward_fc_fu_268_ap_idle),
    .ap_ready(grp_forward_fc_fu_268_ap_ready),
    .fc_layer_2_2_2_2_input_data_V_address0(grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0),
    .fc_layer_2_2_2_2_input_data_V_ce0(grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0),
    .fc_layer_2_2_2_2_input_data_V_q0(fc1_input_data_V_q0),
    .ap_return_0(grp_forward_fc_fu_268_ap_return_0),
    .ap_return_1(grp_forward_fc_fu_268_ap_return_1)
);

forward_ReLu grp_forward_ReLu_fu_275(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_forward_ReLu_fu_275_ap_start),
    .ap_done(grp_forward_ReLu_fu_275_ap_done),
    .ap_idle(grp_forward_ReLu_fu_275_ap_idle),
    .ap_ready(grp_forward_ReLu_fu_275_ap_ready),
    .activation_layer_2_2_2_input_data_V_address0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0),
    .activation_layer_2_2_2_input_data_V_ce0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0),
    .activation_layer_2_2_2_input_data_V_q0(fx_input_data_V_q0),
    .activation_layer_2_2_2_output_data_V_address0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0),
    .activation_layer_2_2_2_output_data_V_ce0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0),
    .activation_layer_2_2_2_output_data_V_we0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0),
    .activation_layer_2_2_2_output_data_V_d0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0)
);

copy_tensor_3 grp_copy_tensor_3_fu_281(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_tensor_3_fu_281_ap_start),
    .ap_done(grp_copy_tensor_3_fu_281_ap_done),
    .ap_idle(grp_copy_tensor_3_fu_281_ap_idle),
    .ap_ready(grp_copy_tensor_3_fu_281_ap_ready),
    .p_read2(fc1_output_data_0_V_reg_374),
    .p_read7(fc1_output_data_1_V_reg_380),
    .ap_return_0(grp_copy_tensor_3_fu_281_ap_return_0),
    .ap_return_1(grp_copy_tensor_3_fu_281_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Conv_forward_fu_216_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_Conv_forward_fu_216_ap_start_reg <= 1'b1;
        end else if ((grp_Conv_forward_fu_216_ap_ready == 1'b1)) begin
            grp_Conv_forward_fu_216_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copy_tensor_1_fu_225_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_copy_tensor_1_fu_225_ap_start_reg <= 1'b1;
        end else if ((grp_copy_tensor_1_fu_225_ap_ready == 1'b1)) begin
            grp_copy_tensor_1_fu_225_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copy_tensor_2_fu_258_ap_start_reg <= 1'b0;
    end else begin
        if (((grp_softmax_fu_204_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
            grp_copy_tensor_2_fu_258_ap_start_reg <= 1'b1;
        end else if ((grp_copy_tensor_2_fu_258_ap_ready == 1'b1)) begin
            grp_copy_tensor_2_fu_258_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copy_tensor_3_fu_281_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
            grp_copy_tensor_3_fu_281_ap_start_reg <= 1'b1;
        end else if ((grp_copy_tensor_3_fu_281_ap_ready == 1'b1)) begin
            grp_copy_tensor_3_fu_281_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copy_tensor_fu_248_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
            grp_copy_tensor_fu_248_ap_start_reg <= 1'b1;
        end else if ((grp_copy_tensor_fu_248_ap_ready == 1'b1)) begin
            grp_copy_tensor_fu_248_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_forward_ReLu_fu_275_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_forward_ReLu_fu_275_ap_start_reg <= 1'b1;
        end else if ((grp_forward_ReLu_fu_275_ap_ready == 1'b1)) begin
            grp_forward_ReLu_fu_275_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_forward_fc_fu_268_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_forward_fc_fu_268_ap_start_reg <= 1'b1;
        end else if ((grp_forward_fc_fu_268_ap_ready == 1'b1)) begin
            grp_forward_fc_fu_268_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_softmax_fu_204_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13_on_subcall_done))) begin
            grp_softmax_fu_204_ap_start_reg <= 1'b1;
        end else if ((grp_softmax_fu_204_ap_ready == 1'b1)) begin
            grp_softmax_fu_204_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_size_x_read_reg_344 <= conv_size_x;
        conv_size_y_read_reg_349 <= conv_size_y;
        data_in_size_x_read_reg_319 <= data_in_size_x;
        data_in_size_y_read_reg_324 <= data_in_size_y;
        data_in_size_z_read_reg_329 <= data_in_size_z;
        data_out_size_x_read_reg_334 <= data_out_size_x;
        data_out_size_y_read_reg_339 <= data_out_size_y;
        fc_size_x_read_reg_364 <= fc_size_x;
        fc_size_y_read_reg_369 <= fc_size_y;
        relu_size_x_read_reg_354 <= relu_size_x;
        relu_size_y_read_reg_359 <= relu_size_y;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
        fc1_output_data_0_V_reg_374 <= grp_forward_fc_fu_268_ap_return_0;
        fc1_output_data_1_V_reg_380 <= grp_forward_fc_fu_268_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13_on_subcall_done))) begin
        softmax_input_data_0_reg_386 <= grp_copy_tensor_3_fu_281_ap_return_0;
        softmax_input_data_1_reg_391 <= grp_copy_tensor_3_fu_281_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_softmax_fu_204_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        softmax_y_hat_data_0_reg_396 <= grp_softmax_fu_204_ap_return_0;
        softmax_y_hat_data_1_reg_401 <= grp_softmax_fu_204_ap_return_1;
    end
end

always @ (*) begin
    if (((grp_copy_tensor_2_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_copy_tensor_2_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_input_data_V_address0 = grp_copy_tensor_1_fu_225_in1_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_input_data_V_address0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0;
    end else begin
        conv1_input_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_input_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_input_data_V_ce0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;
    end else begin
        conv1_input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_input_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0;
    end else begin
        conv1_input_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        conv1_output_data_V_address0 = grp_copy_tensor_1_fu_225_in2_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_output_data_V_address0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0;
    end else begin
        conv1_output_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        conv1_output_data_V_ce0 = grp_copy_tensor_1_fu_225_in2_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_output_data_V_ce0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0;
    end else begin
        conv1_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_output_data_V_we0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0;
    end else begin
        conv1_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0;
    end else begin
        conv_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0;
    end else begin
        conv_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_data_V_ce0 = grp_copy_tensor_1_fu_225_in2_V_ce0;
    end else begin
        data_in_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        fc1_input_data_V_address0 = grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        fc1_input_data_V_address0 = grp_copy_tensor_1_fu_225_in1_V_address0;
    end else begin
        fc1_input_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        fc1_input_data_V_ce0 = grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        fc1_input_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0;
    end else begin
        fc1_input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        fc1_input_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0;
    end else begin
        fc1_input_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fx_input_data_V_address0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        fx_input_data_V_address0 = grp_copy_tensor_1_fu_225_in1_V_address0;
    end else begin
        fx_input_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fx_input_data_V_ce0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        fx_input_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0;
    end else begin
        fx_input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fx_input_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0;
    end else begin
        fx_input_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fx_output_data_V_address0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12))) begin
        fx_output_data_V_address0 = grp_copy_tensor_1_fu_225_in2_V_address0;
    end else begin
        fx_output_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fx_output_data_V_ce0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12))) begin
        fx_output_data_V_ce0 = grp_copy_tensor_1_fu_225_in2_V_ce0;
    end else begin
        fx_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fx_output_data_V_we0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0;
    end else begin
        fx_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_copy_tensor_1_fu_225_in2_V_q0 = fx_output_data_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_copy_tensor_1_fu_225_in2_V_q0 = conv1_output_data_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_copy_tensor_1_fu_225_in2_V_q0 = data_in_data_V_q0;
    end else begin
        grp_copy_tensor_1_fu_225_in2_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_copy_tensor_1_fu_225_size1_x = relu_size_x_read_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_copy_tensor_1_fu_225_size1_x = conv_size_x_read_reg_344;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_copy_tensor_1_fu_225_size1_x = 32'd2;
    end else begin
        grp_copy_tensor_1_fu_225_size1_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_copy_tensor_1_fu_225_size1_y = relu_size_y_read_reg_359;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_copy_tensor_1_fu_225_size1_y = conv_size_y_read_reg_349;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_copy_tensor_1_fu_225_size1_y = 32'd2;
    end else begin
        grp_copy_tensor_1_fu_225_size1_y = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_copy_tensor_1_fu_225_size2_x = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_copy_tensor_1_fu_225_size2_x = data_in_size_x_read_reg_319;
    end else begin
        grp_copy_tensor_1_fu_225_size2_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_copy_tensor_1_fu_225_size2_y = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_copy_tensor_1_fu_225_size2_y = data_in_size_y_read_reg_324;
    end else begin
        grp_copy_tensor_1_fu_225_size2_y = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_copy_tensor_1_fu_225_size2_z = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_copy_tensor_1_fu_225_size2_z = data_in_size_z_read_reg_329;
    end else begin
        grp_copy_tensor_1_fu_225_size2_z = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        relu_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0;
    end else begin
        relu_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        relu_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0;
    end else begin
        relu_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_copy_tensor_1_fu_225_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_Conv_forward_fu_216_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_copy_tensor_1_fu_225_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_copy_tensor_1_fu_225_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((grp_softmax_fu_204_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((grp_copy_tensor_2_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state12_on_subcall_done = ((grp_copy_tensor_1_fu_225_ap_done == 1'b0) | (grp_forward_fc_fu_268_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state13_on_subcall_done = ((grp_copy_tensor_fu_248_ap_done == 1'b0) | (grp_copy_tensor_3_fu_281_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state8_on_subcall_done = ((grp_forward_ReLu_fu_275_ap_done == 1'b0) | (grp_copy_tensor_1_fu_225_ap_done == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_Conv_forward_fu_216_ap_start = grp_Conv_forward_fu_216_ap_start_reg;

assign grp_copy_tensor_1_fu_225_ap_start = grp_copy_tensor_1_fu_225_ap_start_reg;

assign grp_copy_tensor_2_fu_258_ap_start = grp_copy_tensor_2_fu_258_ap_start_reg;

assign grp_copy_tensor_3_fu_281_ap_start = grp_copy_tensor_3_fu_281_ap_start_reg;

assign grp_copy_tensor_fu_248_ap_start = grp_copy_tensor_fu_248_ap_start_reg;

assign grp_forward_ReLu_fu_275_ap_start = grp_forward_ReLu_fu_275_ap_start_reg;

assign grp_forward_fc_fu_268_ap_start = grp_forward_fc_fu_268_ap_start_reg;

assign grp_softmax_fu_204_ap_start = grp_softmax_fu_204_ap_start_reg;

endmodule //Lenet
