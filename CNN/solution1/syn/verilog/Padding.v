// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Padding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_address0,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_q0,
        padd_out_data_V_address0,
        padd_out_data_V_ce0,
        padd_out_data_V_we0,
        padd_out_data_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_layer1_2_2_2_1_2_2_2_input_data_V_address0;
output   conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;
input  [15:0] conv_layer1_2_2_2_1_2_2_2_input_data_V_q0;
output  [4:0] padd_out_data_V_address0;
output   padd_out_data_V_ce0;
output   padd_out_data_V_we0;
output  [15:0] padd_out_data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;
reg[4:0] padd_out_data_V_address0;
reg padd_out_data_V_ce0;
reg padd_out_data_V_we0;
reg[15:0] padd_out_data_V_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] p_x_assign_cast6_fu_112_p1;
reg   [4:0] p_x_assign_cast6_reg_255;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_122_p2;
reg   [2:0] i_reg_263;
wire   [0:0] tmp_s_fu_128_p2;
reg   [0:0] tmp_s_reg_268;
wire   [0:0] exitcond2_fu_116_p2;
wire   [0:0] p_not_fu_134_p2;
reg   [0:0] p_not_reg_273;
wire   [2:0] j_fu_146_p2;
reg   [2:0] j_reg_281;
wire    ap_CS_fsm_state3;
wire   [0:0] brmerge2_fu_174_p2;
reg   [0:0] brmerge2_reg_286;
wire   [0:0] exitcond1_fu_140_p2;
wire   [1:0] tmp_27_fu_180_p1;
reg   [1:0] tmp_27_reg_290;
wire   [2:0] tmp3_fu_190_p2;
reg   [2:0] tmp3_reg_295;
wire   [1:0] c_fu_202_p2;
reg   [1:0] c_reg_303;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_11_fu_226_p1;
reg   [63:0] tmp_11_reg_308;
wire   [0:0] exitcond_fu_196_p2;
reg   [2:0] p_x_assign_reg_78;
reg   [2:0] p_y_assign_reg_90;
reg   [1:0] p_z_assign_reg_101;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_14_fu_250_p1;
wire   [0:0] tmp_9_fu_152_p2;
wire   [0:0] p_not1_fu_158_p2;
wire   [0:0] tmp1_fu_169_p2;
wire   [0:0] tmp_fu_164_p2;
wire   [2:0] tmp_28_fu_184_p2;
wire   [0:0] tmp_29_fu_208_p1;
wire   [4:0] tmp2_fu_212_p4;
wire   [4:0] tmp_10_fu_221_p2;
wire   [2:0] tmp_12_fu_231_p3;
wire   [2:0] tmp4_fu_239_p2;
wire   [2:0] tmp_13_fu_245_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_x_assign_reg_78 <= i_reg_263;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_x_assign_reg_78 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_y_assign_reg_90 <= j_reg_281;
    end else if (((exitcond2_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_y_assign_reg_90 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_z_assign_reg_101 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_z_assign_reg_101 <= c_reg_303;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        brmerge2_reg_286 <= brmerge2_fu_174_p2;
        tmp3_reg_295 <= tmp3_fu_190_p2;
        tmp_27_reg_290 <= tmp_27_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_303 <= c_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_263 <= i_fu_122_p2;
        p_x_assign_cast6_reg_255[2 : 0] <= p_x_assign_cast6_fu_112_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_281 <= j_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_not_reg_273 <= p_not_fu_134_p2;
        tmp_s_reg_268 <= tmp_s_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_11_reg_308[4 : 0] <= tmp_11_fu_226_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 = 1'b1;
    end else begin
        conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        padd_out_data_V_address0 = tmp_11_reg_308;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        padd_out_data_V_address0 = tmp_11_fu_226_p1;
    end else begin
        padd_out_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        padd_out_data_V_ce0 = 1'b1;
    end else begin
        padd_out_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        padd_out_data_V_d0 = conv_layer1_2_2_2_1_2_2_2_input_data_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        padd_out_data_V_d0 = 16'd0;
    end else begin
        padd_out_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((brmerge2_reg_286 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((brmerge2_reg_286 == 1'd1) & (exitcond_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        padd_out_data_V_we0 = 1'b1;
    end else begin
        padd_out_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign brmerge2_fu_174_p2 = (tmp_fu_164_p2 | tmp1_fu_169_p2);

assign c_fu_202_p2 = (p_z_assign_reg_101 + 2'd1);

assign conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 = tmp_14_fu_250_p1;

assign exitcond1_fu_140_p2 = ((p_y_assign_reg_90 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_116_p2 = ((p_x_assign_reg_78 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_196_p2 = ((p_z_assign_reg_101 == 2'd2) ? 1'b1 : 1'b0);

assign i_fu_122_p2 = (p_x_assign_reg_78 + 3'd1);

assign j_fu_146_p2 = (p_y_assign_reg_90 + 3'd1);

assign p_not1_fu_158_p2 = ((p_y_assign_reg_90 > 3'd2) ? 1'b1 : 1'b0);

assign p_not_fu_134_p2 = ((p_x_assign_reg_78 > 3'd2) ? 1'b1 : 1'b0);

assign p_x_assign_cast6_fu_112_p1 = p_x_assign_reg_78;

assign tmp1_fu_169_p2 = (p_not_reg_273 | p_not1_fu_158_p2);

assign tmp2_fu_212_p4 = {{{tmp_29_fu_208_p1}, {tmp_27_reg_290}}, {2'd0}};

assign tmp3_fu_190_p2 = (tmp_28_fu_184_p2 + p_x_assign_reg_78);

assign tmp4_fu_239_p2 = ($signed(tmp_12_fu_231_p3) + $signed(3'd5));

assign tmp_10_fu_221_p2 = (p_x_assign_cast6_reg_255 + tmp2_fu_212_p4);

assign tmp_11_fu_226_p1 = tmp_10_fu_221_p2;

assign tmp_12_fu_231_p3 = {{tmp_29_fu_208_p1}, {2'd0}};

assign tmp_13_fu_245_p2 = (tmp4_fu_239_p2 + tmp3_reg_295);

assign tmp_14_fu_250_p1 = tmp_13_fu_245_p2;

assign tmp_27_fu_180_p1 = p_y_assign_reg_90[1:0];

assign tmp_28_fu_184_p2 = p_y_assign_reg_90 << 3'd1;

assign tmp_29_fu_208_p1 = p_z_assign_reg_101[0:0];

assign tmp_9_fu_152_p2 = ((p_y_assign_reg_90 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_fu_164_p2 = (tmp_s_reg_268 | tmp_9_fu_152_p2);

assign tmp_s_fu_128_p2 = ((p_x_assign_reg_78 == 3'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    p_x_assign_cast6_reg_255[4:3] <= 2'b00;
    tmp_11_reg_308[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //Padding
