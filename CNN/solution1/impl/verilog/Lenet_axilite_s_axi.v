// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module Lenet_axilite_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 9,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [2:0]                    data_in_data_V_address0,
    input  wire                          data_in_data_V_ce0,
    output wire [15:0]                   data_in_data_V_q0,
    output wire [31:0]                   data_in_size_x,
    output wire [31:0]                   data_in_size_y,
    output wire [31:0]                   data_in_size_z,
    input  wire [2:0]                    conv_data_V_address0,
    input  wire                          conv_data_V_ce0,
    input  wire                          conv_data_V_we0,
    input  wire [15:0]                   conv_data_V_d0,
    output wire [31:0]                   conv_size_x,
    output wire [31:0]                   conv_size_y,
    output wire [31:0]                   conv_size_z,
    input  wire [2:0]                    relu_data_V_address0,
    input  wire                          relu_data_V_ce0,
    input  wire                          relu_data_V_we0,
    input  wire [15:0]                   relu_data_V_d0,
    output wire [31:0]                   relu_size_x,
    output wire [31:0]                   relu_size_y,
    output wire [31:0]                   relu_size_z,
    input  wire [2:0]                    pool_data_V_address0,
    input  wire                          pool_data_V_ce0,
    input  wire                          pool_data_V_we0,
    input  wire [15:0]                   pool_data_V_d0,
    output wire [31:0]                   pool_size_x,
    output wire [31:0]                   pool_size_y,
    output wire [31:0]                   pool_size_z,
    input  wire [2:0]                    fc_data_V_address0,
    input  wire                          fc_data_V_ce0,
    input  wire                          fc_data_V_we0,
    input  wire [15:0]                   fc_data_V_d0,
    output wire [31:0]                   fc_size_x,
    output wire [31:0]                   fc_size_y,
    output wire [31:0]                   fc_size_z,
    input  wire [4:0]                    data_out_data_V_address0,
    input  wire                          data_out_data_V_ce0,
    input  wire                          data_out_data_V_we0,
    input  wire [15:0]                   data_out_data_V_d0,
    output wire [31:0]                   data_out_size_x,
    output wire [31:0]                   data_out_size_y,
    output wire [31:0]                   data_out_size_z
);
//------------------------Address Info-------------------
// 0x000 : Control signals
//         bit 0  - ap_start (Read/Write/COH)
//         bit 1  - ap_done (Read/COR)
//         bit 2  - ap_idle (Read)
//         bit 3  - ap_ready (Read)
//         bit 7  - auto_restart (Read/Write)
//         others - reserved
// 0x004 : Global Interrupt Enable Register
//         bit 0  - Global Interrupt Enable (Read/Write)
//         others - reserved
// 0x008 : IP Interrupt Enable Register (Read/Write)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x00c : IP Interrupt Status Register (Read/TOW)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x020 : Data signal of data_in_size_x
//         bit 31~0 - data_in_size_x[31:0] (Read/Write)
// 0x024 : reserved
// 0x028 : Data signal of data_in_size_y
//         bit 31~0 - data_in_size_y[31:0] (Read/Write)
// 0x02c : reserved
// 0x030 : Data signal of data_in_size_z
//         bit 31~0 - data_in_size_z[31:0] (Read/Write)
// 0x034 : reserved
// 0x050 : Data signal of conv_size_x
//         bit 31~0 - conv_size_x[31:0] (Read/Write)
// 0x054 : reserved
// 0x058 : Data signal of conv_size_y
//         bit 31~0 - conv_size_y[31:0] (Read/Write)
// 0x05c : reserved
// 0x060 : Data signal of conv_size_z
//         bit 31~0 - conv_size_z[31:0] (Read/Write)
// 0x064 : reserved
// 0x080 : Data signal of relu_size_x
//         bit 31~0 - relu_size_x[31:0] (Read/Write)
// 0x084 : reserved
// 0x088 : Data signal of relu_size_y
//         bit 31~0 - relu_size_y[31:0] (Read/Write)
// 0x08c : reserved
// 0x090 : Data signal of relu_size_z
//         bit 31~0 - relu_size_z[31:0] (Read/Write)
// 0x094 : reserved
// 0x0b0 : Data signal of pool_size_x
//         bit 31~0 - pool_size_x[31:0] (Read/Write)
// 0x0b4 : reserved
// 0x0b8 : Data signal of pool_size_y
//         bit 31~0 - pool_size_y[31:0] (Read/Write)
// 0x0bc : reserved
// 0x0c0 : Data signal of pool_size_z
//         bit 31~0 - pool_size_z[31:0] (Read/Write)
// 0x0c4 : reserved
// 0x0e0 : Data signal of fc_size_x
//         bit 31~0 - fc_size_x[31:0] (Read/Write)
// 0x0e4 : reserved
// 0x0e8 : Data signal of fc_size_y
//         bit 31~0 - fc_size_y[31:0] (Read/Write)
// 0x0ec : reserved
// 0x0f0 : Data signal of fc_size_z
//         bit 31~0 - fc_size_z[31:0] (Read/Write)
// 0x0f4 : reserved
// 0x140 : Data signal of data_out_size_x
//         bit 31~0 - data_out_size_x[31:0] (Read/Write)
// 0x144 : reserved
// 0x148 : Data signal of data_out_size_y
//         bit 31~0 - data_out_size_y[31:0] (Read/Write)
// 0x14c : reserved
// 0x150 : Data signal of data_out_size_z
//         bit 31~0 - data_out_size_z[31:0] (Read/Write)
// 0x154 : reserved
// 0x010 ~
// 0x01f : Memory 'data_in_data_V' (8 * 16b)
//         Word n : bit [15: 0] - data_in_data_V[2n]
//                  bit [31:16] - data_in_data_V[2n+1]
// 0x040 ~
// 0x04f : Memory 'conv_data_V' (8 * 16b)
//         Word n : bit [15: 0] - conv_data_V[2n]
//                  bit [31:16] - conv_data_V[2n+1]
// 0x070 ~
// 0x07f : Memory 'relu_data_V' (8 * 16b)
//         Word n : bit [15: 0] - relu_data_V[2n]
//                  bit [31:16] - relu_data_V[2n+1]
// 0x0a0 ~
// 0x0af : Memory 'pool_data_V' (8 * 16b)
//         Word n : bit [15: 0] - pool_data_V[2n]
//                  bit [31:16] - pool_data_V[2n+1]
// 0x0d0 ~
// 0x0df : Memory 'fc_data_V' (8 * 16b)
//         Word n : bit [15: 0] - fc_data_V[2n]
//                  bit [31:16] - fc_data_V[2n+1]
// 0x100 ~
// 0x13f : Memory 'data_out_data_V' (27 * 16b)
//         Word n : bit [15: 0] - data_out_data_V[2n]
//                  bit [31:16] - data_out_data_V[2n+1]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                = 9'h000,
    ADDR_GIE                    = 9'h004,
    ADDR_IER                    = 9'h008,
    ADDR_ISR                    = 9'h00c,
    ADDR_DATA_IN_SIZE_X_DATA_0  = 9'h020,
    ADDR_DATA_IN_SIZE_X_CTRL    = 9'h024,
    ADDR_DATA_IN_SIZE_Y_DATA_0  = 9'h028,
    ADDR_DATA_IN_SIZE_Y_CTRL    = 9'h02c,
    ADDR_DATA_IN_SIZE_Z_DATA_0  = 9'h030,
    ADDR_DATA_IN_SIZE_Z_CTRL    = 9'h034,
    ADDR_CONV_SIZE_X_DATA_0     = 9'h050,
    ADDR_CONV_SIZE_X_CTRL       = 9'h054,
    ADDR_CONV_SIZE_Y_DATA_0     = 9'h058,
    ADDR_CONV_SIZE_Y_CTRL       = 9'h05c,
    ADDR_CONV_SIZE_Z_DATA_0     = 9'h060,
    ADDR_CONV_SIZE_Z_CTRL       = 9'h064,
    ADDR_RELU_SIZE_X_DATA_0     = 9'h080,
    ADDR_RELU_SIZE_X_CTRL       = 9'h084,
    ADDR_RELU_SIZE_Y_DATA_0     = 9'h088,
    ADDR_RELU_SIZE_Y_CTRL       = 9'h08c,
    ADDR_RELU_SIZE_Z_DATA_0     = 9'h090,
    ADDR_RELU_SIZE_Z_CTRL       = 9'h094,
    ADDR_POOL_SIZE_X_DATA_0     = 9'h0b0,
    ADDR_POOL_SIZE_X_CTRL       = 9'h0b4,
    ADDR_POOL_SIZE_Y_DATA_0     = 9'h0b8,
    ADDR_POOL_SIZE_Y_CTRL       = 9'h0bc,
    ADDR_POOL_SIZE_Z_DATA_0     = 9'h0c0,
    ADDR_POOL_SIZE_Z_CTRL       = 9'h0c4,
    ADDR_FC_SIZE_X_DATA_0       = 9'h0e0,
    ADDR_FC_SIZE_X_CTRL         = 9'h0e4,
    ADDR_FC_SIZE_Y_DATA_0       = 9'h0e8,
    ADDR_FC_SIZE_Y_CTRL         = 9'h0ec,
    ADDR_FC_SIZE_Z_DATA_0       = 9'h0f0,
    ADDR_FC_SIZE_Z_CTRL         = 9'h0f4,
    ADDR_DATA_OUT_SIZE_X_DATA_0 = 9'h140,
    ADDR_DATA_OUT_SIZE_X_CTRL   = 9'h144,
    ADDR_DATA_OUT_SIZE_Y_DATA_0 = 9'h148,
    ADDR_DATA_OUT_SIZE_Y_CTRL   = 9'h14c,
    ADDR_DATA_OUT_SIZE_Z_DATA_0 = 9'h150,
    ADDR_DATA_OUT_SIZE_Z_CTRL   = 9'h154,
    ADDR_DATA_IN_DATA_V_BASE    = 9'h010,
    ADDR_DATA_IN_DATA_V_HIGH    = 9'h01f,
    ADDR_CONV_DATA_V_BASE       = 9'h040,
    ADDR_CONV_DATA_V_HIGH       = 9'h04f,
    ADDR_RELU_DATA_V_BASE       = 9'h070,
    ADDR_RELU_DATA_V_HIGH       = 9'h07f,
    ADDR_POOL_DATA_V_BASE       = 9'h0a0,
    ADDR_POOL_DATA_V_HIGH       = 9'h0af,
    ADDR_FC_DATA_V_BASE         = 9'h0d0,
    ADDR_FC_DATA_V_HIGH         = 9'h0df,
    ADDR_DATA_OUT_DATA_V_BASE   = 9'h100,
    ADDR_DATA_OUT_DATA_V_HIGH   = 9'h13f,
    WRIDLE                      = 2'd0,
    WRDATA                      = 2'd1,
    WRRESP                      = 2'd2,
    WRRESET                     = 2'd3,
    RDIDLE                      = 2'd0,
    RDDATA                      = 2'd1,
    RDRESET                     = 2'd2,
    ADDR_BITS         = 9;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_data_in_size_x = 'b0;
    reg  [31:0]                   int_data_in_size_y = 'b0;
    reg  [31:0]                   int_data_in_size_z = 'b0;
    reg  [31:0]                   int_conv_size_x = 'b0;
    reg  [31:0]                   int_conv_size_y = 'b0;
    reg  [31:0]                   int_conv_size_z = 'b0;
    reg  [31:0]                   int_relu_size_x = 'b0;
    reg  [31:0]                   int_relu_size_y = 'b0;
    reg  [31:0]                   int_relu_size_z = 'b0;
    reg  [31:0]                   int_pool_size_x = 'b0;
    reg  [31:0]                   int_pool_size_y = 'b0;
    reg  [31:0]                   int_pool_size_z = 'b0;
    reg  [31:0]                   int_fc_size_x = 'b0;
    reg  [31:0]                   int_fc_size_y = 'b0;
    reg  [31:0]                   int_fc_size_z = 'b0;
    reg  [31:0]                   int_data_out_size_x = 'b0;
    reg  [31:0]                   int_data_out_size_y = 'b0;
    reg  [31:0]                   int_data_out_size_z = 'b0;
    // memory signals
    wire [1:0]                    int_data_in_data_V_address0;
    wire                          int_data_in_data_V_ce0;
    wire                          int_data_in_data_V_we0;
    wire [3:0]                    int_data_in_data_V_be0;
    wire [31:0]                   int_data_in_data_V_d0;
    wire [31:0]                   int_data_in_data_V_q0;
    wire [1:0]                    int_data_in_data_V_address1;
    wire                          int_data_in_data_V_ce1;
    wire                          int_data_in_data_V_we1;
    wire [3:0]                    int_data_in_data_V_be1;
    wire [31:0]                   int_data_in_data_V_d1;
    wire [31:0]                   int_data_in_data_V_q1;
    reg                           int_data_in_data_V_read;
    reg                           int_data_in_data_V_write;
    reg  [0:0]                    int_data_in_data_V_shift;
    wire [1:0]                    int_conv_data_V_address0;
    wire                          int_conv_data_V_ce0;
    wire                          int_conv_data_V_we0;
    wire [3:0]                    int_conv_data_V_be0;
    wire [31:0]                   int_conv_data_V_d0;
    wire [31:0]                   int_conv_data_V_q0;
    wire [1:0]                    int_conv_data_V_address1;
    wire                          int_conv_data_V_ce1;
    wire                          int_conv_data_V_we1;
    wire [3:0]                    int_conv_data_V_be1;
    wire [31:0]                   int_conv_data_V_d1;
    wire [31:0]                   int_conv_data_V_q1;
    reg                           int_conv_data_V_read;
    reg                           int_conv_data_V_write;
    reg  [0:0]                    int_conv_data_V_shift;
    wire [1:0]                    int_relu_data_V_address0;
    wire                          int_relu_data_V_ce0;
    wire                          int_relu_data_V_we0;
    wire [3:0]                    int_relu_data_V_be0;
    wire [31:0]                   int_relu_data_V_d0;
    wire [31:0]                   int_relu_data_V_q0;
    wire [1:0]                    int_relu_data_V_address1;
    wire                          int_relu_data_V_ce1;
    wire                          int_relu_data_V_we1;
    wire [3:0]                    int_relu_data_V_be1;
    wire [31:0]                   int_relu_data_V_d1;
    wire [31:0]                   int_relu_data_V_q1;
    reg                           int_relu_data_V_read;
    reg                           int_relu_data_V_write;
    reg  [0:0]                    int_relu_data_V_shift;
    wire [1:0]                    int_pool_data_V_address0;
    wire                          int_pool_data_V_ce0;
    wire                          int_pool_data_V_we0;
    wire [3:0]                    int_pool_data_V_be0;
    wire [31:0]                   int_pool_data_V_d0;
    wire [31:0]                   int_pool_data_V_q0;
    wire [1:0]                    int_pool_data_V_address1;
    wire                          int_pool_data_V_ce1;
    wire                          int_pool_data_V_we1;
    wire [3:0]                    int_pool_data_V_be1;
    wire [31:0]                   int_pool_data_V_d1;
    wire [31:0]                   int_pool_data_V_q1;
    reg                           int_pool_data_V_read;
    reg                           int_pool_data_V_write;
    reg  [0:0]                    int_pool_data_V_shift;
    wire [1:0]                    int_fc_data_V_address0;
    wire                          int_fc_data_V_ce0;
    wire                          int_fc_data_V_we0;
    wire [3:0]                    int_fc_data_V_be0;
    wire [31:0]                   int_fc_data_V_d0;
    wire [31:0]                   int_fc_data_V_q0;
    wire [1:0]                    int_fc_data_V_address1;
    wire                          int_fc_data_V_ce1;
    wire                          int_fc_data_V_we1;
    wire [3:0]                    int_fc_data_V_be1;
    wire [31:0]                   int_fc_data_V_d1;
    wire [31:0]                   int_fc_data_V_q1;
    reg                           int_fc_data_V_read;
    reg                           int_fc_data_V_write;
    reg  [0:0]                    int_fc_data_V_shift;
    wire [3:0]                    int_data_out_data_V_address0;
    wire                          int_data_out_data_V_ce0;
    wire                          int_data_out_data_V_we0;
    wire [3:0]                    int_data_out_data_V_be0;
    wire [31:0]                   int_data_out_data_V_d0;
    wire [31:0]                   int_data_out_data_V_q0;
    wire [3:0]                    int_data_out_data_V_address1;
    wire                          int_data_out_data_V_ce1;
    wire                          int_data_out_data_V_we1;
    wire [3:0]                    int_data_out_data_V_be1;
    wire [31:0]                   int_data_out_data_V_d1;
    wire [31:0]                   int_data_out_data_V_q1;
    reg                           int_data_out_data_V_read;
    reg                           int_data_out_data_V_write;
    reg  [0:0]                    int_data_out_data_V_shift;

//------------------------Instantiation------------------
// int_data_in_data_V
Lenet_axilite_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4 )
) int_data_in_data_V (
    .clk0     ( ACLK ),
    .address0 ( int_data_in_data_V_address0 ),
    .ce0      ( int_data_in_data_V_ce0 ),
    .we0      ( int_data_in_data_V_we0 ),
    .be0      ( int_data_in_data_V_be0 ),
    .d0       ( int_data_in_data_V_d0 ),
    .q0       ( int_data_in_data_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_data_in_data_V_address1 ),
    .ce1      ( int_data_in_data_V_ce1 ),
    .we1      ( int_data_in_data_V_we1 ),
    .be1      ( int_data_in_data_V_be1 ),
    .d1       ( int_data_in_data_V_d1 ),
    .q1       ( int_data_in_data_V_q1 )
);
// int_conv_data_V
Lenet_axilite_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4 )
) int_conv_data_V (
    .clk0     ( ACLK ),
    .address0 ( int_conv_data_V_address0 ),
    .ce0      ( int_conv_data_V_ce0 ),
    .we0      ( int_conv_data_V_we0 ),
    .be0      ( int_conv_data_V_be0 ),
    .d0       ( int_conv_data_V_d0 ),
    .q0       ( int_conv_data_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_conv_data_V_address1 ),
    .ce1      ( int_conv_data_V_ce1 ),
    .we1      ( int_conv_data_V_we1 ),
    .be1      ( int_conv_data_V_be1 ),
    .d1       ( int_conv_data_V_d1 ),
    .q1       ( int_conv_data_V_q1 )
);
// int_relu_data_V
Lenet_axilite_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4 )
) int_relu_data_V (
    .clk0     ( ACLK ),
    .address0 ( int_relu_data_V_address0 ),
    .ce0      ( int_relu_data_V_ce0 ),
    .we0      ( int_relu_data_V_we0 ),
    .be0      ( int_relu_data_V_be0 ),
    .d0       ( int_relu_data_V_d0 ),
    .q0       ( int_relu_data_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_relu_data_V_address1 ),
    .ce1      ( int_relu_data_V_ce1 ),
    .we1      ( int_relu_data_V_we1 ),
    .be1      ( int_relu_data_V_be1 ),
    .d1       ( int_relu_data_V_d1 ),
    .q1       ( int_relu_data_V_q1 )
);
// int_pool_data_V
Lenet_axilite_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4 )
) int_pool_data_V (
    .clk0     ( ACLK ),
    .address0 ( int_pool_data_V_address0 ),
    .ce0      ( int_pool_data_V_ce0 ),
    .we0      ( int_pool_data_V_we0 ),
    .be0      ( int_pool_data_V_be0 ),
    .d0       ( int_pool_data_V_d0 ),
    .q0       ( int_pool_data_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_pool_data_V_address1 ),
    .ce1      ( int_pool_data_V_ce1 ),
    .we1      ( int_pool_data_V_we1 ),
    .be1      ( int_pool_data_V_be1 ),
    .d1       ( int_pool_data_V_d1 ),
    .q1       ( int_pool_data_V_q1 )
);
// int_fc_data_V
Lenet_axilite_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4 )
) int_fc_data_V (
    .clk0     ( ACLK ),
    .address0 ( int_fc_data_V_address0 ),
    .ce0      ( int_fc_data_V_ce0 ),
    .we0      ( int_fc_data_V_we0 ),
    .be0      ( int_fc_data_V_be0 ),
    .d0       ( int_fc_data_V_d0 ),
    .q0       ( int_fc_data_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_fc_data_V_address1 ),
    .ce1      ( int_fc_data_V_ce1 ),
    .we1      ( int_fc_data_V_we1 ),
    .be1      ( int_fc_data_V_be1 ),
    .d1       ( int_fc_data_V_d1 ),
    .q1       ( int_fc_data_V_q1 )
);
// int_data_out_data_V
Lenet_axilite_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 14 )
) int_data_out_data_V (
    .clk0     ( ACLK ),
    .address0 ( int_data_out_data_V_address0 ),
    .ce0      ( int_data_out_data_V_ce0 ),
    .we0      ( int_data_out_data_V_we0 ),
    .be0      ( int_data_out_data_V_be0 ),
    .d0       ( int_data_out_data_V_d0 ),
    .q0       ( int_data_out_data_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_data_out_data_V_address1 ),
    .ce1      ( int_data_out_data_V_ce1 ),
    .we1      ( int_data_out_data_V_we1 ),
    .be1      ( int_data_out_data_V_be1 ),
    .d1       ( int_data_out_data_V_d1 ),
    .q1       ( int_data_out_data_V_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_data_in_data_V_read & !int_conv_data_V_read & !int_relu_data_V_read & !int_pool_data_V_read & !int_fc_data_V_read & !int_data_out_data_V_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_DATA_IN_SIZE_X_DATA_0: begin
                    rdata <= int_data_in_size_x[31:0];
                end
                ADDR_DATA_IN_SIZE_Y_DATA_0: begin
                    rdata <= int_data_in_size_y[31:0];
                end
                ADDR_DATA_IN_SIZE_Z_DATA_0: begin
                    rdata <= int_data_in_size_z[31:0];
                end
                ADDR_CONV_SIZE_X_DATA_0: begin
                    rdata <= int_conv_size_x[31:0];
                end
                ADDR_CONV_SIZE_Y_DATA_0: begin
                    rdata <= int_conv_size_y[31:0];
                end
                ADDR_CONV_SIZE_Z_DATA_0: begin
                    rdata <= int_conv_size_z[31:0];
                end
                ADDR_RELU_SIZE_X_DATA_0: begin
                    rdata <= int_relu_size_x[31:0];
                end
                ADDR_RELU_SIZE_Y_DATA_0: begin
                    rdata <= int_relu_size_y[31:0];
                end
                ADDR_RELU_SIZE_Z_DATA_0: begin
                    rdata <= int_relu_size_z[31:0];
                end
                ADDR_POOL_SIZE_X_DATA_0: begin
                    rdata <= int_pool_size_x[31:0];
                end
                ADDR_POOL_SIZE_Y_DATA_0: begin
                    rdata <= int_pool_size_y[31:0];
                end
                ADDR_POOL_SIZE_Z_DATA_0: begin
                    rdata <= int_pool_size_z[31:0];
                end
                ADDR_FC_SIZE_X_DATA_0: begin
                    rdata <= int_fc_size_x[31:0];
                end
                ADDR_FC_SIZE_Y_DATA_0: begin
                    rdata <= int_fc_size_y[31:0];
                end
                ADDR_FC_SIZE_Z_DATA_0: begin
                    rdata <= int_fc_size_z[31:0];
                end
                ADDR_DATA_OUT_SIZE_X_DATA_0: begin
                    rdata <= int_data_out_size_x[31:0];
                end
                ADDR_DATA_OUT_SIZE_Y_DATA_0: begin
                    rdata <= int_data_out_size_y[31:0];
                end
                ADDR_DATA_OUT_SIZE_Z_DATA_0: begin
                    rdata <= int_data_out_size_z[31:0];
                end
            endcase
        end
        else if (int_data_in_data_V_read) begin
            rdata <= int_data_in_data_V_q1;
        end
        else if (int_conv_data_V_read) begin
            rdata <= int_conv_data_V_q1;
        end
        else if (int_relu_data_V_read) begin
            rdata <= int_relu_data_V_q1;
        end
        else if (int_pool_data_V_read) begin
            rdata <= int_pool_data_V_q1;
        end
        else if (int_fc_data_V_read) begin
            rdata <= int_fc_data_V_q1;
        end
        else if (int_data_out_data_V_read) begin
            rdata <= int_data_out_data_V_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt       = int_gie & (|int_isr);
assign ap_start        = int_ap_start;
assign data_in_size_x  = int_data_in_size_x;
assign data_in_size_y  = int_data_in_size_y;
assign data_in_size_z  = int_data_in_size_z;
assign conv_size_x     = int_conv_size_x;
assign conv_size_y     = int_conv_size_y;
assign conv_size_z     = int_conv_size_z;
assign relu_size_x     = int_relu_size_x;
assign relu_size_y     = int_relu_size_y;
assign relu_size_z     = int_relu_size_z;
assign pool_size_x     = int_pool_size_x;
assign pool_size_y     = int_pool_size_y;
assign pool_size_z     = int_pool_size_z;
assign fc_size_x       = int_fc_size_x;
assign fc_size_y       = int_fc_size_y;
assign fc_size_z       = int_fc_size_z;
assign data_out_size_x = int_data_out_size_x;
assign data_out_size_y = int_data_out_size_y;
assign data_out_size_z = int_data_out_size_z;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_ap_idle
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_idle <= ap_idle;
    end
end

// int_ap_ready
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_ready <= ap_ready;
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_data_in_size_x[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_data_in_size_x[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_DATA_IN_SIZE_X_DATA_0)
            int_data_in_size_x[31:0] <= (WDATA[31:0] & wmask) | (int_data_in_size_x[31:0] & ~wmask);
    end
end

// int_data_in_size_y[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_data_in_size_y[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_DATA_IN_SIZE_Y_DATA_0)
            int_data_in_size_y[31:0] <= (WDATA[31:0] & wmask) | (int_data_in_size_y[31:0] & ~wmask);
    end
end

// int_data_in_size_z[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_data_in_size_z[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_DATA_IN_SIZE_Z_DATA_0)
            int_data_in_size_z[31:0] <= (WDATA[31:0] & wmask) | (int_data_in_size_z[31:0] & ~wmask);
    end
end

// int_conv_size_x[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_conv_size_x[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONV_SIZE_X_DATA_0)
            int_conv_size_x[31:0] <= (WDATA[31:0] & wmask) | (int_conv_size_x[31:0] & ~wmask);
    end
end

// int_conv_size_y[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_conv_size_y[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONV_SIZE_Y_DATA_0)
            int_conv_size_y[31:0] <= (WDATA[31:0] & wmask) | (int_conv_size_y[31:0] & ~wmask);
    end
end

// int_conv_size_z[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_conv_size_z[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONV_SIZE_Z_DATA_0)
            int_conv_size_z[31:0] <= (WDATA[31:0] & wmask) | (int_conv_size_z[31:0] & ~wmask);
    end
end

// int_relu_size_x[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_relu_size_x[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_RELU_SIZE_X_DATA_0)
            int_relu_size_x[31:0] <= (WDATA[31:0] & wmask) | (int_relu_size_x[31:0] & ~wmask);
    end
end

// int_relu_size_y[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_relu_size_y[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_RELU_SIZE_Y_DATA_0)
            int_relu_size_y[31:0] <= (WDATA[31:0] & wmask) | (int_relu_size_y[31:0] & ~wmask);
    end
end

// int_relu_size_z[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_relu_size_z[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_RELU_SIZE_Z_DATA_0)
            int_relu_size_z[31:0] <= (WDATA[31:0] & wmask) | (int_relu_size_z[31:0] & ~wmask);
    end
end

// int_pool_size_x[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_pool_size_x[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_POOL_SIZE_X_DATA_0)
            int_pool_size_x[31:0] <= (WDATA[31:0] & wmask) | (int_pool_size_x[31:0] & ~wmask);
    end
end

// int_pool_size_y[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_pool_size_y[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_POOL_SIZE_Y_DATA_0)
            int_pool_size_y[31:0] <= (WDATA[31:0] & wmask) | (int_pool_size_y[31:0] & ~wmask);
    end
end

// int_pool_size_z[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_pool_size_z[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_POOL_SIZE_Z_DATA_0)
            int_pool_size_z[31:0] <= (WDATA[31:0] & wmask) | (int_pool_size_z[31:0] & ~wmask);
    end
end

// int_fc_size_x[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_fc_size_x[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_FC_SIZE_X_DATA_0)
            int_fc_size_x[31:0] <= (WDATA[31:0] & wmask) | (int_fc_size_x[31:0] & ~wmask);
    end
end

// int_fc_size_y[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_fc_size_y[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_FC_SIZE_Y_DATA_0)
            int_fc_size_y[31:0] <= (WDATA[31:0] & wmask) | (int_fc_size_y[31:0] & ~wmask);
    end
end

// int_fc_size_z[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_fc_size_z[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_FC_SIZE_Z_DATA_0)
            int_fc_size_z[31:0] <= (WDATA[31:0] & wmask) | (int_fc_size_z[31:0] & ~wmask);
    end
end

// int_data_out_size_x[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_data_out_size_x[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_DATA_OUT_SIZE_X_DATA_0)
            int_data_out_size_x[31:0] <= (WDATA[31:0] & wmask) | (int_data_out_size_x[31:0] & ~wmask);
    end
end

// int_data_out_size_y[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_data_out_size_y[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_DATA_OUT_SIZE_Y_DATA_0)
            int_data_out_size_y[31:0] <= (WDATA[31:0] & wmask) | (int_data_out_size_y[31:0] & ~wmask);
    end
end

// int_data_out_size_z[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_data_out_size_z[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_DATA_OUT_SIZE_Z_DATA_0)
            int_data_out_size_z[31:0] <= (WDATA[31:0] & wmask) | (int_data_out_size_z[31:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// data_in_data_V
assign int_data_in_data_V_address0  = data_in_data_V_address0 >> 1;
assign int_data_in_data_V_ce0       = data_in_data_V_ce0;
assign int_data_in_data_V_we0       = 1'b0;
assign int_data_in_data_V_be0       = 1'b0;
assign int_data_in_data_V_d0        = 1'b0;
assign data_in_data_V_q0            = int_data_in_data_V_q0 >> (int_data_in_data_V_shift * 16);
assign int_data_in_data_V_address1  = ar_hs? raddr[3:2] : waddr[3:2];
assign int_data_in_data_V_ce1       = ar_hs | (int_data_in_data_V_write & WVALID);
assign int_data_in_data_V_we1       = int_data_in_data_V_write & WVALID;
assign int_data_in_data_V_be1       = WSTRB;
assign int_data_in_data_V_d1        = WDATA;
// conv_data_V
assign int_conv_data_V_address0     = conv_data_V_address0 >> 1;
assign int_conv_data_V_ce0          = conv_data_V_ce0;
assign int_conv_data_V_we0          = conv_data_V_we0;
assign int_conv_data_V_be0          = 3 << (conv_data_V_address0[0] * 2);
assign int_conv_data_V_d0           = {2{conv_data_V_d0}};
assign int_conv_data_V_address1     = ar_hs? raddr[3:2] : waddr[3:2];
assign int_conv_data_V_ce1          = ar_hs | (int_conv_data_V_write & WVALID);
assign int_conv_data_V_we1          = int_conv_data_V_write & WVALID;
assign int_conv_data_V_be1          = WSTRB;
assign int_conv_data_V_d1           = WDATA;
// relu_data_V
assign int_relu_data_V_address0     = relu_data_V_address0 >> 1;
assign int_relu_data_V_ce0          = relu_data_V_ce0;
assign int_relu_data_V_we0          = relu_data_V_we0;
assign int_relu_data_V_be0          = 3 << (relu_data_V_address0[0] * 2);
assign int_relu_data_V_d0           = {2{relu_data_V_d0}};
assign int_relu_data_V_address1     = ar_hs? raddr[3:2] : waddr[3:2];
assign int_relu_data_V_ce1          = ar_hs | (int_relu_data_V_write & WVALID);
assign int_relu_data_V_we1          = int_relu_data_V_write & WVALID;
assign int_relu_data_V_be1          = WSTRB;
assign int_relu_data_V_d1           = WDATA;
// pool_data_V
assign int_pool_data_V_address0     = pool_data_V_address0 >> 1;
assign int_pool_data_V_ce0          = pool_data_V_ce0;
assign int_pool_data_V_we0          = pool_data_V_we0;
assign int_pool_data_V_be0          = 3 << (pool_data_V_address0[0] * 2);
assign int_pool_data_V_d0           = {2{pool_data_V_d0}};
assign int_pool_data_V_address1     = ar_hs? raddr[3:2] : waddr[3:2];
assign int_pool_data_V_ce1          = ar_hs | (int_pool_data_V_write & WVALID);
assign int_pool_data_V_we1          = int_pool_data_V_write & WVALID;
assign int_pool_data_V_be1          = WSTRB;
assign int_pool_data_V_d1           = WDATA;
// fc_data_V
assign int_fc_data_V_address0       = fc_data_V_address0 >> 1;
assign int_fc_data_V_ce0            = fc_data_V_ce0;
assign int_fc_data_V_we0            = fc_data_V_we0;
assign int_fc_data_V_be0            = 3 << (fc_data_V_address0[0] * 2);
assign int_fc_data_V_d0             = {2{fc_data_V_d0}};
assign int_fc_data_V_address1       = ar_hs? raddr[3:2] : waddr[3:2];
assign int_fc_data_V_ce1            = ar_hs | (int_fc_data_V_write & WVALID);
assign int_fc_data_V_we1            = int_fc_data_V_write & WVALID;
assign int_fc_data_V_be1            = WSTRB;
assign int_fc_data_V_d1             = WDATA;
// data_out_data_V
assign int_data_out_data_V_address0 = data_out_data_V_address0 >> 1;
assign int_data_out_data_V_ce0      = data_out_data_V_ce0;
assign int_data_out_data_V_we0      = data_out_data_V_we0;
assign int_data_out_data_V_be0      = 3 << (data_out_data_V_address0[0] * 2);
assign int_data_out_data_V_d0       = {2{data_out_data_V_d0}};
assign int_data_out_data_V_address1 = ar_hs? raddr[5:2] : waddr[5:2];
assign int_data_out_data_V_ce1      = ar_hs | (int_data_out_data_V_write & WVALID);
assign int_data_out_data_V_we1      = int_data_out_data_V_write & WVALID;
assign int_data_out_data_V_be1      = WSTRB;
assign int_data_out_data_V_d1       = WDATA;
// int_data_in_data_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_data_in_data_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_DATA_IN_DATA_V_BASE && raddr <= ADDR_DATA_IN_DATA_V_HIGH)
            int_data_in_data_V_read <= 1'b1;
        else
            int_data_in_data_V_read <= 1'b0;
    end
end

// int_data_in_data_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_data_in_data_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_DATA_IN_DATA_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_DATA_IN_DATA_V_HIGH)
            int_data_in_data_V_write <= 1'b1;
        else if (WVALID)
            int_data_in_data_V_write <= 1'b0;
    end
end

// int_data_in_data_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (data_in_data_V_ce0)
            int_data_in_data_V_shift <= data_in_data_V_address0[0];
    end
end

// int_conv_data_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_conv_data_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_CONV_DATA_V_BASE && raddr <= ADDR_CONV_DATA_V_HIGH)
            int_conv_data_V_read <= 1'b1;
        else
            int_conv_data_V_read <= 1'b0;
    end
end

// int_conv_data_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_conv_data_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_CONV_DATA_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_CONV_DATA_V_HIGH)
            int_conv_data_V_write <= 1'b1;
        else if (WVALID)
            int_conv_data_V_write <= 1'b0;
    end
end

// int_conv_data_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (conv_data_V_ce0)
            int_conv_data_V_shift <= conv_data_V_address0[0];
    end
end

// int_relu_data_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_relu_data_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_RELU_DATA_V_BASE && raddr <= ADDR_RELU_DATA_V_HIGH)
            int_relu_data_V_read <= 1'b1;
        else
            int_relu_data_V_read <= 1'b0;
    end
end

// int_relu_data_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_relu_data_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_RELU_DATA_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_RELU_DATA_V_HIGH)
            int_relu_data_V_write <= 1'b1;
        else if (WVALID)
            int_relu_data_V_write <= 1'b0;
    end
end

// int_relu_data_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (relu_data_V_ce0)
            int_relu_data_V_shift <= relu_data_V_address0[0];
    end
end

// int_pool_data_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_pool_data_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_POOL_DATA_V_BASE && raddr <= ADDR_POOL_DATA_V_HIGH)
            int_pool_data_V_read <= 1'b1;
        else
            int_pool_data_V_read <= 1'b0;
    end
end

// int_pool_data_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_pool_data_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_POOL_DATA_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_POOL_DATA_V_HIGH)
            int_pool_data_V_write <= 1'b1;
        else if (WVALID)
            int_pool_data_V_write <= 1'b0;
    end
end

// int_pool_data_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (pool_data_V_ce0)
            int_pool_data_V_shift <= pool_data_V_address0[0];
    end
end

// int_fc_data_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_fc_data_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_FC_DATA_V_BASE && raddr <= ADDR_FC_DATA_V_HIGH)
            int_fc_data_V_read <= 1'b1;
        else
            int_fc_data_V_read <= 1'b0;
    end
end

// int_fc_data_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_fc_data_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_FC_DATA_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_FC_DATA_V_HIGH)
            int_fc_data_V_write <= 1'b1;
        else if (WVALID)
            int_fc_data_V_write <= 1'b0;
    end
end

// int_fc_data_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (fc_data_V_ce0)
            int_fc_data_V_shift <= fc_data_V_address0[0];
    end
end

// int_data_out_data_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_data_out_data_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_DATA_OUT_DATA_V_BASE && raddr <= ADDR_DATA_OUT_DATA_V_HIGH)
            int_data_out_data_V_read <= 1'b1;
        else
            int_data_out_data_V_read <= 1'b0;
    end
end

// int_data_out_data_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_data_out_data_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_DATA_OUT_DATA_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_DATA_OUT_DATA_V_HIGH)
            int_data_out_data_V_write <= 1'b1;
        else if (WVALID)
            int_data_out_data_V_write <= 1'b0;
    end
end

// int_data_out_data_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (data_out_data_V_ce0)
            int_data_out_data_V_shift <= data_out_data_V_address0[0];
    end
end


endmodule


`timescale 1ns/1ps

module Lenet_axilite_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

