// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "forward_fc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic forward_fc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic forward_fc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> forward_fc::ap_ST_fsm_state1 = "1";
const sc_lv<7> forward_fc::ap_ST_fsm_state2 = "10";
const sc_lv<7> forward_fc::ap_ST_fsm_state3 = "100";
const sc_lv<7> forward_fc::ap_ST_fsm_state4 = "1000";
const sc_lv<7> forward_fc::ap_ST_fsm_state5 = "10000";
const sc_lv<7> forward_fc::ap_ST_fsm_state6 = "100000";
const sc_lv<7> forward_fc::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> forward_fc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> forward_fc::ap_const_lv32_1 = "1";
const sc_lv<32> forward_fc::ap_const_lv32_2 = "10";
const sc_lv<1> forward_fc::ap_const_lv1_1 = "1";
const sc_lv<32> forward_fc::ap_const_lv32_3 = "11";
const sc_lv<1> forward_fc::ap_const_lv1_0 = "0";
const sc_lv<32> forward_fc::ap_const_lv32_4 = "100";
const sc_lv<32> forward_fc::ap_const_lv32_5 = "101";
const sc_lv<32> forward_fc::ap_const_lv32_6 = "110";
const sc_lv<2> forward_fc::ap_const_lv2_0 = "00";
const sc_lv<16> forward_fc::ap_const_lv16_0 = "0000000000000000";
const sc_lv<2> forward_fc::ap_const_lv2_2 = "10";
const sc_lv<2> forward_fc::ap_const_lv2_1 = "1";
const sc_lv<8> forward_fc::ap_const_lv8_0 = "00000000";
const sc_lv<32> forward_fc::ap_const_lv32_8 = "1000";
const sc_lv<32> forward_fc::ap_const_lv32_17 = "10111";
const bool forward_fc::ap_const_boolean_1 = true;

forward_fc::forward_fc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc1_W_data_V_U = new Conv_forward_convbkb("fc1_W_data_V_U");
    fc1_W_data_V_U->clk(ap_clk);
    fc1_W_data_V_U->reset(ap_rst);
    fc1_W_data_V_U->address0(fc1_W_data_V_address0);
    fc1_W_data_V_U->ce0(fc1_W_data_V_ce0);
    fc1_W_data_V_U->q0(fc1_W_data_V_q0);
    Lenet_mac_muladd_eOg_U18 = new Lenet_mac_muladd_eOg<1,1,10,16,24,24>("Lenet_mac_muladd_eOg_U18");
    Lenet_mac_muladd_eOg_U18->din0(fc1_W_data_V_load_reg_400);
    Lenet_mac_muladd_eOg_U18->din1(fc_layer_2_2_2_2_input_data_V_q0);
    Lenet_mac_muladd_eOg_U18->din2(grp_fu_324_p2);
    Lenet_mac_muladd_eOg_U18->dout(grp_fu_324_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_177_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_177_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( fc_layer_output_data_reg_72 );
    sensitive << ( exitcond1_fu_177_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( fc_layer_output_data_1_reg_84 );
    sensitive << ( exitcond1_fu_177_p2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_c_fu_259_p2);
    sensitive << ( p_z_assign_1_reg_166 );

    SC_METHOD(thread_exitcond1_fu_177_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_z_assign_reg_96 );

    SC_METHOD(thread_exitcond2_fu_205_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_x_assign_reg_120 );

    SC_METHOD(thread_exitcond3_fu_237_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_y_assign_reg_143 );

    SC_METHOD(thread_exitcond_fu_253_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( p_z_assign_1_reg_166 );

    SC_METHOD(thread_fc1_W_data_V_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_3_fu_291_p1 );

    SC_METHOD(thread_fc1_W_data_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_fc_layer_2_2_2_2_input_data_V_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_7_fu_296_p1 );

    SC_METHOD(thread_fc_layer_2_2_2_2_input_data_V_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_fc_layer_output_data_2_fu_221_p3);
    sensitive << ( fc_layer_output_data_reg_72 );
    sensitive << ( p_Val2_s_reg_108 );
    sensitive << ( tmp_fu_217_p1 );

    SC_METHOD(thread_fc_layer_output_data_3_fu_229_p3);
    sensitive << ( fc_layer_output_data_1_reg_84 );
    sensitive << ( p_Val2_s_reg_108 );
    sensitive << ( tmp_fu_217_p1 );

    SC_METHOD(thread_filter_fu_183_p2);
    sensitive << ( p_z_assign_reg_96 );

    SC_METHOD(thread_grp_fu_324_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( p_Val2_1_reg_154 );

    SC_METHOD(thread_i_fu_211_p2);
    sensitive << ( p_x_assign_reg_120 );

    SC_METHOD(thread_j_fu_243_p2);
    sensitive << ( p_y_assign_reg_143 );

    SC_METHOD(thread_p_x_assign_cast_fu_201_p1);
    sensitive << ( p_x_assign_reg_120 );

    SC_METHOD(thread_tmp1_fu_269_p4);
    sensitive << ( tmp_8_reg_372 );
    sensitive << ( tmp_10_fu_265_p1 );

    SC_METHOD(thread_tmp_10_fu_265_p1);
    sensitive << ( p_z_assign_1_reg_166 );

    SC_METHOD(thread_tmp_1_fu_283_p3);
    sensitive << ( tmp_6_fu_278_p2 );
    sensitive << ( p_z_assign_reg_96 );

    SC_METHOD(thread_tmp_3_fu_291_p1);
    sensitive << ( tmp_1_fu_283_p3 );

    SC_METHOD(thread_tmp_6_fu_278_p2);
    sensitive << ( p_x_assign_cast_reg_341 );
    sensitive << ( tmp1_fu_269_p4 );

    SC_METHOD(thread_tmp_7_fu_296_p1);
    sensitive << ( tmp_6_reg_385 );

    SC_METHOD(thread_tmp_8_fu_249_p1);
    sensitive << ( p_y_assign_reg_143 );

    SC_METHOD(thread_tmp_fu_217_p1);
    sensitive << ( p_z_assign_reg_96 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_205_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond3_fu_237_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_253_p2 );
    sensitive << ( exitcond1_fu_177_p2 );

    ap_CS_fsm = "0000001";
    ap_return_0_preg = "0000000000000000";
    ap_return_1_preg = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "forward_fc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, fc_layer_2_2_2_2_input_data_V_address0, "(port)fc_layer_2_2_2_2_input_data_V_address0");
    sc_trace(mVcdFile, fc_layer_2_2_2_2_input_data_V_ce0, "(port)fc_layer_2_2_2_2_input_data_V_ce0");
    sc_trace(mVcdFile, fc_layer_2_2_2_2_input_data_V_q0, "(port)fc_layer_2_2_2_2_input_data_V_q0");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, fc1_W_data_V_address0, "fc1_W_data_V_address0");
    sc_trace(mVcdFile, fc1_W_data_V_ce0, "fc1_W_data_V_ce0");
    sc_trace(mVcdFile, fc1_W_data_V_q0, "fc1_W_data_V_q0");
    sc_trace(mVcdFile, filter_fu_183_p2, "filter_fu_183_p2");
    sc_trace(mVcdFile, filter_reg_336, "filter_reg_336");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_x_assign_cast_fu_201_p1, "p_x_assign_cast_fu_201_p1");
    sc_trace(mVcdFile, p_x_assign_cast_reg_341, "p_x_assign_cast_reg_341");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_211_p2, "i_fu_211_p2");
    sc_trace(mVcdFile, i_reg_349, "i_reg_349");
    sc_trace(mVcdFile, fc_layer_output_data_2_fu_221_p3, "fc_layer_output_data_2_fu_221_p3");
    sc_trace(mVcdFile, exitcond2_fu_205_p2, "exitcond2_fu_205_p2");
    sc_trace(mVcdFile, fc_layer_output_data_3_fu_229_p3, "fc_layer_output_data_3_fu_229_p3");
    sc_trace(mVcdFile, j_fu_243_p2, "j_fu_243_p2");
    sc_trace(mVcdFile, j_reg_367, "j_reg_367");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_8_fu_249_p1, "tmp_8_fu_249_p1");
    sc_trace(mVcdFile, tmp_8_reg_372, "tmp_8_reg_372");
    sc_trace(mVcdFile, exitcond3_fu_237_p2, "exitcond3_fu_237_p2");
    sc_trace(mVcdFile, c_fu_259_p2, "c_fu_259_p2");
    sc_trace(mVcdFile, c_reg_380, "c_reg_380");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_6_fu_278_p2, "tmp_6_fu_278_p2");
    sc_trace(mVcdFile, tmp_6_reg_385, "tmp_6_reg_385");
    sc_trace(mVcdFile, exitcond_fu_253_p2, "exitcond_fu_253_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, fc1_W_data_V_load_reg_400, "fc1_W_data_V_load_reg_400");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, fc_layer_output_data_reg_72, "fc_layer_output_data_reg_72");
    sc_trace(mVcdFile, fc_layer_output_data_1_reg_84, "fc_layer_output_data_1_reg_84");
    sc_trace(mVcdFile, p_z_assign_reg_96, "p_z_assign_reg_96");
    sc_trace(mVcdFile, p_Val2_s_reg_108, "p_Val2_s_reg_108");
    sc_trace(mVcdFile, exitcond1_fu_177_p2, "exitcond1_fu_177_p2");
    sc_trace(mVcdFile, p_x_assign_reg_120, "p_x_assign_reg_120");
    sc_trace(mVcdFile, dot_out_1_reg_131, "dot_out_1_reg_131");
    sc_trace(mVcdFile, p_y_assign_reg_143, "p_y_assign_reg_143");
    sc_trace(mVcdFile, p_Val2_1_reg_154, "p_Val2_1_reg_154");
    sc_trace(mVcdFile, p_z_assign_1_reg_166, "p_z_assign_1_reg_166");
    sc_trace(mVcdFile, tmp_3_fu_291_p1, "tmp_3_fu_291_p1");
    sc_trace(mVcdFile, tmp_7_fu_296_p1, "tmp_7_fu_296_p1");
    sc_trace(mVcdFile, tmp_fu_217_p1, "tmp_fu_217_p1");
    sc_trace(mVcdFile, tmp_10_fu_265_p1, "tmp_10_fu_265_p1");
    sc_trace(mVcdFile, tmp1_fu_269_p4, "tmp1_fu_269_p4");
    sc_trace(mVcdFile, tmp_1_fu_283_p3, "tmp_1_fu_283_p3");
    sc_trace(mVcdFile, grp_fu_324_p3, "grp_fu_324_p3");
    sc_trace(mVcdFile, grp_fu_324_p2, "grp_fu_324_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

forward_fc::~forward_fc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete fc1_W_data_V_U;
    delete Lenet_mac_muladd_eOg_U18;
}

void forward_fc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_return_0_preg = fc_layer_output_data_reg_72.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_return_1_preg = fc_layer_output_data_1_reg_84.read();
        }
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_205_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        dot_out_1_reg_131 = p_Val2_s_reg_108.read();
    } else if ((esl_seteq<1,1,1>(exitcond_fu_253_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        dot_out_1_reg_131 = p_Val2_1_reg_154.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_237_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_Val2_1_reg_154 = dot_out_1_reg_131.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_Val2_1_reg_154 = grp_fu_324_p3.read().range(23, 8);
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_Val2_s_reg_108 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(exitcond3_fu_237_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_Val2_s_reg_108 = dot_out_1_reg_131.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_x_assign_reg_120 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond3_fu_237_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_x_assign_reg_120 = i_reg_349.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_205_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_y_assign_reg_143 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_253_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        p_y_assign_reg_143 = j_reg_367.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_237_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_z_assign_1_reg_166 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_z_assign_1_reg_166 = c_reg_380.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_205_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_z_assign_reg_96 = filter_reg_336.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_z_assign_reg_96 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        c_reg_380 = c_fu_259_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        fc1_W_data_V_load_reg_400 = fc1_W_data_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_205_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        fc_layer_output_data_1_reg_84 = fc_layer_output_data_3_fu_229_p3.read();
        fc_layer_output_data_reg_72 = fc_layer_output_data_2_fu_221_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        filter_reg_336 = filter_fu_183_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_349 = i_fu_211_p2.read();
        p_x_assign_cast_reg_341 = p_x_assign_cast_fu_201_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_reg_367 = j_fu_243_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_253_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        tmp_6_reg_385 = tmp_6_fu_278_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_237_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_8_reg_372 = tmp_8_fu_249_p1.read();
    }
}

void forward_fc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void forward_fc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void forward_fc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void forward_fc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void forward_fc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void forward_fc::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void forward_fc::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void forward_fc::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void forward_fc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void forward_fc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void forward_fc::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_return_0 = fc_layer_output_data_reg_72.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void forward_fc::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_return_1 = fc_layer_output_data_1_reg_84.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void forward_fc::thread_c_fu_259_p2() {
    c_fu_259_p2 = (!p_z_assign_1_reg_166.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_z_assign_1_reg_166.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void forward_fc::thread_exitcond1_fu_177_p2() {
    exitcond1_fu_177_p2 = (!p_z_assign_reg_96.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_z_assign_reg_96.read() == ap_const_lv2_2);
}

void forward_fc::thread_exitcond2_fu_205_p2() {
    exitcond2_fu_205_p2 = (!p_x_assign_reg_120.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_x_assign_reg_120.read() == ap_const_lv2_2);
}

void forward_fc::thread_exitcond3_fu_237_p2() {
    exitcond3_fu_237_p2 = (!p_y_assign_reg_143.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_y_assign_reg_143.read() == ap_const_lv2_2);
}

void forward_fc::thread_exitcond_fu_253_p2() {
    exitcond_fu_253_p2 = (!p_z_assign_1_reg_166.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_z_assign_1_reg_166.read() == ap_const_lv2_2);
}

void forward_fc::thread_fc1_W_data_V_address0() {
    fc1_W_data_V_address0 =  (sc_lv<4>) (tmp_3_fu_291_p1.read());
}

void forward_fc::thread_fc1_W_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        fc1_W_data_V_ce0 = ap_const_logic_1;
    } else {
        fc1_W_data_V_ce0 = ap_const_logic_0;
    }
}

void forward_fc::thread_fc_layer_2_2_2_2_input_data_V_address0() {
    fc_layer_2_2_2_2_input_data_V_address0 =  (sc_lv<3>) (tmp_7_fu_296_p1.read());
}

void forward_fc::thread_fc_layer_2_2_2_2_input_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        fc_layer_2_2_2_2_input_data_V_ce0 = ap_const_logic_1;
    } else {
        fc_layer_2_2_2_2_input_data_V_ce0 = ap_const_logic_0;
    }
}

void forward_fc::thread_fc_layer_output_data_2_fu_221_p3() {
    fc_layer_output_data_2_fu_221_p3 = (!tmp_fu_217_p1.read()[0].is_01())? sc_lv<16>(): ((tmp_fu_217_p1.read()[0].to_bool())? fc_layer_output_data_reg_72.read(): p_Val2_s_reg_108.read());
}

void forward_fc::thread_fc_layer_output_data_3_fu_229_p3() {
    fc_layer_output_data_3_fu_229_p3 = (!tmp_fu_217_p1.read()[0].is_01())? sc_lv<16>(): ((tmp_fu_217_p1.read()[0].to_bool())? p_Val2_s_reg_108.read(): fc_layer_output_data_1_reg_84.read());
}

void forward_fc::thread_filter_fu_183_p2() {
    filter_fu_183_p2 = (!p_z_assign_reg_96.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_z_assign_reg_96.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void forward_fc::thread_grp_fu_324_p2() {
    grp_fu_324_p2 = esl_concat<16,8>(p_Val2_1_reg_154.read(), ap_const_lv8_0);
}

void forward_fc::thread_i_fu_211_p2() {
    i_fu_211_p2 = (!p_x_assign_reg_120.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_x_assign_reg_120.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void forward_fc::thread_j_fu_243_p2() {
    j_fu_243_p2 = (!p_y_assign_reg_143.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_y_assign_reg_143.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void forward_fc::thread_p_x_assign_cast_fu_201_p1() {
    p_x_assign_cast_fu_201_p1 = esl_zext<3,2>(p_x_assign_reg_120.read());
}

void forward_fc::thread_tmp1_fu_269_p4() {
    tmp1_fu_269_p4 = esl_concat<2,1>(esl_concat<1,1>(tmp_10_fu_265_p1.read(), tmp_8_reg_372.read()), ap_const_lv1_0);
}

void forward_fc::thread_tmp_10_fu_265_p1() {
    tmp_10_fu_265_p1 = p_z_assign_1_reg_166.read().range(1-1, 0);
}

void forward_fc::thread_tmp_1_fu_283_p3() {
    tmp_1_fu_283_p3 = esl_concat<2,3>(p_z_assign_reg_96.read(), tmp_6_fu_278_p2.read());
}

void forward_fc::thread_tmp_3_fu_291_p1() {
    tmp_3_fu_291_p1 = esl_zext<64,5>(tmp_1_fu_283_p3.read());
}

void forward_fc::thread_tmp_6_fu_278_p2() {
    tmp_6_fu_278_p2 = (!p_x_assign_cast_reg_341.read().is_01() || !tmp1_fu_269_p4.read().is_01())? sc_lv<3>(): (sc_biguint<3>(p_x_assign_cast_reg_341.read()) + sc_biguint<3>(tmp1_fu_269_p4.read()));
}

void forward_fc::thread_tmp_7_fu_296_p1() {
    tmp_7_fu_296_p1 = esl_zext<64,3>(tmp_6_reg_385.read());
}

void forward_fc::thread_tmp_8_fu_249_p1() {
    tmp_8_fu_249_p1 = p_y_assign_reg_143.read().range(1-1, 0);
}

void forward_fc::thread_tmp_fu_217_p1() {
    tmp_fu_217_p1 = p_z_assign_reg_96.read().range(1-1, 0);
}

void forward_fc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_177_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_205_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond3_fu_237_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_253_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

}

