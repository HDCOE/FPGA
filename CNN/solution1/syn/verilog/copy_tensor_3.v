// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_tensor_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read2,
        p_read7,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read2;
input  [15:0] p_read7;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] k_1_fu_65_p2;
wire    ap_CS_fsm_state2;
reg   [1:0] k_reg_42;
wire   [0:0] exitcond2_fu_59_p2;
reg   [15:0] in1_V16_s_fu_22;
wire   [15:0] in1_V_0_in1_V16_2_fu_82_p3;
reg   [15:0] in1_V_s_fu_26;
wire   [15:0] in1_V_2_in1_V_fu_75_p3;
wire   [0:0] tmp_fu_71_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_59_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_42 <= k_1_fu_65_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_42 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_59_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_V16_s_fu_22 <= in1_V_0_in1_V16_2_fu_82_p3;
        in1_V_s_fu_26 <= in1_V_2_in1_V_fu_75_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond2_fu_59_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_59_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_59_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return_0 = in1_V_s_fu_26;

assign ap_return_1 = in1_V16_s_fu_22;

assign exitcond2_fu_59_p2 = ((k_reg_42 == 2'd2) ? 1'b1 : 1'b0);

assign in1_V_0_in1_V16_2_fu_82_p3 = ((tmp_fu_71_p1[0:0] === 1'b1) ? p_read7 : in1_V16_s_fu_22);

assign in1_V_2_in1_V_fu_75_p3 = ((tmp_fu_71_p1[0:0] === 1'b1) ? in1_V_s_fu_26 : p_read2);

assign k_1_fu_65_p2 = (k_reg_42 + 2'd1);

assign tmp_fu_71_p1 = k_reg_42[0:0];

endmodule //copy_tensor_3
