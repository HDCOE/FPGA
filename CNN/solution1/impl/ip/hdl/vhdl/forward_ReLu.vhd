-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forward_ReLu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    activation_layer_2_2_2_input_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    activation_layer_2_2_2_input_data_V_ce0 : OUT STD_LOGIC;
    activation_layer_2_2_2_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    activation_layer_2_2_2_output_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    activation_layer_2_2_2_output_data_V_ce0 : OUT STD_LOGIC;
    activation_layer_2_2_2_output_data_V_we0 : OUT STD_LOGIC;
    activation_layer_2_2_2_output_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of forward_ReLu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_x_assign_cast_fu_95_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_x_assign_cast_reg_179 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_105_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_117_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_195 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_123_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ch_fu_133_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ch_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_213 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_x_assign_reg_62 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_assign_reg_73 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond7_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_z_assign_reg_84 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_11_fu_139_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_143_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_152_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_162_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_x_assign_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_x_assign_reg_62 <= i_reg_187;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_x_assign_reg_62 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_y_assign_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_y_assign_reg_73 <= ap_const_lv2_0;
            elsif (((exitcond_fu_127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_y_assign_reg_73 <= j_reg_195;
            end if; 
        end if;
    end process;

    p_z_assign_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_z_assign_reg_84 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_z_assign_reg_84 <= ch_reg_208;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ch_reg_208 <= ch_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_187 <= i_fu_105_p2;
                    p_x_assign_cast_reg_179(1 downto 0) <= p_x_assign_cast_fu_95_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_195 <= j_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_2_reg_213(2 downto 0) <= tmp_2_fu_157_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_reg_200 <= tmp_fu_123_p1;
            end if;
        end if;
    end process;
    p_x_assign_cast_reg_179(2) <= '0';
    tmp_2_reg_213(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond8_fu_111_p2, ap_CS_fsm_state4, exitcond_fu_127_p2, exitcond7_fu_99_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond8_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    activation_layer_2_2_2_input_data_V_address0 <= tmp_2_fu_157_p1(3 - 1 downto 0);

    activation_layer_2_2_2_input_data_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            activation_layer_2_2_2_input_data_V_ce0 <= ap_const_logic_1;
        else 
            activation_layer_2_2_2_input_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    activation_layer_2_2_2_output_data_V_address0 <= tmp_2_reg_213(3 - 1 downto 0);

    activation_layer_2_2_2_output_data_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            activation_layer_2_2_2_output_data_V_ce0 <= ap_const_logic_1;
        else 
            activation_layer_2_2_2_output_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    activation_layer_2_2_2_output_data_V_d0 <= 
        ap_const_lv16_0 when (tmp_12_fu_162_p3(0) = '1') else 
        activation_layer_2_2_2_input_data_V_q0;

    activation_layer_2_2_2_output_data_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            activation_layer_2_2_2_output_data_V_we0 <= ap_const_logic_1;
        else 
            activation_layer_2_2_2_output_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_99_p2)
    begin
        if ((((exitcond7_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_99_p2)
    begin
        if (((exitcond7_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ch_fu_133_p2 <= std_logic_vector(unsigned(p_z_assign_reg_84) + unsigned(ap_const_lv2_1));
    exitcond7_fu_99_p2 <= "1" when (p_x_assign_reg_62 = ap_const_lv2_2) else "0";
    exitcond8_fu_111_p2 <= "1" when (p_y_assign_reg_73 = ap_const_lv2_2) else "0";
    exitcond_fu_127_p2 <= "1" when (p_z_assign_reg_84 = ap_const_lv2_2) else "0";
    i_fu_105_p2 <= std_logic_vector(unsigned(p_x_assign_reg_62) + unsigned(ap_const_lv2_1));
    j_fu_117_p2 <= std_logic_vector(unsigned(p_y_assign_reg_73) + unsigned(ap_const_lv2_1));
    p_x_assign_cast_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_x_assign_reg_62),3));
    tmp1_fu_143_p4 <= ((tmp_11_fu_139_p1 & tmp_reg_200) & ap_const_lv1_0);
    tmp_11_fu_139_p1 <= p_z_assign_reg_84(1 - 1 downto 0);
    tmp_12_fu_162_p3 <= activation_layer_2_2_2_input_data_V_q0(15 downto 15);
    tmp_2_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_152_p2),64));
    tmp_fu_123_p1 <= p_y_assign_reg_73(1 - 1 downto 0);
    tmp_s_fu_152_p2 <= std_logic_vector(unsigned(p_x_assign_cast_reg_179) + unsigned(tmp1_fu_143_p4));
end behav;
