// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _copy_tensor_1_HH_
#define _copy_tensor_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct copy_tensor_1 : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > in1_V_address0;
    sc_out< sc_logic > in1_V_ce0;
    sc_out< sc_logic > in1_V_we0;
    sc_out< sc_lv<16> > in1_V_d0;
    sc_out< sc_lv<3> > in2_V_address0;
    sc_out< sc_logic > in2_V_ce0;
    sc_in< sc_lv<16> > in2_V_q0;
    sc_in< sc_lv<32> > size1_x;
    sc_in< sc_lv<32> > size1_y;
    sc_in< sc_lv<32> > size2_x;
    sc_in< sc_lv<32> > size2_y;
    sc_in< sc_lv<32> > size2_z;


    // Module declarations
    copy_tensor_1(sc_module_name name);
    SC_HAS_PROCESS(copy_tensor_1);

    ~copy_tensor_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > next_mul2_fu_148_p2;
    sc_signal< sc_lv<32> > next_mul2_reg_269;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > next_mul_fu_153_p2;
    sc_signal< sc_lv<32> > next_mul_reg_274;
    sc_signal< sc_lv<31> > k_1_fu_167_p2;
    sc_signal< sc_lv<31> > k_1_reg_282;
    sc_signal< sc_lv<31> > j_1_fu_182_p2;
    sc_signal< sc_lv<31> > j_1_reg_290;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > tmp_fu_188_p2;
    sc_signal< sc_lv<32> > tmp_reg_295;
    sc_signal< sc_lv<1> > tmp_2_fu_177_p2;
    sc_signal< sc_lv<32> > tmp4_fu_194_p2;
    sc_signal< sc_lv<32> > tmp4_reg_300;
    sc_signal< sc_lv<32> > tmp3_fu_200_p2;
    sc_signal< sc_lv<32> > tmp3_reg_305;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > tmp5_fu_204_p2;
    sc_signal< sc_lv<32> > tmp5_reg_310;
    sc_signal< sc_lv<31> > i_1_fu_217_p2;
    sc_signal< sc_lv<31> > i_1_reg_318;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > tmp_4_fu_223_p2;
    sc_signal< sc_lv<32> > tmp_4_reg_323;
    sc_signal< sc_lv<1> > tmp_3_fu_212_p2;
    sc_signal< sc_lv<31> > k_reg_91;
    sc_signal< sc_lv<32> > phi_mul_reg_102;
    sc_signal< sc_lv<32> > phi_mul1_reg_114;
    sc_signal< sc_lv<31> > j_reg_126;
    sc_signal< sc_lv<1> > tmp_s_fu_162_p2;
    sc_signal< sc_lv<31> > i_reg_137;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > tmp_7_fu_233_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_238_p1;
    sc_signal< sc_lv<32> > k_cast_fu_158_p1;
    sc_signal< sc_lv<32> > j_cast_fu_173_p1;
    sc_signal< sc_lv<32> > tmp3_fu_200_p1;
    sc_signal< sc_lv<32> > tmp5_fu_204_p1;
    sc_signal< sc_lv<32> > i_cast_fu_208_p1;
    sc_signal< sc_lv<32> > tmp_3_fu_212_p1;
    sc_signal< sc_lv<32> > tmp_6_fu_228_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<31> ap_const_lv31_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_1_fu_217_p2();
    void thread_i_cast_fu_208_p1();
    void thread_in1_V_address0();
    void thread_in1_V_ce0();
    void thread_in1_V_d0();
    void thread_in1_V_we0();
    void thread_in2_V_address0();
    void thread_in2_V_ce0();
    void thread_j_1_fu_182_p2();
    void thread_j_cast_fu_173_p1();
    void thread_k_1_fu_167_p2();
    void thread_k_cast_fu_158_p1();
    void thread_next_mul2_fu_148_p2();
    void thread_next_mul_fu_153_p2();
    void thread_tmp3_fu_200_p1();
    void thread_tmp3_fu_200_p2();
    void thread_tmp4_fu_194_p2();
    void thread_tmp5_fu_204_p1();
    void thread_tmp5_fu_204_p2();
    void thread_tmp_2_fu_177_p2();
    void thread_tmp_3_fu_212_p1();
    void thread_tmp_3_fu_212_p2();
    void thread_tmp_4_fu_223_p2();
    void thread_tmp_5_fu_238_p1();
    void thread_tmp_6_fu_228_p2();
    void thread_tmp_7_fu_233_p1();
    void thread_tmp_fu_188_p2();
    void thread_tmp_s_fu_162_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
