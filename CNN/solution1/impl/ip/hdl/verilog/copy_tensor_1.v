// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_tensor_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_V_address0,
        in1_V_ce0,
        in1_V_we0,
        in1_V_d0,
        in2_V_address0,
        in2_V_ce0,
        in2_V_q0,
        size1_x,
        size1_y,
        size2_x,
        size2_y,
        size2_z
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] in1_V_address0;
output   in1_V_ce0;
output   in1_V_we0;
output  [15:0] in1_V_d0;
output  [2:0] in2_V_address0;
output   in2_V_ce0;
input  [15:0] in2_V_q0;
input  [31:0] size1_x;
input  [31:0] size1_y;
input  [31:0] size2_x;
input  [31:0] size2_y;
input  [31:0] size2_z;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_V_ce0;
reg in1_V_we0;
reg in2_V_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] next_mul2_fu_148_p2;
reg   [31:0] next_mul2_reg_269;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul_fu_153_p2;
reg   [31:0] next_mul_reg_274;
wire   [30:0] k_1_fu_167_p2;
reg   [30:0] k_1_reg_282;
wire   [30:0] j_1_fu_182_p2;
reg   [30:0] j_1_reg_290;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_fu_188_p2;
reg  signed [31:0] tmp_reg_295;
wire   [0:0] tmp_2_fu_177_p2;
wire  signed [31:0] tmp4_fu_194_p2;
reg  signed [31:0] tmp4_reg_300;
wire   [31:0] tmp3_fu_200_p2;
reg   [31:0] tmp3_reg_305;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp5_fu_204_p2;
reg   [31:0] tmp5_reg_310;
wire   [30:0] i_1_fu_217_p2;
reg   [30:0] i_1_reg_318;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_4_fu_223_p2;
reg   [31:0] tmp_4_reg_323;
wire   [0:0] tmp_3_fu_212_p2;
reg   [30:0] k_reg_91;
reg   [31:0] phi_mul_reg_102;
reg   [31:0] phi_mul1_reg_114;
reg   [30:0] j_reg_126;
wire   [0:0] tmp_s_fu_162_p2;
reg   [30:0] i_reg_137;
wire    ap_CS_fsm_state6;
wire  signed [63:0] tmp_7_fu_233_p1;
wire  signed [63:0] tmp_5_fu_238_p1;
wire   [31:0] k_cast_fu_158_p1;
wire   [31:0] j_cast_fu_173_p1;
wire  signed [31:0] tmp3_fu_200_p1;
wire  signed [31:0] tmp5_fu_204_p1;
wire   [31:0] i_cast_fu_208_p1;
wire  signed [31:0] tmp_3_fu_212_p1;
wire   [31:0] tmp_6_fu_228_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_137 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_137 <= i_1_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_126 <= 31'd0;
    end else if (((tmp_3_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_126 <= j_1_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_91 <= k_1_reg_282;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_91 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_114 <= next_mul2_reg_269;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_102 <= next_mul_reg_274;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_318 <= i_1_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_290 <= j_1_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_1_reg_282 <= k_1_fu_167_p2;
        next_mul2_reg_269 <= next_mul2_fu_148_p2;
        next_mul_reg_274 <= next_mul_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp3_reg_305 <= tmp3_fu_200_p2;
        tmp5_reg_310 <= tmp5_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp4_reg_300 <= tmp4_fu_194_p2;
        tmp_reg_295 <= tmp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_4_reg_323 <= tmp_4_fu_223_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_162_p2 == 1'd0)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_162_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in1_V_ce0 = 1'b1;
    end else begin
        in1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in1_V_we0 = 1'b1;
    end else begin
        in1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in2_V_ce0 = 1'b1;
    end else begin
        in2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_162_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_2_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_3_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_1_fu_217_p2 = (i_reg_137 + 31'd1);

assign i_cast_fu_208_p1 = i_reg_137;

assign in1_V_address0 = tmp_5_fu_238_p1;

assign in1_V_d0 = in2_V_q0;

assign in2_V_address0 = tmp_7_fu_233_p1;

assign j_1_fu_182_p2 = (j_reg_126 + 31'd1);

assign j_cast_fu_173_p1 = j_reg_126;

assign k_1_fu_167_p2 = (k_reg_91 + 31'd1);

assign k_cast_fu_158_p1 = k_reg_91;

assign next_mul2_fu_148_p2 = (phi_mul1_reg_114 + size2_y);

assign next_mul_fu_153_p2 = (phi_mul_reg_102 + size1_y);

assign tmp3_fu_200_p1 = size1_x;

assign tmp3_fu_200_p2 = ($signed(tmp_reg_295) * $signed(tmp3_fu_200_p1));

assign tmp4_fu_194_p2 = (j_cast_fu_173_p1 + phi_mul1_reg_114);

assign tmp5_fu_204_p1 = size2_x;

assign tmp5_fu_204_p2 = ($signed(tmp4_reg_300) * $signed(tmp5_fu_204_p1));

assign tmp_2_fu_177_p2 = (($signed(j_cast_fu_173_p1) < $signed(size2_y)) ? 1'b1 : 1'b0);

assign tmp_3_fu_212_p1 = size2_x;

assign tmp_3_fu_212_p2 = (($signed(i_cast_fu_208_p1) < $signed(tmp_3_fu_212_p1)) ? 1'b1 : 1'b0);

assign tmp_4_fu_223_p2 = (i_cast_fu_208_p1 + tmp3_reg_305);

assign tmp_5_fu_238_p1 = $signed(tmp_4_reg_323);

assign tmp_6_fu_228_p2 = (i_cast_fu_208_p1 + tmp5_reg_310);

assign tmp_7_fu_233_p1 = $signed(tmp_6_fu_228_p2);

assign tmp_fu_188_p2 = (j_cast_fu_173_p1 + phi_mul_reg_102);

assign tmp_s_fu_162_p2 = (($signed(k_cast_fu_158_p1) < $signed(size2_z)) ? 1'b1 : 1'b0);

endmodule //copy_tensor_1
