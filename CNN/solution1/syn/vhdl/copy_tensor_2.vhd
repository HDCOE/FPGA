-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity copy_tensor_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    in1_V_ce0 : OUT STD_LOGIC;
    in1_V_we0 : OUT STD_LOGIC;
    in1_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    size1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    size1_y : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of copy_tensor_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_1_fu_138_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_210 : STD_LOGIC_VECTOR (1 downto 0);
    signal in2_V_load_phi_fu_148_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal in2_V_load_phi_reg_215 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_j_phi_fu_107_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_reg_79 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_mul_reg_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_i_phi_fu_119_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_115 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_144_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast3_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast2_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_115 <= ap_const_lv1_0;
            elsif (((ap_phi_mux_i_phi_fu_119_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_115 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    j_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_i_phi_fu_119_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_102 <= ap_const_lv1_1;
            elsif (((exitcond2_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_102 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    k_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_j_phi_fu_107_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_79 <= k_1_reg_210;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_79 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_j_phi_fu_107_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_90 <= next_mul_reg_202;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_90 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                in2_V_load_phi_reg_215 <= in2_V_load_phi_fu_148_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_1_reg_210 <= k_1_fu_138_p2;
                next_mul_reg_202 <= next_mul_fu_127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp3_reg_225 <= tmp3_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_j_phi_fu_107_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_reg_220 <= tmp_fu_158_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_132_p2, ap_CS_fsm_state3, ap_phi_mux_j_phi_fu_107_p4, ap_CS_fsm_state5, ap_phi_mux_i_phi_fu_119_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_phi_mux_j_phi_fu_107_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_phi_mux_i_phi_fu_119_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_132_p2)
    begin
        if ((((exitcond2_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_phi_fu_119_p4 <= i_reg_115;
    ap_phi_mux_j_phi_fu_107_p4 <= j_reg_102;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_132_p2)
    begin
        if (((exitcond2_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_132_p2 <= "1" when (k_reg_79 = ap_const_lv2_2) else "0";
    i_cast2_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_115),32));
    in1_V_address0 <= tmp_8_fu_177_p1(5 - 1 downto 0);

    in1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in1_V_ce0 <= ap_const_logic_1;
        else 
            in1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_V_d0 <= in2_V_load_phi_reg_215;

    in1_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_phi_mux_i_phi_fu_119_p4)
    begin
        if (((ap_phi_mux_i_phi_fu_119_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in1_V_we0 <= ap_const_logic_1;
        else 
            in1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in2_V_load_phi_fu_148_p3 <= 
        p_read1 when (tmp_23_fu_144_p1(0) = '1') else 
        p_read;
    j_cast3_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_102),32));
    k_1_fu_138_p2 <= std_logic_vector(unsigned(k_reg_79) + unsigned(ap_const_lv2_1));
    next_mul_fu_127_p2 <= std_logic_vector(unsigned(phi_mul_reg_90) + unsigned(size1_y));
    tmp3_fu_164_p1 <= size1_x;
    tmp3_fu_164_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_220) * signed(tmp3_fu_164_p1))), 32));
    tmp_23_fu_144_p1 <= k_reg_79(1 - 1 downto 0);
    tmp_7_fu_172_p2 <= std_logic_vector(unsigned(i_cast2_fu_168_p1) + unsigned(tmp3_reg_225));
        tmp_8_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_172_p2),64));

    tmp_fu_158_p2 <= std_logic_vector(unsigned(j_cast3_fu_154_p1) + unsigned(phi_mul_reg_90));
end behav;
