-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_16_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of exp_16_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_lsb_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_lsb_table_ce0 : STD_LOGIC;
    signal f_x_lsb_table_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp_x_msb_2_m_1_tabl_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_2_m_1_tabl_ce0 : STD_LOGIC;
    signal exp_x_msb_2_m_1_tabl_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_1_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_1_table_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_13_fu_171_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_517_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_517_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_517_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_517_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_523 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_reg_523_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_273_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_reg_528 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_reg_528_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_reg_528_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_544 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_544_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_544_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_544_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_544_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_lsb_V_reg_549 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_x_lsb_V_reg_549_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_8_reg_555 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_8_reg_555_pp0_iter2_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_4_reg_561 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_s_fu_388_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_s_reg_571 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_10_reg_576 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_10_reg_576_pp0_iter4_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_1_reg_582 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_3_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_193_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_149_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal loc_V_1_fu_163_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_3_fu_277_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_V_2_fu_263_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal not_s_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_1_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_3_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_2_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_325_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_fu_340_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_3_fu_340_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_fu_340_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Result_s_25_fu_319_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_364_p5 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_8_cast_fu_374_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_fu_361_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_6_fu_378_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_9_fu_384_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_4_fu_399_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_4_fu_399_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_4_fu_399_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal not_Result_s_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_428_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_cast_fu_420_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal y_V_fu_432_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_3_fu_442_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_19_fu_449_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_465_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_499_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_3_fu_340_p00 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_3_fu_340_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_4_fu_399_p00 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_4_fu_399_p10 : STD_LOGIC_VECTOR (49 downto 0);

    component exp_16_8_s_f_x_lsfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component exp_16_8_s_exp_x_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component exp_16_8_s_exp_x_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    f_x_lsb_table_U : component exp_16_8_s_f_x_lsfYi
    generic map (
        DataWidth => 11,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_lsb_table_address0,
        ce0 => f_x_lsb_table_ce0,
        q0 => f_x_lsb_table_q0);

    exp_x_msb_2_m_1_tabl_U : component exp_16_8_s_exp_x_g8j
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_2_m_1_tabl_address0,
        ce0 => exp_x_msb_2_m_1_tabl_ce0,
        q0 => exp_x_msb_2_m_1_tabl_q0);

    exp_x_msb_1_table_U : component exp_16_8_s_exp_x_hbi
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_address0,
        ce0 => exp_x_msb_1_table_ce0,
        q0 => exp_x_msb_1_table_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_x_lsb_V_reg_549 <= f_x_lsb_table_q0;
                p_Result_s_reg_523 <= x_V(10 downto 7);
                p_Result_s_reg_523_pp0_iter1_reg <= p_Result_s_reg_523;
                p_Val2_8_reg_555 <= exp_x_msb_2_m_1_tabl_q0;
                sel_tmp_reg_544 <= sel_tmp_fu_313_p2;
                sel_tmp_reg_544_pp0_iter1_reg <= sel_tmp_reg_544;
                tmp_13_reg_517 <= x_V(15 downto 15);
                tmp_13_reg_517_pp0_iter1_reg <= tmp_13_reg_517;
                tmp_18_reg_528 <= tmp_18_fu_273_p1;
                tmp_18_reg_528_pp0_iter1_reg <= tmp_18_reg_528;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                f_x_lsb_V_reg_549_pp0_iter2_reg <= f_x_lsb_V_reg_549;
                p_Val2_10_reg_576_pp0_iter4_reg <= p_Val2_10_reg_576;
                p_Val2_8_reg_555_pp0_iter2_reg <= p_Val2_8_reg_555;
                sel_tmp_reg_544_pp0_iter2_reg <= sel_tmp_reg_544_pp0_iter1_reg;
                sel_tmp_reg_544_pp0_iter3_reg <= sel_tmp_reg_544_pp0_iter2_reg;
                sel_tmp_reg_544_pp0_iter4_reg <= sel_tmp_reg_544_pp0_iter3_reg;
                tmp_13_reg_517_pp0_iter2_reg <= tmp_13_reg_517_pp0_iter1_reg;
                tmp_13_reg_517_pp0_iter3_reg <= tmp_13_reg_517_pp0_iter2_reg;
                tmp_13_reg_517_pp0_iter4_reg <= tmp_13_reg_517_pp0_iter3_reg;
                tmp_18_reg_528_pp0_iter2_reg <= tmp_18_reg_528_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (sel_tmp_reg_544_pp0_iter2_reg = ap_const_lv1_0))) then
                p_Val2_10_reg_576 <= exp_x_msb_1_table_q0;
                p_Val2_s_reg_571 <= p_Val2_s_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (sel_tmp_reg_544_pp0_iter3_reg = ap_const_lv1_0))) then
                p_Val2_1_reg_582 <= r_V_4_fu_399_p2(49 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (sel_tmp_reg_544_pp0_iter1_reg = ap_const_lv1_0))) then
                p_Val2_4_reg_561 <= r_V_3_fu_340_p2(42 downto 24);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv16_7FFF when (tmp_5_fu_493_p2(0) = '1') else 
        tmp_1_fu_499_p4;
    exp_x_msb_1_table_address0 <= tmp_7_fu_356_p1(5 - 1 downto 0);

    exp_x_msb_1_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_x_msb_1_table_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_2_m_1_tabl_address0 <= tmp_4_fu_290_p1(5 - 1 downto 0);

    exp_x_msb_2_m_1_tabl_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_2_m_1_tabl_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_2_m_1_tabl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_lsb_table_address0 <= tmp_3_fu_285_p1(5 - 1 downto 0);

    f_x_lsb_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_lsb_table_ce0 <= ap_const_logic_1;
        else 
            f_x_lsb_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_1_fu_163_p3 <= (tmp_fu_159_p1 & ap_const_lv3_0);
    loc_V_2_fu_263_p4 <= x_V(6 downto 2);
    loc_V_3_fu_277_p3 <= (tmp_18_fu_273_p1 & ap_const_lv3_0);
    loc_V_fu_149_p4 <= x_V(11 downto 8);
    not_1_fu_201_p2 <= (tmp_15_fu_193_p3 xor tmp_13_fu_171_p3);
    not_2_fu_215_p2 <= (tmp_16_fu_207_p3 xor tmp_13_fu_171_p3);
    not_3_fu_229_p2 <= (tmp_17_fu_221_p3 xor tmp_13_fu_171_p3);
    not_Result_s_fu_415_p2 <= (tmp_13_reg_517_pp0_iter4_reg xor ap_const_lv1_1);
    not_s_fu_187_p2 <= (tmp_14_fu_179_p3 xor tmp_13_fu_171_p3);
    or_cond_fu_247_p2 <= (tmp_s_fu_235_p2 and tmp_2_fu_241_p2);
    p_Result_1_fu_325_p4 <= ((tmp_18_reg_528_pp0_iter1_reg & ap_const_lv5_0) & f_x_lsb_V_reg_549);
    p_Result_s_25_fu_319_p3 <= (tmp_13_reg_517_pp0_iter1_reg & p_Result_s_reg_523_pp0_iter1_reg);
    p_Val2_2_fu_428_p2 <= std_logic_vector(unsigned(p_Val2_10_reg_576_pp0_iter4_reg) + unsigned(p_Val2_1_reg_582));
    p_Val2_3_fu_442_p3 <= 
        p_cast_fu_420_p3 when (sel_tmp_reg_544_pp0_iter4_reg(0) = '1') else 
        y_V_fu_432_p4;
    p_Val2_6_fu_378_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_374_p1) + unsigned(tmp_6_fu_361_p1));
    p_Val2_s_fu_388_p2 <= std_logic_vector(unsigned(p_Val2_8_reg_555_pp0_iter2_reg) + unsigned(tmp_9_fu_384_p1));
    p_cast_fu_420_p3 <= 
        ap_const_lv22_3FFFFF when (not_Result_s_fu_415_p2(0) = '1') else 
        ap_const_lv22_0;
    r_V_3_fu_340_p0 <= r_V_3_fu_340_p00(25 - 1 downto 0);
    r_V_3_fu_340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_8_reg_555),43));
    r_V_3_fu_340_p1 <= r_V_3_fu_340_p10(18 - 1 downto 0);
    r_V_3_fu_340_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_325_p4),43));
    r_V_3_fu_340_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_340_p0) * unsigned(r_V_3_fu_340_p1), 43));
    r_V_4_fu_399_p0 <= r_V_4_fu_399_p00(25 - 1 downto 0);
    r_V_4_fu_399_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_10_reg_576),50));
    r_V_4_fu_399_p1 <= r_V_4_fu_399_p10(25 - 1 downto 0);
    r_V_4_fu_399_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_571),50));
    r_V_4_fu_399_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_399_p0) * unsigned(r_V_4_fu_399_p1), 50));
    sel_tmp_fu_313_p2 <= (tmp3_fu_307_p2 or tmp2_fu_295_p2);
    tmp2_fu_295_p2 <= (not_s_fu_187_p2 or not_1_fu_201_p2);
    tmp3_fu_307_p2 <= (tmp4_fu_301_p2 or not_2_fu_215_p2);
    tmp4_fu_301_p2 <= (or_cond_fu_247_p2 or not_3_fu_229_p2);
    tmp5_fu_481_p2 <= (tmp_20_fu_457_p3 or tmp_19_fu_449_p3);
    tmp6_fu_487_p2 <= (tmp_22_fu_473_p3 or tmp_21_fu_465_p3);
    tmp_13_fu_171_p3 <= x_V(15 downto 15);
    tmp_14_fu_179_p3 <= x_V(11 downto 11);
    tmp_15_fu_193_p3 <= x_V(12 downto 12);
    tmp_16_fu_207_p3 <= x_V(13 downto 13);
    tmp_17_fu_221_p3 <= x_V(14 downto 14);
    tmp_18_fu_273_p1 <= x_V(2 - 1 downto 0);
    tmp_19_fu_449_p3 <= p_Val2_3_fu_442_p3(21 downto 21);
    tmp_1_fu_499_p4 <= p_Val2_3_fu_442_p3(18 downto 3);
    tmp_20_fu_457_p3 <= p_Val2_3_fu_442_p3(20 downto 20);
    tmp_21_fu_465_p3 <= p_Val2_3_fu_442_p3(19 downto 19);
    tmp_22_fu_473_p3 <= p_Val2_3_fu_442_p3(18 downto 18);
    tmp_2_fu_241_p2 <= "1" when (unsigned(loc_V_1_fu_163_p3) > unsigned(ap_const_lv11_500)) else "0";
    tmp_3_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_3_fu_277_p3),64));
    tmp_4_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_263_p4),64));
    tmp_5_fu_493_p2 <= (tmp6_fu_487_p2 or tmp5_fu_481_p2);
    tmp_6_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_reg_561),20));
    tmp_7_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_25_fu_319_p3),64));
    tmp_8_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_364_p5),20));
    tmp_8_fu_364_p5 <= (((tmp_18_reg_528_pp0_iter2_reg & ap_const_lv5_0) & f_x_lsb_V_reg_549_pp0_iter2_reg) & ap_const_lv1_0);
    tmp_9_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_6_fu_378_p2),25));
    tmp_fu_159_p1 <= x_V(8 - 1 downto 0);
    tmp_s_fu_235_p2 <= "1" when (loc_V_fu_149_p4 = ap_const_lv4_7) else "0";
    y_V_fu_432_p4 <= p_Val2_2_fu_428_p2(24 downto 3);
end behav;
