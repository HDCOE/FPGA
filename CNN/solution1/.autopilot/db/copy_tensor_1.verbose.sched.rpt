

================================================================
== Vivado HLS Report for 'copy_tensor_1'
================================================================
* Date:           Mon Jan  7 16:14:01 2019

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        CNN
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.510|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+
        |                 |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |    Loop Name    | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1         |    ?|    ?|         ?|          -|          -|     ?|    no    |
        | + Loop 1.1      |    ?|    ?|         ?|          -|          -|     ?|    no    |
        |  ++ Loop 1.1.1  |    ?|    ?|         2|          -|          -|     ?|    no    |
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (tmp_s)
3 --> 
	4  / (tmp_2)
	2  / (!tmp_2)
4 --> 
	5  / true
5 --> 
	6  / (tmp_3)
	3  / (!tmp_3)
6 --> 
	5  / true

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecMemCore([8 x i16]* %in1_V, [1 x i8]* @p_str4, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str4, i32 -1, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4)"   --->   Operation 7 'specmemcore' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%empty_33 = call i32 (...)* @_ssdm_op_SpecMemCore([8 x i16]* %in2_V, [1 x i8]* @p_str3, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str3, i32 -1, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3)"   --->   Operation 8 'specmemcore' 'empty_33' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%size2_z_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %size2_z)"   --->   Operation 9 'read' 'size2_z_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%size2_y_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %size2_y)"   --->   Operation 10 'read' 'size2_y_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%size2_x_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %size2_x)"   --->   Operation 11 'read' 'size2_x_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%size1_y_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %size1_y)"   --->   Operation 12 'read' 'size1_y_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%size1_x_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %size1_x)"   --->   Operation 13 'read' 'size1_x_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (1.76ns)   --->   "br label %.loopexit" [CNN/Lenet5.cpp:14]   --->   Operation 14 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 2.55>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%k = phi i31 [ 0, %0 ], [ %k_1, %.loopexit.loopexit ]"   --->   Operation 15 'phi' 'k' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (0.00ns)   --->   "%phi_mul = phi i32 [ 0, %0 ], [ %next_mul, %.loopexit.loopexit ]"   --->   Operation 16 'phi' 'phi_mul' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%phi_mul1 = phi i32 [ 0, %0 ], [ %next_mul2, %.loopexit.loopexit ]"   --->   Operation 17 'phi' 'phi_mul1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (2.55ns)   --->   "%next_mul2 = add i32 %phi_mul1, %size2_y_read"   --->   Operation 18 'add' 'next_mul2' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 19 [1/1] (2.55ns)   --->   "%next_mul = add i32 %phi_mul, %size1_y_read"   --->   Operation 19 'add' 'next_mul' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%k_cast = zext i31 %k to i32" [CNN/Lenet5.cpp:14]   --->   Operation 20 'zext' 'k_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (2.47ns)   --->   "%tmp_s = icmp slt i32 %k_cast, %size2_z_read" [CNN/Lenet5.cpp:14]   --->   Operation 21 'icmp' 'tmp_s' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 22 [1/1] (2.52ns)   --->   "%k_1 = add i31 %k, 1" [CNN/Lenet5.cpp:14]   --->   Operation 22 'add' 'k_1' <Predicate = true> <Delay = 2.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "br i1 %tmp_s, label %.preheader2.preheader, label %2" [CNN/Lenet5.cpp:14]   --->   Operation 23 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (1.76ns)   --->   "br label %.preheader2" [CNN/Lenet5.cpp:15]   --->   Operation 24 'br' <Predicate = (tmp_s)> <Delay = 1.76>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "ret void" [CNN/Lenet5.cpp:19]   --->   Operation 25 'ret' <Predicate = (!tmp_s)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 2.55>
ST_3 : Operation 26 [1/1] (0.00ns)   --->   "%j = phi i31 [ %j_1, %.preheader2.loopexit ], [ 0, %.preheader2.preheader ]"   --->   Operation 26 'phi' 'j' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 27 [1/1] (0.00ns)   --->   "%j_cast = zext i31 %j to i32" [CNN/Lenet5.cpp:15]   --->   Operation 27 'zext' 'j_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 28 [1/1] (2.47ns)   --->   "%tmp_2 = icmp slt i32 %j_cast, %size2_y_read" [CNN/Lenet5.cpp:15]   --->   Operation 28 'icmp' 'tmp_2' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 29 [1/1] (2.52ns)   --->   "%j_1 = add i31 %j, 1" [CNN/Lenet5.cpp:15]   --->   Operation 29 'add' 'j_1' <Predicate = true> <Delay = 2.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "br i1 %tmp_2, label %.preheader.preheader, label %.loopexit.loopexit" [CNN/Lenet5.cpp:15]   --->   Operation 30 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 31 [1/1] (2.55ns)   --->   "%tmp = add i32 %j_cast, %phi_mul" [CNN/Lenet5.cpp:15]   --->   Operation 31 'add' 'tmp' <Predicate = (tmp_2)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 32 [1/1] (2.55ns)   --->   "%tmp4 = add i32 %j_cast, %phi_mul1" [CNN/Lenet5.cpp:15]   --->   Operation 32 'add' 'tmp4' <Predicate = (tmp_2)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "br label %.loopexit"   --->   Operation 33 'br' <Predicate = (!tmp_2)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 8.51>
ST_4 : Operation 34 [1/1] (8.51ns)   --->   "%tmp3 = mul i32 %tmp, %size1_x_read" [CNN/Lenet5.cpp:15]   --->   Operation 34 'mul' 'tmp3' <Predicate = true> <Delay = 8.51> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 8.51> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 35 [1/1] (8.51ns)   --->   "%tmp5 = mul i32 %tmp4, %size2_x_read" [CNN/Lenet5.cpp:15]   --->   Operation 35 'mul' 'tmp5' <Predicate = true> <Delay = 8.51> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 8.51> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 36 [1/1] (1.76ns)   --->   "br label %.preheader" [CNN/Lenet5.cpp:16]   --->   Operation 36 'br' <Predicate = true> <Delay = 1.76>

State 5 <SV = 4> <Delay = 4.87>
ST_5 : Operation 37 [1/1] (0.00ns)   --->   "%i = phi i31 [ %i_1, %1 ], [ 0, %.preheader.preheader ]"   --->   Operation 37 'phi' 'i' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 38 [1/1] (0.00ns)   --->   "%i_cast = zext i31 %i to i32" [CNN/Lenet5.cpp:16]   --->   Operation 38 'zext' 'i_cast' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 39 [1/1] (2.47ns)   --->   "%tmp_3 = icmp slt i32 %i_cast, %size2_x_read" [CNN/Lenet5.cpp:16]   --->   Operation 39 'icmp' 'tmp_3' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 40 [1/1] (2.52ns)   --->   "%i_1 = add i31 %i, 1" [CNN/Lenet5.cpp:16]   --->   Operation 40 'add' 'i_1' <Predicate = true> <Delay = 2.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 41 [1/1] (0.00ns)   --->   "br i1 %tmp_3, label %1, label %.preheader2.loopexit" [CNN/Lenet5.cpp:16]   --->   Operation 41 'br' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 42 [1/1] (2.55ns)   --->   "%tmp_4 = add nsw i32 %i_cast, %tmp3" [CNN/Lenet5.cpp:17]   --->   Operation 42 'add' 'tmp_4' <Predicate = (tmp_3)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 43 [1/1] (2.55ns)   --->   "%tmp_6 = add nsw i32 %i_cast, %tmp5" [CNN/Lenet5.cpp:17]   --->   Operation 43 'add' 'tmp_6' <Predicate = (tmp_3)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 44 [1/1] (0.00ns)   --->   "%tmp_7 = sext i32 %tmp_6 to i64" [CNN/Lenet5.cpp:17]   --->   Operation 44 'sext' 'tmp_7' <Predicate = (tmp_3)> <Delay = 0.00>
ST_5 : Operation 45 [1/1] (0.00ns)   --->   "%in2_V_addr = getelementptr [8 x i16]* %in2_V, i64 0, i64 %tmp_7" [CNN/Lenet5.cpp:17]   --->   Operation 45 'getelementptr' 'in2_V_addr' <Predicate = (tmp_3)> <Delay = 0.00>
ST_5 : Operation 46 [2/2] (2.32ns)   --->   "%in2_V_load = load i16* %in2_V_addr, align 2" [CNN/Lenet5.cpp:17]   --->   Operation 46 'load' 'in2_V_load' <Predicate = (tmp_3)> <Delay = 2.32> <Core = "RAM_1P">   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 8> <RAM>
ST_5 : Operation 47 [1/1] (0.00ns)   --->   "br label %.preheader2"   --->   Operation 47 'br' <Predicate = (!tmp_3)> <Delay = 0.00>

State 6 <SV = 5> <Delay = 4.64>
ST_6 : Operation 48 [1/1] (0.00ns)   --->   "%tmp_5 = sext i32 %tmp_4 to i64" [CNN/Lenet5.cpp:17]   --->   Operation 48 'sext' 'tmp_5' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 49 [1/2] (2.32ns)   --->   "%in2_V_load = load i16* %in2_V_addr, align 2" [CNN/Lenet5.cpp:17]   --->   Operation 49 'load' 'in2_V_load' <Predicate = true> <Delay = 2.32> <Core = "RAM_1P">   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 8> <RAM>
ST_6 : Operation 50 [1/1] (0.00ns)   --->   "%in1_V_addr = getelementptr [8 x i16]* %in1_V, i64 0, i64 %tmp_5" [CNN/Lenet5.cpp:17]   --->   Operation 50 'getelementptr' 'in1_V_addr' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 51 [1/1] (2.32ns)   --->   "store i16 %in2_V_load, i16* %in1_V_addr, align 2" [CNN/Lenet5.cpp:17]   --->   Operation 51 'store' <Predicate = true> <Delay = 2.32> <Core = "RAM_1P">   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 8> <RAM>
ST_6 : Operation 52 [1/1] (0.00ns)   --->   "br label %.preheader" [CNN/Lenet5.cpp:16]   --->   Operation 52 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('k') with incoming values : ('k', CNN/Lenet5.cpp:14) [17]  (1.77 ns)

 <State 2>: 2.55ns
The critical path consists of the following:
	'phi' operation ('phi_mul') with incoming values : ('next_mul') [18]  (0 ns)
	'add' operation ('next_mul') [21]  (2.55 ns)

 <State 3>: 2.55ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', CNN/Lenet5.cpp:15) [29]  (0 ns)
	'add' operation ('tmp', CNN/Lenet5.cpp:15) [35]  (2.55 ns)

 <State 4>: 8.51ns
The critical path consists of the following:
	'mul' operation ('tmp3', CNN/Lenet5.cpp:15) [36]  (8.51 ns)

 <State 5>: 4.87ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', CNN/Lenet5.cpp:16) [41]  (0 ns)
	'add' operation ('tmp_6', CNN/Lenet5.cpp:17) [49]  (2.55 ns)
	'getelementptr' operation ('in2_V_addr', CNN/Lenet5.cpp:17) [51]  (0 ns)
	'load' operation ('in2_V_load', CNN/Lenet5.cpp:17) on array 'in2_V' [52]  (2.32 ns)

 <State 6>: 4.64ns
The critical path consists of the following:
	'load' operation ('in2_V_load', CNN/Lenet5.cpp:17) on array 'in2_V' [52]  (2.32 ns)
	'store' operation (CNN/Lenet5.cpp:17) of variable 'in2_V_load', CNN/Lenet5.cpp:17 on array 'in1_V' [54]  (2.32 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
