// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _forward_ReLu_HH_
#define _forward_ReLu_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct forward_ReLu : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > activation_layer_2_2_2_input_data_V_address0;
    sc_out< sc_logic > activation_layer_2_2_2_input_data_V_ce0;
    sc_in< sc_lv<16> > activation_layer_2_2_2_input_data_V_q0;
    sc_out< sc_lv<3> > activation_layer_2_2_2_output_data_V_address0;
    sc_out< sc_logic > activation_layer_2_2_2_output_data_V_ce0;
    sc_out< sc_logic > activation_layer_2_2_2_output_data_V_we0;
    sc_out< sc_lv<16> > activation_layer_2_2_2_output_data_V_d0;


    // Module declarations
    forward_ReLu(sc_module_name name);
    SC_HAS_PROCESS(forward_ReLu);

    ~forward_ReLu();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > p_x_assign_cast_fu_95_p1;
    sc_signal< sc_lv<3> > p_x_assign_cast_reg_179;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > i_fu_105_p2;
    sc_signal< sc_lv<2> > i_reg_187;
    sc_signal< sc_lv<2> > j_fu_117_p2;
    sc_signal< sc_lv<2> > j_reg_195;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_fu_123_p1;
    sc_signal< sc_lv<1> > tmp_reg_200;
    sc_signal< sc_lv<1> > exitcond8_fu_111_p2;
    sc_signal< sc_lv<2> > ch_fu_133_p2;
    sc_signal< sc_lv<2> > ch_reg_208;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > tmp_2_fu_157_p1;
    sc_signal< sc_lv<64> > tmp_2_reg_213;
    sc_signal< sc_lv<1> > exitcond_fu_127_p2;
    sc_signal< sc_lv<2> > p_x_assign_reg_62;
    sc_signal< sc_lv<2> > p_y_assign_reg_73;
    sc_signal< sc_lv<1> > exitcond7_fu_99_p2;
    sc_signal< sc_lv<2> > p_z_assign_reg_84;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_11_fu_139_p1;
    sc_signal< sc_lv<3> > tmp1_fu_143_p4;
    sc_signal< sc_lv<3> > tmp_s_fu_152_p2;
    sc_signal< sc_lv<1> > tmp_12_fu_162_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_activation_layer_2_2_2_input_data_V_address0();
    void thread_activation_layer_2_2_2_input_data_V_ce0();
    void thread_activation_layer_2_2_2_output_data_V_address0();
    void thread_activation_layer_2_2_2_output_data_V_ce0();
    void thread_activation_layer_2_2_2_output_data_V_d0();
    void thread_activation_layer_2_2_2_output_data_V_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ch_fu_133_p2();
    void thread_exitcond7_fu_99_p2();
    void thread_exitcond8_fu_111_p2();
    void thread_exitcond_fu_127_p2();
    void thread_i_fu_105_p2();
    void thread_j_fu_117_p2();
    void thread_p_x_assign_cast_fu_95_p1();
    void thread_tmp1_fu_143_p4();
    void thread_tmp_11_fu_139_p1();
    void thread_tmp_12_fu_162_p3();
    void thread_tmp_2_fu_157_p1();
    void thread_tmp_fu_123_p1();
    void thread_tmp_s_fu_152_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
