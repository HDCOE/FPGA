// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _copy_tensor_3_HH_
#define _copy_tensor_3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct copy_tensor_3 : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > p_read2;
    sc_in< sc_lv<16> > p_read7;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;


    // Module declarations
    copy_tensor_3(sc_module_name name);
    SC_HAS_PROCESS(copy_tensor_3);

    ~copy_tensor_3();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > k_1_fu_65_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > k_reg_42;
    sc_signal< sc_lv<1> > exitcond2_fu_59_p2;
    sc_signal< sc_lv<16> > in1_V16_s_fu_22;
    sc_signal< sc_lv<16> > in1_V_0_in1_V16_2_fu_82_p3;
    sc_signal< sc_lv<16> > in1_V_s_fu_26;
    sc_signal< sc_lv<16> > in1_V_2_in1_V_fu_75_p3;
    sc_signal< sc_lv<1> > tmp_fu_71_p1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_exitcond2_fu_59_p2();
    void thread_in1_V_0_in1_V16_2_fu_82_p3();
    void thread_in1_V_2_in1_V_fu_75_p3();
    void thread_k_1_fu_65_p2();
    void thread_tmp_fu_71_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
