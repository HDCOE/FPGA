// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Lenet.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Lenet::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Lenet::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<15> Lenet::ap_ST_fsm_state1 = "1";
const sc_lv<15> Lenet::ap_ST_fsm_state2 = "10";
const sc_lv<15> Lenet::ap_ST_fsm_state3 = "100";
const sc_lv<15> Lenet::ap_ST_fsm_state4 = "1000";
const sc_lv<15> Lenet::ap_ST_fsm_state5 = "10000";
const sc_lv<15> Lenet::ap_ST_fsm_state6 = "100000";
const sc_lv<15> Lenet::ap_ST_fsm_state7 = "1000000";
const sc_lv<15> Lenet::ap_ST_fsm_state8 = "10000000";
const sc_lv<15> Lenet::ap_ST_fsm_state9 = "100000000";
const sc_lv<15> Lenet::ap_ST_fsm_state10 = "1000000000";
const sc_lv<15> Lenet::ap_ST_fsm_state11 = "10000000000";
const sc_lv<15> Lenet::ap_ST_fsm_state12 = "100000000000";
const sc_lv<15> Lenet::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<15> Lenet::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<15> Lenet::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> Lenet::ap_const_lv32_0 = "00000000000000000000000000000000";
const int Lenet::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> Lenet::ap_const_lv32_B = "1011";
const bool Lenet::ap_const_boolean_0 = false;
const sc_lv<32> Lenet::ap_const_lv32_C = "1100";
const sc_lv<32> Lenet::ap_const_lv32_D = "1101";
const sc_lv<32> Lenet::ap_const_lv32_2 = "10";
const sc_lv<32> Lenet::ap_const_lv32_3 = "11";
const sc_lv<32> Lenet::ap_const_lv32_4 = "100";
const sc_lv<32> Lenet::ap_const_lv32_6 = "110";
const sc_lv<32> Lenet::ap_const_lv32_8 = "1000";
const sc_lv<32> Lenet::ap_const_lv32_A = "1010";
const sc_lv<32> Lenet::ap_const_lv32_1 = "1";
const sc_lv<32> Lenet::ap_const_lv32_5 = "101";
const sc_lv<32> Lenet::ap_const_lv32_7 = "111";
const sc_lv<32> Lenet::ap_const_lv32_9 = "1001";
const sc_lv<32> Lenet::ap_const_lv32_E = "1110";
const bool Lenet::ap_const_boolean_1 = true;

Lenet::Lenet(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Lenet_axilite_s_axi_U = new Lenet_axilite_s_axi<C_S_AXI_AXILITE_ADDR_WIDTH,C_S_AXI_AXILITE_DATA_WIDTH>("Lenet_axilite_s_axi_U");
    Lenet_axilite_s_axi_U->AWVALID(s_axi_axilite_AWVALID);
    Lenet_axilite_s_axi_U->AWREADY(s_axi_axilite_AWREADY);
    Lenet_axilite_s_axi_U->AWADDR(s_axi_axilite_AWADDR);
    Lenet_axilite_s_axi_U->WVALID(s_axi_axilite_WVALID);
    Lenet_axilite_s_axi_U->WREADY(s_axi_axilite_WREADY);
    Lenet_axilite_s_axi_U->WDATA(s_axi_axilite_WDATA);
    Lenet_axilite_s_axi_U->WSTRB(s_axi_axilite_WSTRB);
    Lenet_axilite_s_axi_U->ARVALID(s_axi_axilite_ARVALID);
    Lenet_axilite_s_axi_U->ARREADY(s_axi_axilite_ARREADY);
    Lenet_axilite_s_axi_U->ARADDR(s_axi_axilite_ARADDR);
    Lenet_axilite_s_axi_U->RVALID(s_axi_axilite_RVALID);
    Lenet_axilite_s_axi_U->RREADY(s_axi_axilite_RREADY);
    Lenet_axilite_s_axi_U->RDATA(s_axi_axilite_RDATA);
    Lenet_axilite_s_axi_U->RRESP(s_axi_axilite_RRESP);
    Lenet_axilite_s_axi_U->BVALID(s_axi_axilite_BVALID);
    Lenet_axilite_s_axi_U->BREADY(s_axi_axilite_BREADY);
    Lenet_axilite_s_axi_U->BRESP(s_axi_axilite_BRESP);
    Lenet_axilite_s_axi_U->ACLK(ap_clk);
    Lenet_axilite_s_axi_U->ARESET(ap_rst_n_inv);
    Lenet_axilite_s_axi_U->ACLK_EN(ap_var_for_const0);
    Lenet_axilite_s_axi_U->ap_start(ap_start);
    Lenet_axilite_s_axi_U->interrupt(interrupt);
    Lenet_axilite_s_axi_U->ap_ready(ap_ready);
    Lenet_axilite_s_axi_U->ap_done(ap_done);
    Lenet_axilite_s_axi_U->ap_idle(ap_idle);
    Lenet_axilite_s_axi_U->data_in_data_V_address0(grp_copy_tensor_1_fu_225_in2_V_address0);
    Lenet_axilite_s_axi_U->data_in_data_V_ce0(data_in_data_V_ce0);
    Lenet_axilite_s_axi_U->data_in_data_V_q0(data_in_data_V_q0);
    Lenet_axilite_s_axi_U->data_in_size_x(data_in_size_x);
    Lenet_axilite_s_axi_U->data_in_size_y(data_in_size_y);
    Lenet_axilite_s_axi_U->data_in_size_z(data_in_size_z);
    Lenet_axilite_s_axi_U->conv_data_V_address0(grp_copy_tensor_1_fu_225_in1_V_address0);
    Lenet_axilite_s_axi_U->conv_data_V_ce0(conv_data_V_ce0);
    Lenet_axilite_s_axi_U->conv_data_V_we0(conv_data_V_we0);
    Lenet_axilite_s_axi_U->conv_data_V_d0(grp_copy_tensor_1_fu_225_in1_V_d0);
    Lenet_axilite_s_axi_U->conv_size_x(conv_size_x);
    Lenet_axilite_s_axi_U->conv_size_y(conv_size_y);
    Lenet_axilite_s_axi_U->conv_size_z(conv_size_z);
    Lenet_axilite_s_axi_U->relu_data_V_address0(grp_copy_tensor_1_fu_225_in1_V_address0);
    Lenet_axilite_s_axi_U->relu_data_V_ce0(relu_data_V_ce0);
    Lenet_axilite_s_axi_U->relu_data_V_we0(relu_data_V_we0);
    Lenet_axilite_s_axi_U->relu_data_V_d0(grp_copy_tensor_1_fu_225_in1_V_d0);
    Lenet_axilite_s_axi_U->relu_size_x(relu_size_x);
    Lenet_axilite_s_axi_U->relu_size_y(relu_size_y);
    Lenet_axilite_s_axi_U->relu_size_z(relu_size_z);
    Lenet_axilite_s_axi_U->pool_size_x(pool_size_x);
    Lenet_axilite_s_axi_U->pool_size_y(pool_size_y);
    Lenet_axilite_s_axi_U->pool_size_z(pool_size_z);
    Lenet_axilite_s_axi_U->fc_data_V_address0(grp_copy_tensor_fu_248_in1_V_address0);
    Lenet_axilite_s_axi_U->fc_data_V_ce0(grp_copy_tensor_fu_248_in1_V_ce0);
    Lenet_axilite_s_axi_U->fc_data_V_we0(grp_copy_tensor_fu_248_in1_V_we0);
    Lenet_axilite_s_axi_U->fc_data_V_d0(grp_copy_tensor_fu_248_in1_V_d0);
    Lenet_axilite_s_axi_U->fc_size_x(fc_size_x);
    Lenet_axilite_s_axi_U->fc_size_y(fc_size_y);
    Lenet_axilite_s_axi_U->fc_size_z(fc_size_z);
    Lenet_axilite_s_axi_U->data_out_data_V_address0(grp_copy_tensor_2_fu_258_in1_V_address0);
    Lenet_axilite_s_axi_U->data_out_data_V_ce0(grp_copy_tensor_2_fu_258_in1_V_ce0);
    Lenet_axilite_s_axi_U->data_out_data_V_we0(grp_copy_tensor_2_fu_258_in1_V_we0);
    Lenet_axilite_s_axi_U->data_out_data_V_d0(grp_copy_tensor_2_fu_258_in1_V_d0);
    Lenet_axilite_s_axi_U->data_out_size_x(data_out_size_x);
    Lenet_axilite_s_axi_U->data_out_size_y(data_out_size_y);
    Lenet_axilite_s_axi_U->data_out_size_z(data_out_size_z);
    conv1_input_data_V_U = new Lenet_conv1_inputjbC("conv1_input_data_V_U");
    conv1_input_data_V_U->clk(ap_clk);
    conv1_input_data_V_U->reset(ap_rst_n_inv);
    conv1_input_data_V_U->address0(conv1_input_data_V_address0);
    conv1_input_data_V_U->ce0(conv1_input_data_V_ce0);
    conv1_input_data_V_U->we0(conv1_input_data_V_we0);
    conv1_input_data_V_U->d0(grp_copy_tensor_1_fu_225_in1_V_d0);
    conv1_input_data_V_U->q0(conv1_input_data_V_q0);
    conv1_output_data_V_U = new Lenet_conv1_inputjbC("conv1_output_data_V_U");
    conv1_output_data_V_U->clk(ap_clk);
    conv1_output_data_V_U->reset(ap_rst_n_inv);
    conv1_output_data_V_U->address0(conv1_output_data_V_address0);
    conv1_output_data_V_U->ce0(conv1_output_data_V_ce0);
    conv1_output_data_V_U->we0(conv1_output_data_V_we0);
    conv1_output_data_V_U->d0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0);
    conv1_output_data_V_U->q0(conv1_output_data_V_q0);
    conv1_a_slice_pad_da_U = new Lenet_conv1_a_slilbW("conv1_a_slice_pad_da_U");
    conv1_a_slice_pad_da_U->clk(ap_clk);
    conv1_a_slice_pad_da_U->reset(ap_rst_n_inv);
    conv1_a_slice_pad_da_U->address0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0);
    conv1_a_slice_pad_da_U->ce0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0);
    conv1_a_slice_pad_da_U->we0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0);
    conv1_a_slice_pad_da_U->d0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0);
    conv1_a_slice_pad_da_U->q0(conv1_a_slice_pad_da_q0);
    fx_input_data_V_U = new Lenet_conv1_inputjbC("fx_input_data_V_U");
    fx_input_data_V_U->clk(ap_clk);
    fx_input_data_V_U->reset(ap_rst_n_inv);
    fx_input_data_V_U->address0(fx_input_data_V_address0);
    fx_input_data_V_U->ce0(fx_input_data_V_ce0);
    fx_input_data_V_U->we0(fx_input_data_V_we0);
    fx_input_data_V_U->d0(grp_copy_tensor_1_fu_225_in1_V_d0);
    fx_input_data_V_U->q0(fx_input_data_V_q0);
    fx_output_data_V_U = new Lenet_conv1_inputjbC("fx_output_data_V_U");
    fx_output_data_V_U->clk(ap_clk);
    fx_output_data_V_U->reset(ap_rst_n_inv);
    fx_output_data_V_U->address0(fx_output_data_V_address0);
    fx_output_data_V_U->ce0(fx_output_data_V_ce0);
    fx_output_data_V_U->we0(fx_output_data_V_we0);
    fx_output_data_V_U->d0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0);
    fx_output_data_V_U->q0(fx_output_data_V_q0);
    fc1_input_data_V_U = new Lenet_conv1_inputjbC("fc1_input_data_V_U");
    fc1_input_data_V_U->clk(ap_clk);
    fc1_input_data_V_U->reset(ap_rst_n_inv);
    fc1_input_data_V_U->address0(fc1_input_data_V_address0);
    fc1_input_data_V_U->ce0(fc1_input_data_V_ce0);
    fc1_input_data_V_U->we0(fc1_input_data_V_we0);
    fc1_input_data_V_U->d0(grp_copy_tensor_1_fu_225_in1_V_d0);
    fc1_input_data_V_U->q0(fc1_input_data_V_q0);
    grp_softmax_fu_204 = new softmax("grp_softmax_fu_204");
    grp_softmax_fu_204->ap_clk(ap_clk);
    grp_softmax_fu_204->ap_rst(ap_rst_n_inv);
    grp_softmax_fu_204->ap_start(grp_softmax_fu_204_ap_start);
    grp_softmax_fu_204->ap_done(grp_softmax_fu_204_ap_done);
    grp_softmax_fu_204->ap_idle(grp_softmax_fu_204_ap_idle);
    grp_softmax_fu_204->ap_ready(grp_softmax_fu_204_ap_ready);
    grp_softmax_fu_204->classifier_1_1_2_input_data_0_V_read(softmax_input_data_0_reg_386);
    grp_softmax_fu_204->classifier_1_1_2_input_data_1_V_read(softmax_input_data_1_reg_391);
    grp_softmax_fu_204->ap_return_0(grp_softmax_fu_204_ap_return_0);
    grp_softmax_fu_204->ap_return_1(grp_softmax_fu_204_ap_return_1);
    grp_Conv_forward_fu_216 = new Conv_forward("grp_Conv_forward_fu_216");
    grp_Conv_forward_fu_216->ap_clk(ap_clk);
    grp_Conv_forward_fu_216->ap_rst(ap_rst_n_inv);
    grp_Conv_forward_fu_216->ap_start(grp_Conv_forward_fu_216_ap_start);
    grp_Conv_forward_fu_216->ap_done(grp_Conv_forward_fu_216_ap_done);
    grp_Conv_forward_fu_216->ap_idle(grp_Conv_forward_fu_216_ap_idle);
    grp_Conv_forward_fu_216->ap_ready(grp_Conv_forward_fu_216_ap_ready);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_input_data_V_address0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_input_data_V_q0(conv1_input_data_V_q0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_output_data_V_address0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_output_data_V_we0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_output_data_V_d0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_output_data_V_q0(conv1_output_data_V_q0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0);
    grp_Conv_forward_fu_216->conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_q0(conv1_a_slice_pad_da_q0);
    grp_copy_tensor_1_fu_225 = new copy_tensor_1("grp_copy_tensor_1_fu_225");
    grp_copy_tensor_1_fu_225->ap_clk(ap_clk);
    grp_copy_tensor_1_fu_225->ap_rst(ap_rst_n_inv);
    grp_copy_tensor_1_fu_225->ap_start(grp_copy_tensor_1_fu_225_ap_start);
    grp_copy_tensor_1_fu_225->ap_done(grp_copy_tensor_1_fu_225_ap_done);
    grp_copy_tensor_1_fu_225->ap_idle(grp_copy_tensor_1_fu_225_ap_idle);
    grp_copy_tensor_1_fu_225->ap_ready(grp_copy_tensor_1_fu_225_ap_ready);
    grp_copy_tensor_1_fu_225->in1_V_address0(grp_copy_tensor_1_fu_225_in1_V_address0);
    grp_copy_tensor_1_fu_225->in1_V_ce0(grp_copy_tensor_1_fu_225_in1_V_ce0);
    grp_copy_tensor_1_fu_225->in1_V_we0(grp_copy_tensor_1_fu_225_in1_V_we0);
    grp_copy_tensor_1_fu_225->in1_V_d0(grp_copy_tensor_1_fu_225_in1_V_d0);
    grp_copy_tensor_1_fu_225->in2_V_address0(grp_copy_tensor_1_fu_225_in2_V_address0);
    grp_copy_tensor_1_fu_225->in2_V_ce0(grp_copy_tensor_1_fu_225_in2_V_ce0);
    grp_copy_tensor_1_fu_225->in2_V_q0(grp_copy_tensor_1_fu_225_in2_V_q0);
    grp_copy_tensor_1_fu_225->size1_x(grp_copy_tensor_1_fu_225_size1_x);
    grp_copy_tensor_1_fu_225->size1_y(grp_copy_tensor_1_fu_225_size1_y);
    grp_copy_tensor_1_fu_225->size2_x(grp_copy_tensor_1_fu_225_size2_x);
    grp_copy_tensor_1_fu_225->size2_y(grp_copy_tensor_1_fu_225_size2_y);
    grp_copy_tensor_1_fu_225->size2_z(grp_copy_tensor_1_fu_225_size2_z);
    grp_copy_tensor_fu_248 = new copy_tensor("grp_copy_tensor_fu_248");
    grp_copy_tensor_fu_248->ap_clk(ap_clk);
    grp_copy_tensor_fu_248->ap_rst(ap_rst_n_inv);
    grp_copy_tensor_fu_248->ap_start(grp_copy_tensor_fu_248_ap_start);
    grp_copy_tensor_fu_248->ap_done(grp_copy_tensor_fu_248_ap_done);
    grp_copy_tensor_fu_248->ap_idle(grp_copy_tensor_fu_248_ap_idle);
    grp_copy_tensor_fu_248->ap_ready(grp_copy_tensor_fu_248_ap_ready);
    grp_copy_tensor_fu_248->in1_V_address0(grp_copy_tensor_fu_248_in1_V_address0);
    grp_copy_tensor_fu_248->in1_V_ce0(grp_copy_tensor_fu_248_in1_V_ce0);
    grp_copy_tensor_fu_248->in1_V_we0(grp_copy_tensor_fu_248_in1_V_we0);
    grp_copy_tensor_fu_248->in1_V_d0(grp_copy_tensor_fu_248_in1_V_d0);
    grp_copy_tensor_fu_248->in2_0_V_read(fc1_output_data_0_V_reg_374);
    grp_copy_tensor_fu_248->in2_1_V_read(fc1_output_data_1_V_reg_380);
    grp_copy_tensor_fu_248->size1_x(fc_size_x_read_reg_364);
    grp_copy_tensor_fu_248->size1_y(fc_size_y_read_reg_369);
    grp_copy_tensor_2_fu_258 = new copy_tensor_2("grp_copy_tensor_2_fu_258");
    grp_copy_tensor_2_fu_258->ap_clk(ap_clk);
    grp_copy_tensor_2_fu_258->ap_rst(ap_rst_n_inv);
    grp_copy_tensor_2_fu_258->ap_start(grp_copy_tensor_2_fu_258_ap_start);
    grp_copy_tensor_2_fu_258->ap_done(grp_copy_tensor_2_fu_258_ap_done);
    grp_copy_tensor_2_fu_258->ap_idle(grp_copy_tensor_2_fu_258_ap_idle);
    grp_copy_tensor_2_fu_258->ap_ready(grp_copy_tensor_2_fu_258_ap_ready);
    grp_copy_tensor_2_fu_258->in1_V_address0(grp_copy_tensor_2_fu_258_in1_V_address0);
    grp_copy_tensor_2_fu_258->in1_V_ce0(grp_copy_tensor_2_fu_258_in1_V_ce0);
    grp_copy_tensor_2_fu_258->in1_V_we0(grp_copy_tensor_2_fu_258_in1_V_we0);
    grp_copy_tensor_2_fu_258->in1_V_d0(grp_copy_tensor_2_fu_258_in1_V_d0);
    grp_copy_tensor_2_fu_258->p_read(softmax_y_hat_data_0_reg_396);
    grp_copy_tensor_2_fu_258->p_read1(softmax_y_hat_data_1_reg_401);
    grp_copy_tensor_2_fu_258->size1_x(data_out_size_x_read_reg_334);
    grp_copy_tensor_2_fu_258->size1_y(data_out_size_y_read_reg_339);
    grp_forward_fc_fu_268 = new forward_fc("grp_forward_fc_fu_268");
    grp_forward_fc_fu_268->ap_clk(ap_clk);
    grp_forward_fc_fu_268->ap_rst(ap_rst_n_inv);
    grp_forward_fc_fu_268->ap_start(grp_forward_fc_fu_268_ap_start);
    grp_forward_fc_fu_268->ap_done(grp_forward_fc_fu_268_ap_done);
    grp_forward_fc_fu_268->ap_idle(grp_forward_fc_fu_268_ap_idle);
    grp_forward_fc_fu_268->ap_ready(grp_forward_fc_fu_268_ap_ready);
    grp_forward_fc_fu_268->fc_layer_2_2_2_2_input_data_V_address0(grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0);
    grp_forward_fc_fu_268->fc_layer_2_2_2_2_input_data_V_ce0(grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0);
    grp_forward_fc_fu_268->fc_layer_2_2_2_2_input_data_V_q0(fc1_input_data_V_q0);
    grp_forward_fc_fu_268->ap_return_0(grp_forward_fc_fu_268_ap_return_0);
    grp_forward_fc_fu_268->ap_return_1(grp_forward_fc_fu_268_ap_return_1);
    grp_forward_ReLu_fu_275 = new forward_ReLu("grp_forward_ReLu_fu_275");
    grp_forward_ReLu_fu_275->ap_clk(ap_clk);
    grp_forward_ReLu_fu_275->ap_rst(ap_rst_n_inv);
    grp_forward_ReLu_fu_275->ap_start(grp_forward_ReLu_fu_275_ap_start);
    grp_forward_ReLu_fu_275->ap_done(grp_forward_ReLu_fu_275_ap_done);
    grp_forward_ReLu_fu_275->ap_idle(grp_forward_ReLu_fu_275_ap_idle);
    grp_forward_ReLu_fu_275->ap_ready(grp_forward_ReLu_fu_275_ap_ready);
    grp_forward_ReLu_fu_275->activation_layer_2_2_2_input_data_V_address0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0);
    grp_forward_ReLu_fu_275->activation_layer_2_2_2_input_data_V_ce0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0);
    grp_forward_ReLu_fu_275->activation_layer_2_2_2_input_data_V_q0(fx_input_data_V_q0);
    grp_forward_ReLu_fu_275->activation_layer_2_2_2_output_data_V_address0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0);
    grp_forward_ReLu_fu_275->activation_layer_2_2_2_output_data_V_ce0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0);
    grp_forward_ReLu_fu_275->activation_layer_2_2_2_output_data_V_we0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0);
    grp_forward_ReLu_fu_275->activation_layer_2_2_2_output_data_V_d0(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0);
    grp_copy_tensor_3_fu_281 = new copy_tensor_3("grp_copy_tensor_3_fu_281");
    grp_copy_tensor_3_fu_281->ap_clk(ap_clk);
    grp_copy_tensor_3_fu_281->ap_rst(ap_rst_n_inv);
    grp_copy_tensor_3_fu_281->ap_start(grp_copy_tensor_3_fu_281_ap_start);
    grp_copy_tensor_3_fu_281->ap_done(grp_copy_tensor_3_fu_281_ap_done);
    grp_copy_tensor_3_fu_281->ap_idle(grp_copy_tensor_3_fu_281_ap_idle);
    grp_copy_tensor_3_fu_281->ap_ready(grp_copy_tensor_3_fu_281_ap_ready);
    grp_copy_tensor_3_fu_281->p_read2(fc1_output_data_0_V_reg_374);
    grp_copy_tensor_3_fu_281->p_read7(fc1_output_data_1_V_reg_380);
    grp_copy_tensor_3_fu_281->ap_return_0(grp_copy_tensor_3_fu_281_ap_return_0);
    grp_copy_tensor_3_fu_281->ap_return_1(grp_copy_tensor_3_fu_281_ap_return_1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state12_on_subcall_done);
    sensitive << ( grp_forward_fc_fu_268_ap_done );
    sensitive << ( grp_copy_tensor_1_fu_225_ap_done );

    SC_METHOD(thread_ap_block_state13_on_subcall_done);
    sensitive << ( grp_copy_tensor_3_fu_281_ap_done );
    sensitive << ( grp_copy_tensor_fu_248_ap_done );

    SC_METHOD(thread_ap_block_state8_on_subcall_done);
    sensitive << ( grp_copy_tensor_1_fu_225_ap_done );
    sensitive << ( grp_forward_ReLu_fu_275_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_copy_tensor_2_fu_258_ap_done );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_copy_tensor_2_fu_258_ap_done );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_conv1_input_data_V_address0);
    sensitive << ( grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 );
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_conv1_input_data_V_ce0);
    sensitive << ( grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 );
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_conv1_input_data_V_we0);
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_conv1_output_data_V_address0);
    sensitive << ( grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0 );
    sensitive << ( grp_copy_tensor_1_fu_225_in2_V_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_conv1_output_data_V_ce0);
    sensitive << ( grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0 );
    sensitive << ( grp_copy_tensor_1_fu_225_in2_V_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_conv1_output_data_V_we0);
    sensitive << ( grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_conv_data_V_ce0);
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_conv_data_V_we0);
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_we0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_data_in_data_V_ce0);
    sensitive << ( grp_copy_tensor_1_fu_225_in2_V_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_fc1_input_data_V_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_address0 );
    sensitive << ( grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_fc1_input_data_V_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_ce0 );
    sensitive << ( grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_fc1_input_data_V_we0);
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_we0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_fx_input_data_V_address0);
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_address0 );
    sensitive << ( grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_fx_input_data_V_ce0);
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_ce0 );
    sensitive << ( grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_fx_input_data_V_we0);
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_fx_output_data_V_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_copy_tensor_1_fu_225_in2_V_address0 );
    sensitive << ( grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_fx_output_data_V_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_copy_tensor_1_fu_225_in2_V_ce0 );
    sensitive << ( grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_fx_output_data_V_we0);
    sensitive << ( grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_Conv_forward_fu_216_ap_start);
    sensitive << ( grp_Conv_forward_fu_216_ap_start_reg );

    SC_METHOD(thread_grp_copy_tensor_1_fu_225_ap_start);
    sensitive << ( grp_copy_tensor_1_fu_225_ap_start_reg );

    SC_METHOD(thread_grp_copy_tensor_1_fu_225_in2_V_q0);
    sensitive << ( data_in_data_V_q0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( conv1_output_data_V_q0 );
    sensitive << ( fx_output_data_V_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_copy_tensor_1_fu_225_size1_x);
    sensitive << ( conv_size_x_read_reg_344 );
    sensitive << ( relu_size_x_read_reg_354 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_copy_tensor_1_fu_225_size1_y);
    sensitive << ( conv_size_y_read_reg_349 );
    sensitive << ( relu_size_y_read_reg_359 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_copy_tensor_1_fu_225_size2_x);
    sensitive << ( data_in_size_x_read_reg_319 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_copy_tensor_1_fu_225_size2_y);
    sensitive << ( data_in_size_y_read_reg_324 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_copy_tensor_1_fu_225_size2_z);
    sensitive << ( data_in_size_z_read_reg_329 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_copy_tensor_2_fu_258_ap_start);
    sensitive << ( grp_copy_tensor_2_fu_258_ap_start_reg );

    SC_METHOD(thread_grp_copy_tensor_3_fu_281_ap_start);
    sensitive << ( grp_copy_tensor_3_fu_281_ap_start_reg );

    SC_METHOD(thread_grp_copy_tensor_fu_248_ap_start);
    sensitive << ( grp_copy_tensor_fu_248_ap_start_reg );

    SC_METHOD(thread_grp_forward_ReLu_fu_275_ap_start);
    sensitive << ( grp_forward_ReLu_fu_275_ap_start_reg );

    SC_METHOD(thread_grp_forward_fc_fu_268_ap_start);
    sensitive << ( grp_forward_fc_fu_268_ap_start_reg );

    SC_METHOD(thread_grp_softmax_fu_204_ap_start);
    sensitive << ( grp_softmax_fu_204_ap_start_reg );

    SC_METHOD(thread_relu_data_V_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_ce0 );

    SC_METHOD(thread_relu_data_V_we0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_copy_tensor_1_fu_225_in1_V_we0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_copy_tensor_1_fu_225_ap_done );
    sensitive << ( ap_block_state12_on_subcall_done );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_block_state13_on_subcall_done );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( grp_softmax_fu_204_ap_done );
    sensitive << ( grp_Conv_forward_fu_216_ap_done );
    sensitive << ( grp_copy_tensor_2_fu_258_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_block_state8_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000001";
    grp_softmax_fu_204_ap_start_reg = SC_LOGIC_0;
    grp_Conv_forward_fu_216_ap_start_reg = SC_LOGIC_0;
    grp_copy_tensor_1_fu_225_ap_start_reg = SC_LOGIC_0;
    grp_copy_tensor_fu_248_ap_start_reg = SC_LOGIC_0;
    grp_copy_tensor_2_fu_258_ap_start_reg = SC_LOGIC_0;
    grp_forward_fc_fu_268_ap_start_reg = SC_LOGIC_0;
    grp_forward_ReLu_fu_275_ap_start_reg = SC_LOGIC_0;
    grp_copy_tensor_3_fu_281_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Lenet_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_axilite_AWVALID, "(port)s_axi_axilite_AWVALID");
    sc_trace(mVcdFile, s_axi_axilite_AWREADY, "(port)s_axi_axilite_AWREADY");
    sc_trace(mVcdFile, s_axi_axilite_AWADDR, "(port)s_axi_axilite_AWADDR");
    sc_trace(mVcdFile, s_axi_axilite_WVALID, "(port)s_axi_axilite_WVALID");
    sc_trace(mVcdFile, s_axi_axilite_WREADY, "(port)s_axi_axilite_WREADY");
    sc_trace(mVcdFile, s_axi_axilite_WDATA, "(port)s_axi_axilite_WDATA");
    sc_trace(mVcdFile, s_axi_axilite_WSTRB, "(port)s_axi_axilite_WSTRB");
    sc_trace(mVcdFile, s_axi_axilite_ARVALID, "(port)s_axi_axilite_ARVALID");
    sc_trace(mVcdFile, s_axi_axilite_ARREADY, "(port)s_axi_axilite_ARREADY");
    sc_trace(mVcdFile, s_axi_axilite_ARADDR, "(port)s_axi_axilite_ARADDR");
    sc_trace(mVcdFile, s_axi_axilite_RVALID, "(port)s_axi_axilite_RVALID");
    sc_trace(mVcdFile, s_axi_axilite_RREADY, "(port)s_axi_axilite_RREADY");
    sc_trace(mVcdFile, s_axi_axilite_RDATA, "(port)s_axi_axilite_RDATA");
    sc_trace(mVcdFile, s_axi_axilite_RRESP, "(port)s_axi_axilite_RRESP");
    sc_trace(mVcdFile, s_axi_axilite_BVALID, "(port)s_axi_axilite_BVALID");
    sc_trace(mVcdFile, s_axi_axilite_BREADY, "(port)s_axi_axilite_BREADY");
    sc_trace(mVcdFile, s_axi_axilite_BRESP, "(port)s_axi_axilite_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, data_in_data_V_ce0, "data_in_data_V_ce0");
    sc_trace(mVcdFile, data_in_data_V_q0, "data_in_data_V_q0");
    sc_trace(mVcdFile, data_in_size_x, "data_in_size_x");
    sc_trace(mVcdFile, data_in_size_y, "data_in_size_y");
    sc_trace(mVcdFile, data_in_size_z, "data_in_size_z");
    sc_trace(mVcdFile, conv_data_V_ce0, "conv_data_V_ce0");
    sc_trace(mVcdFile, conv_data_V_we0, "conv_data_V_we0");
    sc_trace(mVcdFile, conv_size_x, "conv_size_x");
    sc_trace(mVcdFile, conv_size_y, "conv_size_y");
    sc_trace(mVcdFile, conv_size_z, "conv_size_z");
    sc_trace(mVcdFile, relu_data_V_ce0, "relu_data_V_ce0");
    sc_trace(mVcdFile, relu_data_V_we0, "relu_data_V_we0");
    sc_trace(mVcdFile, relu_size_x, "relu_size_x");
    sc_trace(mVcdFile, relu_size_y, "relu_size_y");
    sc_trace(mVcdFile, relu_size_z, "relu_size_z");
    sc_trace(mVcdFile, pool_size_x, "pool_size_x");
    sc_trace(mVcdFile, pool_size_y, "pool_size_y");
    sc_trace(mVcdFile, pool_size_z, "pool_size_z");
    sc_trace(mVcdFile, fc_size_x, "fc_size_x");
    sc_trace(mVcdFile, fc_size_y, "fc_size_y");
    sc_trace(mVcdFile, fc_size_z, "fc_size_z");
    sc_trace(mVcdFile, data_out_size_x, "data_out_size_x");
    sc_trace(mVcdFile, data_out_size_y, "data_out_size_y");
    sc_trace(mVcdFile, data_out_size_z, "data_out_size_z");
    sc_trace(mVcdFile, data_in_size_x_read_reg_319, "data_in_size_x_read_reg_319");
    sc_trace(mVcdFile, data_in_size_y_read_reg_324, "data_in_size_y_read_reg_324");
    sc_trace(mVcdFile, data_in_size_z_read_reg_329, "data_in_size_z_read_reg_329");
    sc_trace(mVcdFile, data_out_size_x_read_reg_334, "data_out_size_x_read_reg_334");
    sc_trace(mVcdFile, data_out_size_y_read_reg_339, "data_out_size_y_read_reg_339");
    sc_trace(mVcdFile, conv_size_x_read_reg_344, "conv_size_x_read_reg_344");
    sc_trace(mVcdFile, conv_size_y_read_reg_349, "conv_size_y_read_reg_349");
    sc_trace(mVcdFile, relu_size_x_read_reg_354, "relu_size_x_read_reg_354");
    sc_trace(mVcdFile, relu_size_y_read_reg_359, "relu_size_y_read_reg_359");
    sc_trace(mVcdFile, fc_size_x_read_reg_364, "fc_size_x_read_reg_364");
    sc_trace(mVcdFile, fc_size_y_read_reg_369, "fc_size_y_read_reg_369");
    sc_trace(mVcdFile, fc1_output_data_0_V_reg_374, "fc1_output_data_0_V_reg_374");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_ap_idle, "grp_forward_fc_fu_268_ap_idle");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_ap_ready, "grp_forward_fc_fu_268_ap_ready");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_ap_done, "grp_forward_fc_fu_268_ap_done");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_ap_idle, "grp_copy_tensor_1_fu_225_ap_idle");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_ap_ready, "grp_copy_tensor_1_fu_225_ap_ready");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_ap_done, "grp_copy_tensor_1_fu_225_ap_done");
    sc_trace(mVcdFile, ap_block_state12_on_subcall_done, "ap_block_state12_on_subcall_done");
    sc_trace(mVcdFile, fc1_output_data_1_V_reg_380, "fc1_output_data_1_V_reg_380");
    sc_trace(mVcdFile, softmax_input_data_0_reg_386, "softmax_input_data_0_reg_386");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_copy_tensor_3_fu_281_ap_idle, "grp_copy_tensor_3_fu_281_ap_idle");
    sc_trace(mVcdFile, grp_copy_tensor_3_fu_281_ap_ready, "grp_copy_tensor_3_fu_281_ap_ready");
    sc_trace(mVcdFile, grp_copy_tensor_3_fu_281_ap_done, "grp_copy_tensor_3_fu_281_ap_done");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_ap_idle, "grp_copy_tensor_fu_248_ap_idle");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_ap_ready, "grp_copy_tensor_fu_248_ap_ready");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_ap_done, "grp_copy_tensor_fu_248_ap_done");
    sc_trace(mVcdFile, ap_block_state13_on_subcall_done, "ap_block_state13_on_subcall_done");
    sc_trace(mVcdFile, softmax_input_data_1_reg_391, "softmax_input_data_1_reg_391");
    sc_trace(mVcdFile, softmax_y_hat_data_0_reg_396, "softmax_y_hat_data_0_reg_396");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, grp_softmax_fu_204_ap_idle, "grp_softmax_fu_204_ap_idle");
    sc_trace(mVcdFile, grp_softmax_fu_204_ap_ready, "grp_softmax_fu_204_ap_ready");
    sc_trace(mVcdFile, grp_softmax_fu_204_ap_done, "grp_softmax_fu_204_ap_done");
    sc_trace(mVcdFile, softmax_y_hat_data_1_reg_401, "softmax_y_hat_data_1_reg_401");
    sc_trace(mVcdFile, conv1_input_data_V_address0, "conv1_input_data_V_address0");
    sc_trace(mVcdFile, conv1_input_data_V_ce0, "conv1_input_data_V_ce0");
    sc_trace(mVcdFile, conv1_input_data_V_we0, "conv1_input_data_V_we0");
    sc_trace(mVcdFile, conv1_input_data_V_q0, "conv1_input_data_V_q0");
    sc_trace(mVcdFile, conv1_output_data_V_address0, "conv1_output_data_V_address0");
    sc_trace(mVcdFile, conv1_output_data_V_ce0, "conv1_output_data_V_ce0");
    sc_trace(mVcdFile, conv1_output_data_V_we0, "conv1_output_data_V_we0");
    sc_trace(mVcdFile, conv1_output_data_V_q0, "conv1_output_data_V_q0");
    sc_trace(mVcdFile, conv1_a_slice_pad_da_q0, "conv1_a_slice_pad_da_q0");
    sc_trace(mVcdFile, fx_input_data_V_address0, "fx_input_data_V_address0");
    sc_trace(mVcdFile, fx_input_data_V_ce0, "fx_input_data_V_ce0");
    sc_trace(mVcdFile, fx_input_data_V_we0, "fx_input_data_V_we0");
    sc_trace(mVcdFile, fx_input_data_V_q0, "fx_input_data_V_q0");
    sc_trace(mVcdFile, fx_output_data_V_address0, "fx_output_data_V_address0");
    sc_trace(mVcdFile, fx_output_data_V_ce0, "fx_output_data_V_ce0");
    sc_trace(mVcdFile, fx_output_data_V_we0, "fx_output_data_V_we0");
    sc_trace(mVcdFile, fx_output_data_V_q0, "fx_output_data_V_q0");
    sc_trace(mVcdFile, fc1_input_data_V_address0, "fc1_input_data_V_address0");
    sc_trace(mVcdFile, fc1_input_data_V_ce0, "fc1_input_data_V_ce0");
    sc_trace(mVcdFile, fc1_input_data_V_we0, "fc1_input_data_V_we0");
    sc_trace(mVcdFile, fc1_input_data_V_q0, "fc1_input_data_V_q0");
    sc_trace(mVcdFile, grp_softmax_fu_204_ap_start, "grp_softmax_fu_204_ap_start");
    sc_trace(mVcdFile, grp_softmax_fu_204_ap_return_0, "grp_softmax_fu_204_ap_return_0");
    sc_trace(mVcdFile, grp_softmax_fu_204_ap_return_1, "grp_softmax_fu_204_ap_return_1");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_ap_start, "grp_Conv_forward_fu_216_ap_start");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_ap_done, "grp_Conv_forward_fu_216_ap_done");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_ap_idle, "grp_Conv_forward_fu_216_ap_idle");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_ap_ready, "grp_Conv_forward_fu_216_ap_ready");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0, "grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_ap_start, "grp_copy_tensor_1_fu_225_ap_start");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_in1_V_address0, "grp_copy_tensor_1_fu_225_in1_V_address0");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_in1_V_ce0, "grp_copy_tensor_1_fu_225_in1_V_ce0");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_in1_V_we0, "grp_copy_tensor_1_fu_225_in1_V_we0");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_in1_V_d0, "grp_copy_tensor_1_fu_225_in1_V_d0");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_in2_V_address0, "grp_copy_tensor_1_fu_225_in2_V_address0");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_in2_V_ce0, "grp_copy_tensor_1_fu_225_in2_V_ce0");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_in2_V_q0, "grp_copy_tensor_1_fu_225_in2_V_q0");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_size1_x, "grp_copy_tensor_1_fu_225_size1_x");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_size1_y, "grp_copy_tensor_1_fu_225_size1_y");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_size2_x, "grp_copy_tensor_1_fu_225_size2_x");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_size2_y, "grp_copy_tensor_1_fu_225_size2_y");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_size2_z, "grp_copy_tensor_1_fu_225_size2_z");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_ap_start, "grp_copy_tensor_fu_248_ap_start");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_in1_V_address0, "grp_copy_tensor_fu_248_in1_V_address0");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_in1_V_ce0, "grp_copy_tensor_fu_248_in1_V_ce0");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_in1_V_we0, "grp_copy_tensor_fu_248_in1_V_we0");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_in1_V_d0, "grp_copy_tensor_fu_248_in1_V_d0");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_ap_start, "grp_copy_tensor_2_fu_258_ap_start");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_ap_done, "grp_copy_tensor_2_fu_258_ap_done");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_ap_idle, "grp_copy_tensor_2_fu_258_ap_idle");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_ap_ready, "grp_copy_tensor_2_fu_258_ap_ready");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_in1_V_address0, "grp_copy_tensor_2_fu_258_in1_V_address0");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_in1_V_ce0, "grp_copy_tensor_2_fu_258_in1_V_ce0");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_in1_V_we0, "grp_copy_tensor_2_fu_258_in1_V_we0");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_in1_V_d0, "grp_copy_tensor_2_fu_258_in1_V_d0");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_ap_start, "grp_forward_fc_fu_268_ap_start");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0, "grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0, "grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_ap_return_0, "grp_forward_fc_fu_268_ap_return_0");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_ap_return_1, "grp_forward_fc_fu_268_ap_return_1");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_ap_start, "grp_forward_ReLu_fu_275_ap_start");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_ap_done, "grp_forward_ReLu_fu_275_ap_done");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_ap_idle, "grp_forward_ReLu_fu_275_ap_idle");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_ap_ready, "grp_forward_ReLu_fu_275_ap_ready");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0, "grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0, "grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0, "grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0, "grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0, "grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0, "grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0");
    sc_trace(mVcdFile, grp_copy_tensor_3_fu_281_ap_start, "grp_copy_tensor_3_fu_281_ap_start");
    sc_trace(mVcdFile, grp_copy_tensor_3_fu_281_ap_return_0, "grp_copy_tensor_3_fu_281_ap_return_0");
    sc_trace(mVcdFile, grp_copy_tensor_3_fu_281_ap_return_1, "grp_copy_tensor_3_fu_281_ap_return_1");
    sc_trace(mVcdFile, grp_softmax_fu_204_ap_start_reg, "grp_softmax_fu_204_ap_start_reg");
    sc_trace(mVcdFile, grp_Conv_forward_fu_216_ap_start_reg, "grp_Conv_forward_fu_216_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_copy_tensor_1_fu_225_ap_start_reg, "grp_copy_tensor_1_fu_225_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_copy_tensor_fu_248_ap_start_reg, "grp_copy_tensor_fu_248_ap_start_reg");
    sc_trace(mVcdFile, grp_copy_tensor_2_fu_258_ap_start_reg, "grp_copy_tensor_2_fu_258_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_forward_fc_fu_268_ap_start_reg, "grp_forward_fc_fu_268_ap_start_reg");
    sc_trace(mVcdFile, grp_forward_ReLu_fu_275_ap_start_reg, "grp_forward_ReLu_fu_275_ap_start_reg");
    sc_trace(mVcdFile, grp_copy_tensor_3_fu_281_ap_start_reg, "grp_copy_tensor_3_fu_281_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state8_on_subcall_done, "ap_block_state8_on_subcall_done");
#endif

    }
    mHdltvinHandle.open("Lenet.hdltvin.dat");
    mHdltvoutHandle.open("Lenet.hdltvout.dat");
}

Lenet::~Lenet() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Lenet_axilite_s_axi_U;
    delete conv1_input_data_V_U;
    delete conv1_output_data_V_U;
    delete conv1_a_slice_pad_da_U;
    delete fx_input_data_V_U;
    delete fx_output_data_V_U;
    delete fc1_input_data_V_U;
    delete grp_softmax_fu_204;
    delete grp_Conv_forward_fu_216;
    delete grp_copy_tensor_1_fu_225;
    delete grp_copy_tensor_fu_248;
    delete grp_copy_tensor_2_fu_258;
    delete grp_forward_fc_fu_268;
    delete grp_forward_ReLu_fu_275;
    delete grp_copy_tensor_3_fu_281;
}

void Lenet::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Lenet::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_Conv_forward_fu_216_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_Conv_forward_fu_216_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Conv_forward_fu_216_ap_ready.read())) {
            grp_Conv_forward_fu_216_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_copy_tensor_1_fu_225_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
            grp_copy_tensor_1_fu_225_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_copy_tensor_1_fu_225_ap_ready.read())) {
            grp_copy_tensor_1_fu_225_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_copy_tensor_2_fu_258_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(grp_softmax_fu_204_ap_done.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
            grp_copy_tensor_2_fu_258_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_copy_tensor_2_fu_258_ap_ready.read())) {
            grp_copy_tensor_2_fu_258_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_copy_tensor_3_fu_281_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state12_on_subcall_done.read()))) {
            grp_copy_tensor_3_fu_281_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_copy_tensor_3_fu_281_ap_ready.read())) {
            grp_copy_tensor_3_fu_281_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_copy_tensor_fu_248_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state12_on_subcall_done.read()))) {
            grp_copy_tensor_fu_248_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_copy_tensor_fu_248_ap_ready.read())) {
            grp_copy_tensor_fu_248_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_forward_ReLu_fu_275_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            grp_forward_ReLu_fu_275_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_forward_ReLu_fu_275_ap_ready.read())) {
            grp_forward_ReLu_fu_275_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_forward_fc_fu_268_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            grp_forward_fc_fu_268_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_forward_fc_fu_268_ap_ready.read())) {
            grp_forward_fc_fu_268_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_softmax_fu_204_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state13_on_subcall_done.read()))) {
            grp_softmax_fu_204_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_softmax_fu_204_ap_ready.read())) {
            grp_softmax_fu_204_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        conv_size_x_read_reg_344 = conv_size_x.read();
        conv_size_y_read_reg_349 = conv_size_y.read();
        data_in_size_x_read_reg_319 = data_in_size_x.read();
        data_in_size_y_read_reg_324 = data_in_size_y.read();
        data_in_size_z_read_reg_329 = data_in_size_z.read();
        data_out_size_x_read_reg_334 = data_out_size_x.read();
        data_out_size_y_read_reg_339 = data_out_size_y.read();
        fc_size_x_read_reg_364 = fc_size_x.read();
        fc_size_y_read_reg_369 = fc_size_y.read();
        relu_size_x_read_reg_354 = relu_size_x.read();
        relu_size_y_read_reg_359 = relu_size_y.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state12_on_subcall_done.read()))) {
        fc1_output_data_0_V_reg_374 = grp_forward_fc_fu_268_ap_return_0.read();
        fc1_output_data_1_V_reg_380 = grp_forward_fc_fu_268_ap_return_1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state13_on_subcall_done.read()))) {
        softmax_input_data_0_reg_386 = grp_copy_tensor_3_fu_281_ap_return_0.read();
        softmax_input_data_1_reg_391 = grp_copy_tensor_3_fu_281_ap_return_1.read();
    }
    if ((esl_seteq<1,1,1>(grp_softmax_fu_204_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        softmax_y_hat_data_0_reg_396 = grp_softmax_fu_204_ap_return_0.read();
        softmax_y_hat_data_1_reg_401 = grp_softmax_fu_204_ap_return_1.read();
    }
}

void Lenet::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Lenet::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Lenet::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Lenet::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Lenet::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Lenet::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Lenet::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Lenet::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Lenet::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Lenet::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Lenet::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Lenet::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Lenet::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Lenet::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Lenet::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Lenet::thread_ap_block_state12_on_subcall_done() {
    ap_block_state12_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_forward_fc_fu_268_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_copy_tensor_1_fu_225_ap_done.read()));
}

void Lenet::thread_ap_block_state13_on_subcall_done() {
    ap_block_state13_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_copy_tensor_3_fu_281_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_copy_tensor_fu_248_ap_done.read()));
}

void Lenet::thread_ap_block_state8_on_subcall_done() {
    ap_block_state8_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_copy_tensor_1_fu_225_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_forward_ReLu_fu_275_ap_done.read()));
}

void Lenet::thread_ap_done() {
    if ((esl_seteq<1,1,1>(grp_copy_tensor_2_fu_258_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Lenet::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Lenet::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(grp_copy_tensor_2_fu_258_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Lenet::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Lenet::thread_conv1_input_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        conv1_input_data_V_address0 = grp_copy_tensor_1_fu_225_in1_V_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        conv1_input_data_V_address0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0.read();
    } else {
        conv1_input_data_V_address0 = "XXX";
    }
}

void Lenet::thread_conv1_input_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        conv1_input_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        conv1_input_data_V_ce0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0.read();
    } else {
        conv1_input_data_V_ce0 = ap_const_logic_0;
    }
}

void Lenet::thread_conv1_input_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        conv1_input_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0.read();
    } else {
        conv1_input_data_V_we0 = ap_const_logic_0;
    }
}

void Lenet::thread_conv1_output_data_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        conv1_output_data_V_address0 = grp_copy_tensor_1_fu_225_in2_V_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        conv1_output_data_V_address0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0.read();
    } else {
        conv1_output_data_V_address0 = "XXX";
    }
}

void Lenet::thread_conv1_output_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        conv1_output_data_V_ce0 = grp_copy_tensor_1_fu_225_in2_V_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        conv1_output_data_V_ce0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0.read();
    } else {
        conv1_output_data_V_ce0 = ap_const_logic_0;
    }
}

void Lenet::thread_conv1_output_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        conv1_output_data_V_we0 = grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0.read();
    } else {
        conv1_output_data_V_we0 = ap_const_logic_0;
    }
}

void Lenet::thread_conv_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        conv_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0.read();
    } else {
        conv_data_V_ce0 = ap_const_logic_0;
    }
}

void Lenet::thread_conv_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        conv_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0.read();
    } else {
        conv_data_V_we0 = ap_const_logic_0;
    }
}

void Lenet::thread_data_in_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_in_data_V_ce0 = grp_copy_tensor_1_fu_225_in2_V_ce0.read();
    } else {
        data_in_data_V_ce0 = ap_const_logic_0;
    }
}

void Lenet::thread_fc1_input_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        fc1_input_data_V_address0 = grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        fc1_input_data_V_address0 = grp_copy_tensor_1_fu_225_in1_V_address0.read();
    } else {
        fc1_input_data_V_address0 = "XXX";
    }
}

void Lenet::thread_fc1_input_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        fc1_input_data_V_ce0 = grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        fc1_input_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0.read();
    } else {
        fc1_input_data_V_ce0 = ap_const_logic_0;
    }
}

void Lenet::thread_fc1_input_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        fc1_input_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0.read();
    } else {
        fc1_input_data_V_we0 = ap_const_logic_0;
    }
}

void Lenet::thread_fx_input_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        fx_input_data_V_address0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        fx_input_data_V_address0 = grp_copy_tensor_1_fu_225_in1_V_address0.read();
    } else {
        fx_input_data_V_address0 = "XXX";
    }
}

void Lenet::thread_fx_input_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        fx_input_data_V_ce0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        fx_input_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0.read();
    } else {
        fx_input_data_V_ce0 = ap_const_logic_0;
    }
}

void Lenet::thread_fx_input_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        fx_input_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0.read();
    } else {
        fx_input_data_V_we0 = ap_const_logic_0;
    }
}

void Lenet::thread_fx_output_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        fx_output_data_V_address0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        fx_output_data_V_address0 = grp_copy_tensor_1_fu_225_in2_V_address0.read();
    } else {
        fx_output_data_V_address0 = "XXX";
    }
}

void Lenet::thread_fx_output_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        fx_output_data_V_ce0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        fx_output_data_V_ce0 = grp_copy_tensor_1_fu_225_in2_V_ce0.read();
    } else {
        fx_output_data_V_ce0 = ap_const_logic_0;
    }
}

void Lenet::thread_fx_output_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        fx_output_data_V_we0 = grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0.read();
    } else {
        fx_output_data_V_we0 = ap_const_logic_0;
    }
}

void Lenet::thread_grp_Conv_forward_fu_216_ap_start() {
    grp_Conv_forward_fu_216_ap_start = grp_Conv_forward_fu_216_ap_start_reg.read();
}

void Lenet::thread_grp_copy_tensor_1_fu_225_ap_start() {
    grp_copy_tensor_1_fu_225_ap_start = grp_copy_tensor_1_fu_225_ap_start_reg.read();
}

void Lenet::thread_grp_copy_tensor_1_fu_225_in2_V_q0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_copy_tensor_1_fu_225_in2_V_q0 = fx_output_data_V_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        grp_copy_tensor_1_fu_225_in2_V_q0 = conv1_output_data_V_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_copy_tensor_1_fu_225_in2_V_q0 = data_in_data_V_q0.read();
    } else {
        grp_copy_tensor_1_fu_225_in2_V_q0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void Lenet::thread_grp_copy_tensor_1_fu_225_size1_x() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_copy_tensor_1_fu_225_size1_x = relu_size_x_read_reg_354.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_copy_tensor_1_fu_225_size1_x = conv_size_x_read_reg_344.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_copy_tensor_1_fu_225_size1_x = ap_const_lv32_2;
    } else {
        grp_copy_tensor_1_fu_225_size1_x =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Lenet::thread_grp_copy_tensor_1_fu_225_size1_y() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_copy_tensor_1_fu_225_size1_y = relu_size_y_read_reg_359.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_copy_tensor_1_fu_225_size1_y = conv_size_y_read_reg_349.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_copy_tensor_1_fu_225_size1_y = ap_const_lv32_2;
    } else {
        grp_copy_tensor_1_fu_225_size1_y =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Lenet::thread_grp_copy_tensor_1_fu_225_size2_x() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_copy_tensor_1_fu_225_size2_x = ap_const_lv32_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_copy_tensor_1_fu_225_size2_x = data_in_size_x_read_reg_319.read();
    } else {
        grp_copy_tensor_1_fu_225_size2_x =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Lenet::thread_grp_copy_tensor_1_fu_225_size2_y() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_copy_tensor_1_fu_225_size2_y = ap_const_lv32_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_copy_tensor_1_fu_225_size2_y = data_in_size_y_read_reg_324.read();
    } else {
        grp_copy_tensor_1_fu_225_size2_y =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Lenet::thread_grp_copy_tensor_1_fu_225_size2_z() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_copy_tensor_1_fu_225_size2_z = ap_const_lv32_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_copy_tensor_1_fu_225_size2_z = data_in_size_z_read_reg_329.read();
    } else {
        grp_copy_tensor_1_fu_225_size2_z =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Lenet::thread_grp_copy_tensor_2_fu_258_ap_start() {
    grp_copy_tensor_2_fu_258_ap_start = grp_copy_tensor_2_fu_258_ap_start_reg.read();
}

void Lenet::thread_grp_copy_tensor_3_fu_281_ap_start() {
    grp_copy_tensor_3_fu_281_ap_start = grp_copy_tensor_3_fu_281_ap_start_reg.read();
}

void Lenet::thread_grp_copy_tensor_fu_248_ap_start() {
    grp_copy_tensor_fu_248_ap_start = grp_copy_tensor_fu_248_ap_start_reg.read();
}

void Lenet::thread_grp_forward_ReLu_fu_275_ap_start() {
    grp_forward_ReLu_fu_275_ap_start = grp_forward_ReLu_fu_275_ap_start_reg.read();
}

void Lenet::thread_grp_forward_fc_fu_268_ap_start() {
    grp_forward_fc_fu_268_ap_start = grp_forward_fc_fu_268_ap_start_reg.read();
}

void Lenet::thread_grp_softmax_fu_204_ap_start() {
    grp_softmax_fu_204_ap_start = grp_softmax_fu_204_ap_start_reg.read();
}

void Lenet::thread_relu_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        relu_data_V_ce0 = grp_copy_tensor_1_fu_225_in1_V_ce0.read();
    } else {
        relu_data_V_ce0 = ap_const_logic_0;
    }
}

void Lenet::thread_relu_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        relu_data_V_we0 = grp_copy_tensor_1_fu_225_in1_V_we0.read();
    } else {
        relu_data_V_we0 = ap_const_logic_0;
    }
}

void Lenet::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_copy_tensor_1_fu_225_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(grp_Conv_forward_fu_216_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_copy_tensor_1_fu_225_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state8_on_subcall_done.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_copy_tensor_1_fu_225_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state12_on_subcall_done.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state13_on_subcall_done.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(grp_softmax_fu_204_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(grp_copy_tensor_2_fu_258_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<15>) ("XXXXXXXXXXXXXXX");
            break;
    }
}

void Lenet::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_AWVALID\" :  \"" << s_axi_axilite_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_axilite_AWREADY\" :  \"" << s_axi_axilite_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_AWADDR\" :  \"" << s_axi_axilite_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_WVALID\" :  \"" << s_axi_axilite_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_axilite_WREADY\" :  \"" << s_axi_axilite_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_WDATA\" :  \"" << s_axi_axilite_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_WSTRB\" :  \"" << s_axi_axilite_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_ARVALID\" :  \"" << s_axi_axilite_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_axilite_ARREADY\" :  \"" << s_axi_axilite_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_ARADDR\" :  \"" << s_axi_axilite_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_axilite_RVALID\" :  \"" << s_axi_axilite_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_RREADY\" :  \"" << s_axi_axilite_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_axilite_RDATA\" :  \"" << s_axi_axilite_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_axilite_RRESP\" :  \"" << s_axi_axilite_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_axilite_BVALID\" :  \"" << s_axi_axilite_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_axilite_BREADY\" :  \"" << s_axi_axilite_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_axilite_BRESP\" :  \"" << s_axi_axilite_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

