// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        classifier_1_1_2_input_data_0_V_read,
        classifier_1_1_2_input_data_1_V_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] classifier_1_1_2_input_data_0_V_read;
input  [15:0] classifier_1_1_2_input_data_1_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] filter_fu_143_p2;
wire    ap_CS_fsm_state2;
wire   [15:0] max_value_V_1_phi_s_fu_165_p3;
wire   [0:0] exitcond5_fu_137_p2;
wire   [1:0] filter_1_fu_179_p2;
reg   [1:0] filter_1_reg_314;
wire    ap_CS_fsm_state3;
wire  signed [23:0] tmp_105_tr_cast_fu_185_p1;
reg  signed [23:0] tmp_105_tr_cast_reg_319;
wire   [0:0] exitcond6_fu_173_p2;
wire   [15:0] sum_exp_z_V_fu_206_p2;
wire    ap_CS_fsm_state9;
wire   [1:0] filter_2_fu_218_p2;
reg   [1:0] filter_2_reg_332;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_4_fu_224_p1;
reg   [0:0] tmp_4_reg_337;
wire   [0:0] exitcond_fu_212_p2;
wire   [15:0] in_V_1_fu_234_p2;
reg   [15:0] in_V_1_reg_343;
wire    ap_CS_fsm_state16;
wire   [15:0] classifier_y_hat_dat_3_fu_269_p3;
wire    ap_CS_fsm_state43;
wire   [15:0] classifier_y_hat_dat_4_fu_276_p3;
wire    grp_exp_16_8_s_fu_126_ap_start;
wire    grp_exp_16_8_s_fu_126_ap_done;
wire    grp_exp_16_8_s_fu_126_ap_idle;
wire    grp_exp_16_8_s_fu_126_ap_ready;
reg   [15:0] grp_exp_16_8_s_fu_126_x_V;
wire   [15:0] grp_exp_16_8_s_fu_126_ap_return;
reg   [15:0] p_Val2_1_reg_46;
reg   [1:0] p_z_assign_reg_56;
reg  signed [15:0] p_Val2_2_reg_67;
reg   [1:0] p_z_assign_3_reg_79;
reg   [15:0] classifier_y_hat_dat_reg_91;
reg   [15:0] classifier_y_hat_dat_1_reg_103;
reg   [1:0] p_z_assign_4_reg_115;
reg    grp_exp_16_8_s_fu_126_ap_start_reg;
reg   [42:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    ap_NS_fsm_state11;
wire   [15:0] in_V_fu_199_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_2_fu_149_p1;
wire   [15:0] max_value_V_fu_153_p3;
wire   [0:0] tmp_s_fu_159_p2;
wire   [0:0] tmp_3_fu_189_p1;
wire   [15:0] p_Val2_s_fu_193_p3;
wire   [15:0] p_Val2_4_fu_228_p3;
wire   [23:0] grp_fu_260_p0;
wire  signed [15:0] grp_fu_260_p1;
wire   [15:0] grp_fu_260_p2;
wire   [15:0] tmp_5_fu_265_p1;
reg    grp_fu_260_ap_start;
wire    grp_fu_260_ap_done;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
#0 grp_exp_16_8_s_fu_126_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
end

exp_16_8_s grp_exp_16_8_s_fu_126(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_16_8_s_fu_126_ap_start),
    .ap_done(grp_exp_16_8_s_fu_126_ap_done),
    .ap_idle(grp_exp_16_8_s_fu_126_ap_idle),
    .ap_ready(grp_exp_16_8_s_fu_126_ap_ready),
    .ap_ce(1'b1),
    .x_V(grp_exp_16_8_s_fu_126_x_V),
    .ap_return(grp_exp_16_8_s_fu_126_ap_return)
);

Lenet_sdiv_24ns_1ibs #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
Lenet_sdiv_24ns_1ibs_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_260_ap_start),
    .done(grp_fu_260_ap_done),
    .din0(grp_fu_260_p0),
    .din1(grp_fu_260_p1),
    .ce(1'b1),
    .dout(grp_fu_260_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if (((exitcond_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_return_0_preg <= classifier_y_hat_dat_reg_91;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 16'd0;
    end else begin
        if (((exitcond_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_return_1_preg <= classifier_y_hat_dat_1_reg_103;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_16_8_s_fu_126_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_NS_fsm_state4)) | ((1'b1 == ap_NS_fsm_state11) & (1'b1 == ap_CS_fsm_state10)))) begin
            grp_exp_16_8_s_fu_126_ap_start_reg <= 1'b1;
        end else if ((grp_exp_16_8_s_fu_126_ap_ready == 1'b1)) begin
            grp_exp_16_8_s_fu_126_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_1_reg_46 <= max_value_V_1_phi_s_fu_165_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_1_reg_46 <= classifier_1_1_2_input_data_0_V_read;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_2_reg_67 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_2_reg_67 <= sum_exp_z_V_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_z_assign_3_reg_79 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_z_assign_3_reg_79 <= filter_1_reg_314;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_z_assign_4_reg_115 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        p_z_assign_4_reg_115 <= filter_2_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_z_assign_reg_56 <= filter_fu_143_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_z_assign_reg_56 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        classifier_y_hat_dat_1_reg_103 <= classifier_y_hat_dat_4_fu_276_p3;
        classifier_y_hat_dat_reg_91 <= classifier_y_hat_dat_3_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        filter_1_reg_314 <= filter_1_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        filter_2_reg_332 <= filter_2_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        in_V_1_reg_343 <= in_V_1_fu_234_p2;
        tmp_4_reg_337 <= tmp_4_fu_224_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_105_tr_cast_reg_319 <= tmp_105_tr_cast_fu_185_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_return_0 = classifier_y_hat_dat_reg_91;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((exitcond_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_return_1 = classifier_y_hat_dat_1_reg_103;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_exp_16_8_s_fu_126_x_V = in_V_1_reg_343;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_exp_16_8_s_fu_126_x_V = in_V_fu_199_p2;
    end else begin
        grp_exp_16_8_s_fu_126_x_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_260_ap_start = 1'b1;
    end else begin
        grp_fu_260_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond6_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            if (((exitcond_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state11 = ap_NS_fsm[32'd10];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

assign classifier_y_hat_dat_3_fu_269_p3 = ((tmp_4_reg_337[0:0] === 1'b1) ? classifier_y_hat_dat_reg_91 : tmp_5_fu_265_p1);

assign classifier_y_hat_dat_4_fu_276_p3 = ((tmp_4_reg_337[0:0] === 1'b1) ? tmp_5_fu_265_p1 : classifier_y_hat_dat_1_reg_103);

assign exitcond5_fu_137_p2 = ((p_z_assign_reg_56 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond6_fu_173_p2 = ((p_z_assign_3_reg_79 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_212_p2 = ((p_z_assign_4_reg_115 == 2'd2) ? 1'b1 : 1'b0);

assign filter_1_fu_179_p2 = (p_z_assign_3_reg_79 + 2'd1);

assign filter_2_fu_218_p2 = (p_z_assign_4_reg_115 + 2'd1);

assign filter_fu_143_p2 = (p_z_assign_reg_56 + 2'd1);

assign grp_exp_16_8_s_fu_126_ap_start = grp_exp_16_8_s_fu_126_ap_start_reg;

assign grp_fu_260_p0 = {{grp_exp_16_8_s_fu_126_ap_return}, {8'd0}};

assign grp_fu_260_p1 = tmp_105_tr_cast_reg_319;

assign in_V_1_fu_234_p2 = (p_Val2_4_fu_228_p3 - p_Val2_1_reg_46);

assign in_V_fu_199_p2 = (p_Val2_s_fu_193_p3 - p_Val2_1_reg_46);

assign max_value_V_1_phi_s_fu_165_p3 = ((tmp_s_fu_159_p2[0:0] === 1'b1) ? max_value_V_fu_153_p3 : p_Val2_1_reg_46);

assign max_value_V_fu_153_p3 = ((tmp_2_fu_149_p1[0:0] === 1'b1) ? classifier_1_1_2_input_data_1_V_read : classifier_1_1_2_input_data_0_V_read);

assign p_Val2_4_fu_228_p3 = ((tmp_4_fu_224_p1[0:0] === 1'b1) ? classifier_1_1_2_input_data_1_V_read : classifier_1_1_2_input_data_0_V_read);

assign p_Val2_s_fu_193_p3 = ((tmp_3_fu_189_p1[0:0] === 1'b1) ? classifier_1_1_2_input_data_1_V_read : classifier_1_1_2_input_data_0_V_read);

assign sum_exp_z_V_fu_206_p2 = ($signed(grp_exp_16_8_s_fu_126_ap_return) + $signed(p_Val2_2_reg_67));

assign tmp_105_tr_cast_fu_185_p1 = p_Val2_2_reg_67;

assign tmp_2_fu_149_p1 = p_z_assign_reg_56[0:0];

assign tmp_3_fu_189_p1 = p_z_assign_3_reg_79[0:0];

assign tmp_4_fu_224_p1 = p_z_assign_4_reg_115[0:0];

assign tmp_5_fu_265_p1 = grp_fu_260_p2[15:0];

assign tmp_s_fu_159_p2 = (($signed(max_value_V_fu_153_p3) > $signed(p_Val2_1_reg_46)) ? 1'b1 : 1'b0);

endmodule //softmax
