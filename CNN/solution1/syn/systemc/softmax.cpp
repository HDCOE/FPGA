// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "softmax.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic softmax::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic softmax::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<43> softmax::ap_ST_fsm_state1 = "1";
const sc_lv<43> softmax::ap_ST_fsm_state2 = "10";
const sc_lv<43> softmax::ap_ST_fsm_state3 = "100";
const sc_lv<43> softmax::ap_ST_fsm_state4 = "1000";
const sc_lv<43> softmax::ap_ST_fsm_state5 = "10000";
const sc_lv<43> softmax::ap_ST_fsm_state6 = "100000";
const sc_lv<43> softmax::ap_ST_fsm_state7 = "1000000";
const sc_lv<43> softmax::ap_ST_fsm_state8 = "10000000";
const sc_lv<43> softmax::ap_ST_fsm_state9 = "100000000";
const sc_lv<43> softmax::ap_ST_fsm_state10 = "1000000000";
const sc_lv<43> softmax::ap_ST_fsm_state11 = "10000000000";
const sc_lv<43> softmax::ap_ST_fsm_state12 = "100000000000";
const sc_lv<43> softmax::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<43> softmax::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<32> softmax::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> softmax::ap_const_lv32_1 = "1";
const sc_lv<1> softmax::ap_const_lv1_0 = "0";
const sc_lv<32> softmax::ap_const_lv32_2 = "10";
const sc_lv<1> softmax::ap_const_lv1_1 = "1";
const sc_lv<32> softmax::ap_const_lv32_8 = "1000";
const sc_lv<32> softmax::ap_const_lv32_9 = "1001";
const sc_lv<32> softmax::ap_const_lv32_F = "1111";
const sc_lv<32> softmax::ap_const_lv32_2A = "101010";
const sc_lv<2> softmax::ap_const_lv2_0 = "00";
const sc_lv<16> softmax::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> softmax::ap_const_lv32_3 = "11";
const sc_lv<32> softmax::ap_const_lv32_A = "1010";
const sc_lv<2> softmax::ap_const_lv2_2 = "10";
const sc_lv<2> softmax::ap_const_lv2_1 = "1";
const sc_lv<8> softmax::ap_const_lv8_0 = "00000000";
const bool softmax::ap_const_boolean_1 = true;

softmax::softmax(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_exp_16_8_s_fu_126 = new exp_16_8_s("grp_exp_16_8_s_fu_126");
    grp_exp_16_8_s_fu_126->ap_clk(ap_clk);
    grp_exp_16_8_s_fu_126->ap_rst(ap_rst);
    grp_exp_16_8_s_fu_126->ap_start(grp_exp_16_8_s_fu_126_ap_start);
    grp_exp_16_8_s_fu_126->ap_done(grp_exp_16_8_s_fu_126_ap_done);
    grp_exp_16_8_s_fu_126->ap_idle(grp_exp_16_8_s_fu_126_ap_idle);
    grp_exp_16_8_s_fu_126->ap_ready(grp_exp_16_8_s_fu_126_ap_ready);
    grp_exp_16_8_s_fu_126->ap_ce(ap_var_for_const0);
    grp_exp_16_8_s_fu_126->x_V(grp_exp_16_8_s_fu_126_x_V);
    grp_exp_16_8_s_fu_126->ap_return(grp_exp_16_8_s_fu_126_ap_return);
    Lenet_sdiv_24ns_1ibs_U27 = new Lenet_sdiv_24ns_1ibs<1,28,24,16,16>("Lenet_sdiv_24ns_1ibs_U27");
    Lenet_sdiv_24ns_1ibs_U27->clk(ap_clk);
    Lenet_sdiv_24ns_1ibs_U27->reset(ap_rst);
    Lenet_sdiv_24ns_1ibs_U27->start(grp_fu_260_ap_start);
    Lenet_sdiv_24ns_1ibs_U27->done(grp_fu_260_ap_done);
    Lenet_sdiv_24ns_1ibs_U27->din0(grp_fu_260_p0);
    Lenet_sdiv_24ns_1ibs_U27->din1(grp_fu_260_p1);
    Lenet_sdiv_24ns_1ibs_U27->ce(ap_var_for_const0);
    Lenet_sdiv_24ns_1ibs_U27->dout(grp_fu_260_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state11);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state4);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_212_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_212_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_212_p2 );
    sensitive << ( classifier_y_hat_dat_reg_91 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_212_p2 );
    sensitive << ( classifier_y_hat_dat_1_reg_103 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_classifier_y_hat_dat_3_fu_269_p3);
    sensitive << ( tmp_4_reg_337 );
    sensitive << ( classifier_y_hat_dat_reg_91 );
    sensitive << ( tmp_5_fu_265_p1 );

    SC_METHOD(thread_classifier_y_hat_dat_4_fu_276_p3);
    sensitive << ( tmp_4_reg_337 );
    sensitive << ( classifier_y_hat_dat_1_reg_103 );
    sensitive << ( tmp_5_fu_265_p1 );

    SC_METHOD(thread_exitcond5_fu_137_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_z_assign_reg_56 );

    SC_METHOD(thread_exitcond6_fu_173_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_z_assign_3_reg_79 );

    SC_METHOD(thread_exitcond_fu_212_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( p_z_assign_4_reg_115 );

    SC_METHOD(thread_filter_1_fu_179_p2);
    sensitive << ( p_z_assign_3_reg_79 );

    SC_METHOD(thread_filter_2_fu_218_p2);
    sensitive << ( p_z_assign_4_reg_115 );

    SC_METHOD(thread_filter_fu_143_p2);
    sensitive << ( p_z_assign_reg_56 );

    SC_METHOD(thread_grp_exp_16_8_s_fu_126_ap_start);
    sensitive << ( grp_exp_16_8_s_fu_126_ap_start_reg );

    SC_METHOD(thread_grp_exp_16_8_s_fu_126_x_V);
    sensitive << ( in_V_1_reg_343 );
    sensitive << ( in_V_fu_199_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_fu_260_ap_start);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_fu_260_p0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_exp_16_8_s_fu_126_ap_return );

    SC_METHOD(thread_grp_fu_260_p1);
    sensitive << ( tmp_105_tr_cast_reg_319 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_in_V_1_fu_234_p2);
    sensitive << ( p_Val2_1_reg_46 );
    sensitive << ( p_Val2_4_fu_228_p3 );

    SC_METHOD(thread_in_V_fu_199_p2);
    sensitive << ( p_Val2_1_reg_46 );
    sensitive << ( p_Val2_s_fu_193_p3 );

    SC_METHOD(thread_max_value_V_1_phi_s_fu_165_p3);
    sensitive << ( p_Val2_1_reg_46 );
    sensitive << ( max_value_V_fu_153_p3 );
    sensitive << ( tmp_s_fu_159_p2 );

    SC_METHOD(thread_max_value_V_fu_153_p3);
    sensitive << ( classifier_1_1_2_input_data_0_V_read );
    sensitive << ( classifier_1_1_2_input_data_1_V_read );
    sensitive << ( tmp_2_fu_149_p1 );

    SC_METHOD(thread_p_Val2_4_fu_228_p3);
    sensitive << ( classifier_1_1_2_input_data_0_V_read );
    sensitive << ( classifier_1_1_2_input_data_1_V_read );
    sensitive << ( tmp_4_fu_224_p1 );

    SC_METHOD(thread_p_Val2_s_fu_193_p3);
    sensitive << ( classifier_1_1_2_input_data_0_V_read );
    sensitive << ( classifier_1_1_2_input_data_1_V_read );
    sensitive << ( tmp_3_fu_189_p1 );

    SC_METHOD(thread_sum_exp_z_V_fu_206_p2);
    sensitive << ( grp_exp_16_8_s_fu_126_ap_return );
    sensitive << ( p_Val2_2_reg_67 );

    SC_METHOD(thread_tmp_105_tr_cast_fu_185_p1);
    sensitive << ( p_Val2_2_reg_67 );

    SC_METHOD(thread_tmp_2_fu_149_p1);
    sensitive << ( p_z_assign_reg_56 );

    SC_METHOD(thread_tmp_3_fu_189_p1);
    sensitive << ( p_z_assign_3_reg_79 );

    SC_METHOD(thread_tmp_4_fu_224_p1);
    sensitive << ( p_z_assign_4_reg_115 );

    SC_METHOD(thread_tmp_5_fu_265_p1);
    sensitive << ( grp_fu_260_p2 );

    SC_METHOD(thread_tmp_s_fu_159_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_137_p2 );
    sensitive << ( p_Val2_1_reg_46 );
    sensitive << ( max_value_V_fu_153_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_137_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond6_fu_173_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_212_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000000000000001";
    grp_exp_16_8_s_fu_126_ap_start_reg = SC_LOGIC_0;
    ap_return_0_preg = "0000000000000000";
    ap_return_1_preg = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "softmax_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, classifier_1_1_2_input_data_0_V_read, "(port)classifier_1_1_2_input_data_0_V_read");
    sc_trace(mVcdFile, classifier_1_1_2_input_data_1_V_read, "(port)classifier_1_1_2_input_data_1_V_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, filter_fu_143_p2, "filter_fu_143_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, max_value_V_1_phi_s_fu_165_p3, "max_value_V_1_phi_s_fu_165_p3");
    sc_trace(mVcdFile, exitcond5_fu_137_p2, "exitcond5_fu_137_p2");
    sc_trace(mVcdFile, filter_1_fu_179_p2, "filter_1_fu_179_p2");
    sc_trace(mVcdFile, filter_1_reg_314, "filter_1_reg_314");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_105_tr_cast_fu_185_p1, "tmp_105_tr_cast_fu_185_p1");
    sc_trace(mVcdFile, tmp_105_tr_cast_reg_319, "tmp_105_tr_cast_reg_319");
    sc_trace(mVcdFile, exitcond6_fu_173_p2, "exitcond6_fu_173_p2");
    sc_trace(mVcdFile, sum_exp_z_V_fu_206_p2, "sum_exp_z_V_fu_206_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, filter_2_fu_218_p2, "filter_2_fu_218_p2");
    sc_trace(mVcdFile, filter_2_reg_332, "filter_2_reg_332");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_4_fu_224_p1, "tmp_4_fu_224_p1");
    sc_trace(mVcdFile, tmp_4_reg_337, "tmp_4_reg_337");
    sc_trace(mVcdFile, exitcond_fu_212_p2, "exitcond_fu_212_p2");
    sc_trace(mVcdFile, in_V_1_fu_234_p2, "in_V_1_fu_234_p2");
    sc_trace(mVcdFile, in_V_1_reg_343, "in_V_1_reg_343");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, classifier_y_hat_dat_3_fu_269_p3, "classifier_y_hat_dat_3_fu_269_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, classifier_y_hat_dat_4_fu_276_p3, "classifier_y_hat_dat_4_fu_276_p3");
    sc_trace(mVcdFile, grp_exp_16_8_s_fu_126_ap_start, "grp_exp_16_8_s_fu_126_ap_start");
    sc_trace(mVcdFile, grp_exp_16_8_s_fu_126_ap_done, "grp_exp_16_8_s_fu_126_ap_done");
    sc_trace(mVcdFile, grp_exp_16_8_s_fu_126_ap_idle, "grp_exp_16_8_s_fu_126_ap_idle");
    sc_trace(mVcdFile, grp_exp_16_8_s_fu_126_ap_ready, "grp_exp_16_8_s_fu_126_ap_ready");
    sc_trace(mVcdFile, grp_exp_16_8_s_fu_126_x_V, "grp_exp_16_8_s_fu_126_x_V");
    sc_trace(mVcdFile, grp_exp_16_8_s_fu_126_ap_return, "grp_exp_16_8_s_fu_126_ap_return");
    sc_trace(mVcdFile, p_Val2_1_reg_46, "p_Val2_1_reg_46");
    sc_trace(mVcdFile, p_z_assign_reg_56, "p_z_assign_reg_56");
    sc_trace(mVcdFile, p_Val2_2_reg_67, "p_Val2_2_reg_67");
    sc_trace(mVcdFile, p_z_assign_3_reg_79, "p_z_assign_3_reg_79");
    sc_trace(mVcdFile, classifier_y_hat_dat_reg_91, "classifier_y_hat_dat_reg_91");
    sc_trace(mVcdFile, classifier_y_hat_dat_1_reg_103, "classifier_y_hat_dat_1_reg_103");
    sc_trace(mVcdFile, p_z_assign_4_reg_115, "p_z_assign_4_reg_115");
    sc_trace(mVcdFile, grp_exp_16_8_s_fu_126_ap_start_reg, "grp_exp_16_8_s_fu_126_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state4, "ap_NS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm_state11, "ap_NS_fsm_state11");
    sc_trace(mVcdFile, in_V_fu_199_p2, "in_V_fu_199_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_2_fu_149_p1, "tmp_2_fu_149_p1");
    sc_trace(mVcdFile, max_value_V_fu_153_p3, "max_value_V_fu_153_p3");
    sc_trace(mVcdFile, tmp_s_fu_159_p2, "tmp_s_fu_159_p2");
    sc_trace(mVcdFile, tmp_3_fu_189_p1, "tmp_3_fu_189_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_193_p3, "p_Val2_s_fu_193_p3");
    sc_trace(mVcdFile, p_Val2_4_fu_228_p3, "p_Val2_4_fu_228_p3");
    sc_trace(mVcdFile, grp_fu_260_p0, "grp_fu_260_p0");
    sc_trace(mVcdFile, grp_fu_260_p1, "grp_fu_260_p1");
    sc_trace(mVcdFile, grp_fu_260_p2, "grp_fu_260_p2");
    sc_trace(mVcdFile, tmp_5_fu_265_p1, "tmp_5_fu_265_p1");
    sc_trace(mVcdFile, grp_fu_260_ap_start, "grp_fu_260_ap_start");
    sc_trace(mVcdFile, grp_fu_260_ap_done, "grp_fu_260_ap_done");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
#endif

    }
}

softmax::~softmax() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_exp_16_8_s_fu_126;
    delete Lenet_sdiv_24ns_1ibs_U27;
}

void softmax::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void softmax::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond_fu_212_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
            ap_return_0_preg = classifier_y_hat_dat_reg_91.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond_fu_212_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
            ap_return_1_preg = classifier_y_hat_dat_1_reg_103.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_exp_16_8_s_fu_126_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state4.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state11.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())))) {
            grp_exp_16_8_s_fu_126_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_exp_16_8_s_fu_126_ap_ready.read())) {
            grp_exp_16_8_s_fu_126_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_137_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_Val2_1_reg_46 = max_value_V_1_phi_s_fu_165_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        p_Val2_1_reg_46 = classifier_1_1_2_input_data_0_V_read.read();
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_137_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_Val2_2_reg_67 = ap_const_lv16_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        p_Val2_2_reg_67 = sum_exp_z_V_fu_206_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_137_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_z_assign_3_reg_79 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        p_z_assign_3_reg_79 = filter_1_reg_314.read();
    }
    if ((esl_seteq<1,1,1>(exitcond6_fu_173_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_z_assign_4_reg_115 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        p_z_assign_4_reg_115 = filter_2_reg_332.read();
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_137_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_z_assign_reg_56 = filter_fu_143_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        p_z_assign_reg_56 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        classifier_y_hat_dat_1_reg_103 = classifier_y_hat_dat_4_fu_276_p3.read();
        classifier_y_hat_dat_reg_91 = classifier_y_hat_dat_3_fu_269_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        filter_1_reg_314 = filter_1_fu_179_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        filter_2_reg_332 = filter_2_fu_218_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_212_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        in_V_1_reg_343 = in_V_1_fu_234_p2.read();
        tmp_4_reg_337 = tmp_4_fu_224_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond6_fu_173_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_105_tr_cast_reg_319 = tmp_105_tr_cast_fu_185_p1.read();
    }
}

void softmax::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void softmax::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void softmax::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void softmax::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void softmax::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void softmax::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void softmax::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void softmax::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void softmax::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void softmax::thread_ap_NS_fsm_state11() {
    ap_NS_fsm_state11 = ap_NS_fsm.read()[10];
}

void softmax::thread_ap_NS_fsm_state4() {
    ap_NS_fsm_state4 = ap_NS_fsm.read()[3];
}

void softmax::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond_fu_212_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void softmax::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void softmax::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_212_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void softmax::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(exitcond_fu_212_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        ap_return_0 = classifier_y_hat_dat_reg_91.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void softmax::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(exitcond_fu_212_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        ap_return_1 = classifier_y_hat_dat_1_reg_103.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void softmax::thread_classifier_y_hat_dat_3_fu_269_p3() {
    classifier_y_hat_dat_3_fu_269_p3 = (!tmp_4_reg_337.read()[0].is_01())? sc_lv<16>(): ((tmp_4_reg_337.read()[0].to_bool())? classifier_y_hat_dat_reg_91.read(): tmp_5_fu_265_p1.read());
}

void softmax::thread_classifier_y_hat_dat_4_fu_276_p3() {
    classifier_y_hat_dat_4_fu_276_p3 = (!tmp_4_reg_337.read()[0].is_01())? sc_lv<16>(): ((tmp_4_reg_337.read()[0].to_bool())? tmp_5_fu_265_p1.read(): classifier_y_hat_dat_1_reg_103.read());
}

void softmax::thread_exitcond5_fu_137_p2() {
    exitcond5_fu_137_p2 = (!p_z_assign_reg_56.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_z_assign_reg_56.read() == ap_const_lv2_2);
}

void softmax::thread_exitcond6_fu_173_p2() {
    exitcond6_fu_173_p2 = (!p_z_assign_3_reg_79.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_z_assign_3_reg_79.read() == ap_const_lv2_2);
}

void softmax::thread_exitcond_fu_212_p2() {
    exitcond_fu_212_p2 = (!p_z_assign_4_reg_115.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_z_assign_4_reg_115.read() == ap_const_lv2_2);
}

void softmax::thread_filter_1_fu_179_p2() {
    filter_1_fu_179_p2 = (!p_z_assign_3_reg_79.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_z_assign_3_reg_79.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void softmax::thread_filter_2_fu_218_p2() {
    filter_2_fu_218_p2 = (!p_z_assign_4_reg_115.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_z_assign_4_reg_115.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void softmax::thread_filter_fu_143_p2() {
    filter_fu_143_p2 = (!p_z_assign_reg_56.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_z_assign_reg_56.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void softmax::thread_grp_exp_16_8_s_fu_126_ap_start() {
    grp_exp_16_8_s_fu_126_ap_start = grp_exp_16_8_s_fu_126_ap_start_reg.read();
}

void softmax::thread_grp_exp_16_8_s_fu_126_x_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_exp_16_8_s_fu_126_x_V = in_V_1_reg_343.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_exp_16_8_s_fu_126_x_V = in_V_fu_199_p2.read();
    } else {
        grp_exp_16_8_s_fu_126_x_V = "XXXXXXXXXXXXXXXX";
    }
}

void softmax::thread_grp_fu_260_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_260_ap_start = ap_const_logic_1;
    } else {
        grp_fu_260_ap_start = ap_const_logic_0;
    }
}

void softmax::thread_grp_fu_260_p0() {
    grp_fu_260_p0 = esl_concat<16,8>(grp_exp_16_8_s_fu_126_ap_return.read(), ap_const_lv8_0);
}

void softmax::thread_grp_fu_260_p1() {
    grp_fu_260_p1 =  (sc_lv<16>) (tmp_105_tr_cast_reg_319.read());
}

void softmax::thread_in_V_1_fu_234_p2() {
    in_V_1_fu_234_p2 = (!p_Val2_4_fu_228_p3.read().is_01() || !p_Val2_1_reg_46.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_Val2_4_fu_228_p3.read()) - sc_biguint<16>(p_Val2_1_reg_46.read()));
}

void softmax::thread_in_V_fu_199_p2() {
    in_V_fu_199_p2 = (!p_Val2_s_fu_193_p3.read().is_01() || !p_Val2_1_reg_46.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_Val2_s_fu_193_p3.read()) - sc_biguint<16>(p_Val2_1_reg_46.read()));
}

void softmax::thread_max_value_V_1_phi_s_fu_165_p3() {
    max_value_V_1_phi_s_fu_165_p3 = (!tmp_s_fu_159_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_s_fu_159_p2.read()[0].to_bool())? max_value_V_fu_153_p3.read(): p_Val2_1_reg_46.read());
}

void softmax::thread_max_value_V_fu_153_p3() {
    max_value_V_fu_153_p3 = (!tmp_2_fu_149_p1.read()[0].is_01())? sc_lv<16>(): ((tmp_2_fu_149_p1.read()[0].to_bool())? classifier_1_1_2_input_data_1_V_read.read(): classifier_1_1_2_input_data_0_V_read.read());
}

void softmax::thread_p_Val2_4_fu_228_p3() {
    p_Val2_4_fu_228_p3 = (!tmp_4_fu_224_p1.read()[0].is_01())? sc_lv<16>(): ((tmp_4_fu_224_p1.read()[0].to_bool())? classifier_1_1_2_input_data_1_V_read.read(): classifier_1_1_2_input_data_0_V_read.read());
}

void softmax::thread_p_Val2_s_fu_193_p3() {
    p_Val2_s_fu_193_p3 = (!tmp_3_fu_189_p1.read()[0].is_01())? sc_lv<16>(): ((tmp_3_fu_189_p1.read()[0].to_bool())? classifier_1_1_2_input_data_1_V_read.read(): classifier_1_1_2_input_data_0_V_read.read());
}

void softmax::thread_sum_exp_z_V_fu_206_p2() {
    sum_exp_z_V_fu_206_p2 = (!grp_exp_16_8_s_fu_126_ap_return.read().is_01() || !p_Val2_2_reg_67.read().is_01())? sc_lv<16>(): (sc_biguint<16>(grp_exp_16_8_s_fu_126_ap_return.read()) + sc_bigint<16>(p_Val2_2_reg_67.read()));
}

void softmax::thread_tmp_105_tr_cast_fu_185_p1() {
    tmp_105_tr_cast_fu_185_p1 = esl_sext<24,16>(p_Val2_2_reg_67.read());
}

void softmax::thread_tmp_2_fu_149_p1() {
    tmp_2_fu_149_p1 = p_z_assign_reg_56.read().range(1-1, 0);
}

void softmax::thread_tmp_3_fu_189_p1() {
    tmp_3_fu_189_p1 = p_z_assign_3_reg_79.read().range(1-1, 0);
}

void softmax::thread_tmp_4_fu_224_p1() {
    tmp_4_fu_224_p1 = p_z_assign_4_reg_115.read().range(1-1, 0);
}

void softmax::thread_tmp_5_fu_265_p1() {
    tmp_5_fu_265_p1 = grp_fu_260_p2.read().range(16-1, 0);
}

void softmax::thread_tmp_s_fu_159_p2() {
    tmp_s_fu_159_p2 = (!max_value_V_fu_153_p3.read().is_01() || !p_Val2_1_reg_46.read().is_01())? sc_lv<1>(): (sc_bigint<16>(max_value_V_fu_153_p3.read()) > sc_bigint<16>(p_Val2_1_reg_46.read()));
}

void softmax::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond5_fu_137_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond6_fu_173_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_212_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<43>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

