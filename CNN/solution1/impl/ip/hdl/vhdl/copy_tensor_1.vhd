-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity copy_tensor_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in1_V_ce0 : OUT STD_LOGIC;
    in1_V_we0 : OUT STD_LOGIC;
    in1_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in2_V_ce0 : OUT STD_LOGIC;
    in2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    size1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    size1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    size2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    size2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    size2_z : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of copy_tensor_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul2_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_167_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_1_reg_282 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_fu_182_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_290 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp5_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_217_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_318 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_4_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_91 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_126 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_137 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_7_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_137 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_137 <= i_1_reg_318;
            end if; 
        end if;
    end process;

    j_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_126 <= ap_const_lv31_0;
            elsif (((tmp_3_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_126 <= j_1_reg_290;
            end if; 
        end if;
    end process;

    k_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_91 <= k_1_reg_282;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_91 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul1_reg_114 <= next_mul2_reg_269;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_114 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_102 <= next_mul_reg_274;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_1_reg_318 <= i_1_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_290 <= j_1_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_1_reg_282 <= k_1_fu_167_p2;
                next_mul2_reg_269 <= next_mul2_fu_148_p2;
                next_mul_reg_274 <= next_mul_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp3_reg_305 <= tmp3_fu_200_p2;
                tmp5_reg_310 <= tmp5_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp4_reg_300 <= tmp4_fu_194_p2;
                tmp_reg_295 <= tmp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_4_reg_323 <= tmp_4_fu_223_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_2_fu_177_p2, ap_CS_fsm_state5, tmp_3_fu_212_p2, tmp_s_fu_162_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_162_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_2_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_3_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_162_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_162_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_162_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_217_p2 <= std_logic_vector(unsigned(i_reg_137) + unsigned(ap_const_lv31_1));
    i_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_137),32));
    in1_V_address0 <= tmp_5_fu_238_p1(3 - 1 downto 0);

    in1_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in1_V_ce0 <= ap_const_logic_1;
        else 
            in1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_V_d0 <= in2_V_q0;

    in1_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in1_V_we0 <= ap_const_logic_1;
        else 
            in1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in2_V_address0 <= tmp_7_fu_233_p1(3 - 1 downto 0);

    in2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in2_V_ce0 <= ap_const_logic_1;
        else 
            in2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_182_p2 <= std_logic_vector(unsigned(j_reg_126) + unsigned(ap_const_lv31_1));
    j_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_126),32));
    k_1_fu_167_p2 <= std_logic_vector(unsigned(k_reg_91) + unsigned(ap_const_lv31_1));
    k_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_91),32));
    next_mul2_fu_148_p2 <= std_logic_vector(unsigned(phi_mul1_reg_114) + unsigned(size2_y));
    next_mul_fu_153_p2 <= std_logic_vector(unsigned(phi_mul_reg_102) + unsigned(size1_y));
    tmp3_fu_200_p1 <= size1_x;
    tmp3_fu_200_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_295) * signed(tmp3_fu_200_p1))), 32));
    tmp4_fu_194_p2 <= std_logic_vector(unsigned(j_cast_fu_173_p1) + unsigned(phi_mul1_reg_114));
    tmp5_fu_204_p1 <= size2_x;
    tmp5_fu_204_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_reg_300) * signed(tmp5_fu_204_p1))), 32));
    tmp_2_fu_177_p2 <= "1" when (signed(j_cast_fu_173_p1) < signed(size2_y)) else "0";
    tmp_3_fu_212_p1 <= size2_x;
    tmp_3_fu_212_p2 <= "1" when (signed(i_cast_fu_208_p1) < signed(tmp_3_fu_212_p1)) else "0";
    tmp_4_fu_223_p2 <= std_logic_vector(unsigned(i_cast_fu_208_p1) + unsigned(tmp3_reg_305));
        tmp_5_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_323),64));

    tmp_6_fu_228_p2 <= std_logic_vector(unsigned(i_cast_fu_208_p1) + unsigned(tmp5_reg_310));
        tmp_7_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_228_p2),64));

    tmp_fu_188_p2 <= std_logic_vector(unsigned(j_cast_fu_173_p1) + unsigned(phi_mul_reg_102));
    tmp_s_fu_162_p2 <= "1" when (signed(k_cast_fu_158_p1) < signed(size2_z)) else "0";
end behav;
