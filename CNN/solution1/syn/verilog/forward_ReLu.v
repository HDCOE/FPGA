// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward_ReLu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        activation_layer_2_2_2_input_data_V_address0,
        activation_layer_2_2_2_input_data_V_ce0,
        activation_layer_2_2_2_input_data_V_q0,
        activation_layer_2_2_2_output_data_V_address0,
        activation_layer_2_2_2_output_data_V_ce0,
        activation_layer_2_2_2_output_data_V_we0,
        activation_layer_2_2_2_output_data_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] activation_layer_2_2_2_input_data_V_address0;
output   activation_layer_2_2_2_input_data_V_ce0;
input  [15:0] activation_layer_2_2_2_input_data_V_q0;
output  [2:0] activation_layer_2_2_2_output_data_V_address0;
output   activation_layer_2_2_2_output_data_V_ce0;
output   activation_layer_2_2_2_output_data_V_we0;
output  [15:0] activation_layer_2_2_2_output_data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg activation_layer_2_2_2_input_data_V_ce0;
reg activation_layer_2_2_2_output_data_V_ce0;
reg activation_layer_2_2_2_output_data_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] p_x_assign_cast_fu_95_p1;
reg   [2:0] p_x_assign_cast_reg_179;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_105_p2;
reg   [1:0] i_reg_187;
wire   [1:0] j_fu_117_p2;
reg   [1:0] j_reg_195;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_123_p1;
reg   [0:0] tmp_reg_200;
wire   [0:0] exitcond8_fu_111_p2;
wire   [1:0] ch_fu_133_p2;
reg   [1:0] ch_reg_208;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_2_fu_157_p1;
reg   [63:0] tmp_2_reg_213;
wire   [0:0] exitcond_fu_127_p2;
reg   [1:0] p_x_assign_reg_62;
reg   [1:0] p_y_assign_reg_73;
wire   [0:0] exitcond7_fu_99_p2;
reg   [1:0] p_z_assign_reg_84;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_11_fu_139_p1;
wire   [2:0] tmp1_fu_143_p4;
wire   [2:0] tmp_s_fu_152_p2;
wire   [0:0] tmp_12_fu_162_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_x_assign_reg_62 <= i_reg_187;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_x_assign_reg_62 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_y_assign_reg_73 <= 2'd0;
    end else if (((exitcond_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_y_assign_reg_73 <= j_reg_195;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_z_assign_reg_84 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_z_assign_reg_84 <= ch_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ch_reg_208 <= ch_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_187 <= i_fu_105_p2;
        p_x_assign_cast_reg_179[1 : 0] <= p_x_assign_cast_fu_95_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_195 <= j_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_2_reg_213[2 : 0] <= tmp_2_fu_157_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_reg_200 <= tmp_fu_123_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        activation_layer_2_2_2_input_data_V_ce0 = 1'b1;
    end else begin
        activation_layer_2_2_2_input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        activation_layer_2_2_2_output_data_V_ce0 = 1'b1;
    end else begin
        activation_layer_2_2_2_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        activation_layer_2_2_2_output_data_V_we0 = 1'b1;
    end else begin
        activation_layer_2_2_2_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond7_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond7_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond7_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond8_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign activation_layer_2_2_2_input_data_V_address0 = tmp_2_fu_157_p1;

assign activation_layer_2_2_2_output_data_V_address0 = tmp_2_reg_213;

assign activation_layer_2_2_2_output_data_V_d0 = ((tmp_12_fu_162_p3[0:0] === 1'b1) ? 16'd0 : activation_layer_2_2_2_input_data_V_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ch_fu_133_p2 = (p_z_assign_reg_84 + 2'd1);

assign exitcond7_fu_99_p2 = ((p_x_assign_reg_62 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond8_fu_111_p2 = ((p_y_assign_reg_73 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_127_p2 = ((p_z_assign_reg_84 == 2'd2) ? 1'b1 : 1'b0);

assign i_fu_105_p2 = (p_x_assign_reg_62 + 2'd1);

assign j_fu_117_p2 = (p_y_assign_reg_73 + 2'd1);

assign p_x_assign_cast_fu_95_p1 = p_x_assign_reg_62;

assign tmp1_fu_143_p4 = {{{tmp_11_fu_139_p1}, {tmp_reg_200}}, {1'd0}};

assign tmp_11_fu_139_p1 = p_z_assign_reg_84[0:0];

assign tmp_12_fu_162_p3 = activation_layer_2_2_2_input_data_V_q0[32'd15];

assign tmp_2_fu_157_p1 = tmp_s_fu_152_p2;

assign tmp_fu_123_p1 = p_y_assign_reg_73[0:0];

assign tmp_s_fu_152_p2 = (p_x_assign_cast_reg_179 + tmp1_fu_143_p4);

always @ (posedge ap_clk) begin
    p_x_assign_cast_reg_179[2] <= 1'b0;
    tmp_2_reg_213[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //forward_ReLu
