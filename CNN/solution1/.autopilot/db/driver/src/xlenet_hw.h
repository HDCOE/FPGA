// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

// axilite
// 0x000 : Control signals
//         bit 0  - ap_start (Read/Write/COH)
//         bit 1  - ap_done (Read/COR)
//         bit 2  - ap_idle (Read)
//         bit 3  - ap_ready (Read)
//         bit 7  - auto_restart (Read/Write)
//         others - reserved
// 0x004 : Global Interrupt Enable Register
//         bit 0  - Global Interrupt Enable (Read/Write)
//         others - reserved
// 0x008 : IP Interrupt Enable Register (Read/Write)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x00c : IP Interrupt Status Register (Read/TOW)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x020 : Data signal of data_in_size_x
//         bit 31~0 - data_in_size_x[31:0] (Read/Write)
// 0x024 : reserved
// 0x028 : Data signal of data_in_size_y
//         bit 31~0 - data_in_size_y[31:0] (Read/Write)
// 0x02c : reserved
// 0x030 : Data signal of data_in_size_z
//         bit 31~0 - data_in_size_z[31:0] (Read/Write)
// 0x034 : reserved
// 0x050 : Data signal of conv_size_x
//         bit 31~0 - conv_size_x[31:0] (Read/Write)
// 0x054 : reserved
// 0x058 : Data signal of conv_size_y
//         bit 31~0 - conv_size_y[31:0] (Read/Write)
// 0x05c : reserved
// 0x060 : Data signal of conv_size_z
//         bit 31~0 - conv_size_z[31:0] (Read/Write)
// 0x064 : reserved
// 0x080 : Data signal of relu_size_x
//         bit 31~0 - relu_size_x[31:0] (Read/Write)
// 0x084 : reserved
// 0x088 : Data signal of relu_size_y
//         bit 31~0 - relu_size_y[31:0] (Read/Write)
// 0x08c : reserved
// 0x090 : Data signal of relu_size_z
//         bit 31~0 - relu_size_z[31:0] (Read/Write)
// 0x094 : reserved
// 0x0b0 : Data signal of pool_size_x
//         bit 31~0 - pool_size_x[31:0] (Read/Write)
// 0x0b4 : reserved
// 0x0b8 : Data signal of pool_size_y
//         bit 31~0 - pool_size_y[31:0] (Read/Write)
// 0x0bc : reserved
// 0x0c0 : Data signal of pool_size_z
//         bit 31~0 - pool_size_z[31:0] (Read/Write)
// 0x0c4 : reserved
// 0x0e0 : Data signal of fc_size_x
//         bit 31~0 - fc_size_x[31:0] (Read/Write)
// 0x0e4 : reserved
// 0x0e8 : Data signal of fc_size_y
//         bit 31~0 - fc_size_y[31:0] (Read/Write)
// 0x0ec : reserved
// 0x0f0 : Data signal of fc_size_z
//         bit 31~0 - fc_size_z[31:0] (Read/Write)
// 0x0f4 : reserved
// 0x140 : Data signal of data_out_size_x
//         bit 31~0 - data_out_size_x[31:0] (Read/Write)
// 0x144 : reserved
// 0x148 : Data signal of data_out_size_y
//         bit 31~0 - data_out_size_y[31:0] (Read/Write)
// 0x14c : reserved
// 0x150 : Data signal of data_out_size_z
//         bit 31~0 - data_out_size_z[31:0] (Read/Write)
// 0x154 : reserved
// 0x010 ~
// 0x01f : Memory 'data_in_data_V' (8 * 16b)
//         Word n : bit [15: 0] - data_in_data_V[2n]
//                  bit [31:16] - data_in_data_V[2n+1]
// 0x040 ~
// 0x04f : Memory 'conv_data_V' (8 * 16b)
//         Word n : bit [15: 0] - conv_data_V[2n]
//                  bit [31:16] - conv_data_V[2n+1]
// 0x070 ~
// 0x07f : Memory 'relu_data_V' (8 * 16b)
//         Word n : bit [15: 0] - relu_data_V[2n]
//                  bit [31:16] - relu_data_V[2n+1]
// 0x0a0 ~
// 0x0af : Memory 'pool_data_V' (8 * 16b)
//         Word n : bit [15: 0] - pool_data_V[2n]
//                  bit [31:16] - pool_data_V[2n+1]
// 0x0d0 ~
// 0x0df : Memory 'fc_data_V' (8 * 16b)
//         Word n : bit [15: 0] - fc_data_V[2n]
//                  bit [31:16] - fc_data_V[2n+1]
// 0x100 ~
// 0x13f : Memory 'data_out_data_V' (27 * 16b)
//         Word n : bit [15: 0] - data_out_data_V[2n]
//                  bit [31:16] - data_out_data_V[2n+1]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

#define XLENET_AXILITE_ADDR_AP_CTRL              0x000
#define XLENET_AXILITE_ADDR_GIE                  0x004
#define XLENET_AXILITE_ADDR_IER                  0x008
#define XLENET_AXILITE_ADDR_ISR                  0x00c
#define XLENET_AXILITE_ADDR_DATA_IN_SIZE_X_DATA  0x020
#define XLENET_AXILITE_BITS_DATA_IN_SIZE_X_DATA  32
#define XLENET_AXILITE_ADDR_DATA_IN_SIZE_Y_DATA  0x028
#define XLENET_AXILITE_BITS_DATA_IN_SIZE_Y_DATA  32
#define XLENET_AXILITE_ADDR_DATA_IN_SIZE_Z_DATA  0x030
#define XLENET_AXILITE_BITS_DATA_IN_SIZE_Z_DATA  32
#define XLENET_AXILITE_ADDR_CONV_SIZE_X_DATA     0x050
#define XLENET_AXILITE_BITS_CONV_SIZE_X_DATA     32
#define XLENET_AXILITE_ADDR_CONV_SIZE_Y_DATA     0x058
#define XLENET_AXILITE_BITS_CONV_SIZE_Y_DATA     32
#define XLENET_AXILITE_ADDR_CONV_SIZE_Z_DATA     0x060
#define XLENET_AXILITE_BITS_CONV_SIZE_Z_DATA     32
#define XLENET_AXILITE_ADDR_RELU_SIZE_X_DATA     0x080
#define XLENET_AXILITE_BITS_RELU_SIZE_X_DATA     32
#define XLENET_AXILITE_ADDR_RELU_SIZE_Y_DATA     0x088
#define XLENET_AXILITE_BITS_RELU_SIZE_Y_DATA     32
#define XLENET_AXILITE_ADDR_RELU_SIZE_Z_DATA     0x090
#define XLENET_AXILITE_BITS_RELU_SIZE_Z_DATA     32
#define XLENET_AXILITE_ADDR_POOL_SIZE_X_DATA     0x0b0
#define XLENET_AXILITE_BITS_POOL_SIZE_X_DATA     32
#define XLENET_AXILITE_ADDR_POOL_SIZE_Y_DATA     0x0b8
#define XLENET_AXILITE_BITS_POOL_SIZE_Y_DATA     32
#define XLENET_AXILITE_ADDR_POOL_SIZE_Z_DATA     0x0c0
#define XLENET_AXILITE_BITS_POOL_SIZE_Z_DATA     32
#define XLENET_AXILITE_ADDR_FC_SIZE_X_DATA       0x0e0
#define XLENET_AXILITE_BITS_FC_SIZE_X_DATA       32
#define XLENET_AXILITE_ADDR_FC_SIZE_Y_DATA       0x0e8
#define XLENET_AXILITE_BITS_FC_SIZE_Y_DATA       32
#define XLENET_AXILITE_ADDR_FC_SIZE_Z_DATA       0x0f0
#define XLENET_AXILITE_BITS_FC_SIZE_Z_DATA       32
#define XLENET_AXILITE_ADDR_DATA_OUT_SIZE_X_DATA 0x140
#define XLENET_AXILITE_BITS_DATA_OUT_SIZE_X_DATA 32
#define XLENET_AXILITE_ADDR_DATA_OUT_SIZE_Y_DATA 0x148
#define XLENET_AXILITE_BITS_DATA_OUT_SIZE_Y_DATA 32
#define XLENET_AXILITE_ADDR_DATA_OUT_SIZE_Z_DATA 0x150
#define XLENET_AXILITE_BITS_DATA_OUT_SIZE_Z_DATA 32
#define XLENET_AXILITE_ADDR_DATA_IN_DATA_V_BASE  0x010
#define XLENET_AXILITE_ADDR_DATA_IN_DATA_V_HIGH  0x01f
#define XLENET_AXILITE_WIDTH_DATA_IN_DATA_V      16
#define XLENET_AXILITE_DEPTH_DATA_IN_DATA_V      8
#define XLENET_AXILITE_ADDR_CONV_DATA_V_BASE     0x040
#define XLENET_AXILITE_ADDR_CONV_DATA_V_HIGH     0x04f
#define XLENET_AXILITE_WIDTH_CONV_DATA_V         16
#define XLENET_AXILITE_DEPTH_CONV_DATA_V         8
#define XLENET_AXILITE_ADDR_RELU_DATA_V_BASE     0x070
#define XLENET_AXILITE_ADDR_RELU_DATA_V_HIGH     0x07f
#define XLENET_AXILITE_WIDTH_RELU_DATA_V         16
#define XLENET_AXILITE_DEPTH_RELU_DATA_V         8
#define XLENET_AXILITE_ADDR_POOL_DATA_V_BASE     0x0a0
#define XLENET_AXILITE_ADDR_POOL_DATA_V_HIGH     0x0af
#define XLENET_AXILITE_WIDTH_POOL_DATA_V         16
#define XLENET_AXILITE_DEPTH_POOL_DATA_V         8
#define XLENET_AXILITE_ADDR_FC_DATA_V_BASE       0x0d0
#define XLENET_AXILITE_ADDR_FC_DATA_V_HIGH       0x0df
#define XLENET_AXILITE_WIDTH_FC_DATA_V           16
#define XLENET_AXILITE_DEPTH_FC_DATA_V           8
#define XLENET_AXILITE_ADDR_DATA_OUT_DATA_V_BASE 0x100
#define XLENET_AXILITE_ADDR_DATA_OUT_DATA_V_HIGH 0x13f
#define XLENET_AXILITE_WIDTH_DATA_OUT_DATA_V     16
#define XLENET_AXILITE_DEPTH_DATA_OUT_DATA_V     27

