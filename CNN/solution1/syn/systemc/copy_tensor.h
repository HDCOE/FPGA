// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _copy_tensor_HH_
#define _copy_tensor_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct copy_tensor : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > in1_V_address0;
    sc_out< sc_logic > in1_V_ce0;
    sc_out< sc_logic > in1_V_we0;
    sc_out< sc_lv<16> > in1_V_d0;
    sc_in< sc_lv<16> > in2_0_V_read;
    sc_in< sc_lv<16> > in2_1_V_read;
    sc_in< sc_lv<32> > size1_x;
    sc_in< sc_lv<32> > size1_y;


    // Module declarations
    copy_tensor(sc_module_name name);
    SC_HAS_PROCESS(copy_tensor);

    ~copy_tensor();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > next_mul_fu_127_p2;
    sc_signal< sc_lv<32> > next_mul_reg_202;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > k_1_fu_138_p2;
    sc_signal< sc_lv<2> > k_1_reg_210;
    sc_signal< sc_lv<16> > in2_1_V_read_assign_fu_148_p3;
    sc_signal< sc_lv<16> > in2_1_V_read_assign_reg_215;
    sc_signal< sc_lv<1> > exitcond2_fu_132_p2;
    sc_signal< sc_lv<32> > tmp_fu_158_p2;
    sc_signal< sc_lv<32> > tmp_reg_220;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > ap_phi_mux_j_phi_fu_107_p4;
    sc_signal< sc_lv<32> > tmp3_fu_164_p2;
    sc_signal< sc_lv<32> > tmp3_reg_225;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<2> > k_reg_79;
    sc_signal< sc_lv<32> > phi_mul_reg_90;
    sc_signal< sc_lv<1> > j_reg_102;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > ap_phi_mux_i_phi_fu_119_p4;
    sc_signal< sc_lv<1> > i_reg_115;
    sc_signal< sc_lv<64> > tmp_8_fu_177_p1;
    sc_signal< sc_lv<1> > tmp_24_fu_144_p1;
    sc_signal< sc_lv<32> > j_cast3_fu_154_p1;
    sc_signal< sc_lv<32> > tmp3_fu_164_p1;
    sc_signal< sc_lv<32> > i_cast2_fu_168_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_172_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_i_phi_fu_119_p4();
    void thread_ap_phi_mux_j_phi_fu_107_p4();
    void thread_ap_ready();
    void thread_exitcond2_fu_132_p2();
    void thread_i_cast2_fu_168_p1();
    void thread_in1_V_address0();
    void thread_in1_V_ce0();
    void thread_in1_V_d0();
    void thread_in1_V_we0();
    void thread_in2_1_V_read_assign_fu_148_p3();
    void thread_j_cast3_fu_154_p1();
    void thread_k_1_fu_138_p2();
    void thread_next_mul_fu_127_p2();
    void thread_tmp3_fu_164_p1();
    void thread_tmp3_fu_164_p2();
    void thread_tmp_24_fu_144_p1();
    void thread_tmp_8_fu_177_p1();
    void thread_tmp_fu_158_p2();
    void thread_tmp_s_fu_172_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
