-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    classifier_1_1_2_input_data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    classifier_1_1_2_input_data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal filter_fu_143_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal max_value_V_1_phi_s_fu_165_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond5_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal filter_1_fu_179_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal filter_1_reg_314 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_105_tr_cast_fu_185_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_105_tr_cast_reg_319 : STD_LOGIC_VECTOR (23 downto 0);
    signal exitcond6_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_exp_z_V_fu_206_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal filter_2_fu_218_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal filter_2_reg_332 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_4_fu_224_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_1_fu_234_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_V_1_reg_343 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal classifier_y_hat_dat_3_fu_269_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal classifier_y_hat_dat_4_fu_276_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_exp_16_8_s_fu_126_ap_start : STD_LOGIC;
    signal grp_exp_16_8_s_fu_126_ap_done : STD_LOGIC;
    signal grp_exp_16_8_s_fu_126_ap_idle : STD_LOGIC;
    signal grp_exp_16_8_s_fu_126_ap_ready : STD_LOGIC;
    signal grp_exp_16_8_s_fu_126_x_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_exp_16_8_s_fu_126_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_z_assign_reg_56 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_2_reg_67 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_z_assign_3_reg_79 : STD_LOGIC_VECTOR (1 downto 0);
    signal classifier_y_hat_dat_reg_91 : STD_LOGIC_VECTOR (15 downto 0);
    signal classifier_y_hat_dat_1_reg_103 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_z_assign_4_reg_115 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_exp_16_8_s_fu_126_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal in_V_fu_199_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_2_fu_149_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_value_V_fu_153_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_189_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_193_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_228_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_260_ap_start : STD_LOGIC;
    signal grp_fu_260_ap_done : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    component exp_16_8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Lenet_sdiv_24ns_1ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_exp_16_8_s_fu_126 : component exp_16_8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_16_8_s_fu_126_ap_start,
        ap_done => grp_exp_16_8_s_fu_126_ap_done,
        ap_idle => grp_exp_16_8_s_fu_126_ap_idle,
        ap_ready => grp_exp_16_8_s_fu_126_ap_ready,
        ap_ce => ap_const_logic_1,
        x_V => grp_exp_16_8_s_fu_126_x_V,
        ap_return => grp_exp_16_8_s_fu_126_ap_return);

    Lenet_sdiv_24ns_1ibs_U27 : component Lenet_sdiv_24ns_1ibs
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_260_ap_start,
        done => grp_fu_260_ap_done,
        din0 => grp_fu_260_p0,
        din1 => grp_fu_260_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_260_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((exitcond_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_return_0_preg <= classifier_y_hat_dat_reg_91;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((exitcond_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_return_1_preg <= classifier_y_hat_dat_1_reg_103;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_16_8_s_fu_126_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_16_8_s_fu_126_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_NS_fsm_state4)) or ((ap_const_logic_1 = ap_NS_fsm_state11) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    grp_exp_16_8_s_fu_126_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_16_8_s_fu_126_ap_ready = ap_const_logic_1)) then 
                    grp_exp_16_8_s_fu_126_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_Val2_1_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_1_reg_46 <= max_value_V_1_phi_s_fu_165_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_1_reg_46 <= classifier_1_1_2_input_data_0_V_read;
            end if; 
        end if;
    end process;

    p_Val2_2_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_2_reg_67 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_Val2_2_reg_67 <= sum_exp_z_V_fu_206_p2;
            end if; 
        end if;
    end process;

    p_z_assign_3_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_z_assign_3_reg_79 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_z_assign_3_reg_79 <= filter_1_reg_314;
            end if; 
        end if;
    end process;

    p_z_assign_4_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_z_assign_4_reg_115 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                p_z_assign_4_reg_115 <= filter_2_reg_332;
            end if; 
        end if;
    end process;

    p_z_assign_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_z_assign_reg_56 <= filter_fu_143_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_z_assign_reg_56 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                classifier_y_hat_dat_1_reg_103 <= classifier_y_hat_dat_4_fu_276_p3;
                classifier_y_hat_dat_reg_91 <= classifier_y_hat_dat_3_fu_269_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                filter_1_reg_314 <= filter_1_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                filter_2_reg_332 <= filter_2_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                in_V_1_reg_343 <= in_V_1_fu_234_p2;
                tmp_4_reg_337 <= tmp_4_fu_224_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_105_tr_cast_reg_319 <= tmp_105_tr_cast_fu_185_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_137_p2, ap_CS_fsm_state3, exitcond6_fu_173_p2, ap_CS_fsm_state10, exitcond_fu_212_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond6_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                if (((exitcond_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state11 <= ap_NS_fsm(10);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, exitcond_fu_212_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_212_p2)
    begin
        if (((exitcond_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_212_p2, classifier_y_hat_dat_reg_91, ap_return_0_preg)
    begin
        if (((exitcond_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_return_0 <= classifier_y_hat_dat_reg_91;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_212_p2, classifier_y_hat_dat_1_reg_103, ap_return_1_preg)
    begin
        if (((exitcond_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_return_1 <= classifier_y_hat_dat_1_reg_103;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    classifier_y_hat_dat_3_fu_269_p3 <= 
        classifier_y_hat_dat_reg_91 when (tmp_4_reg_337(0) = '1') else 
        tmp_5_fu_265_p1;
    classifier_y_hat_dat_4_fu_276_p3 <= 
        tmp_5_fu_265_p1 when (tmp_4_reg_337(0) = '1') else 
        classifier_y_hat_dat_1_reg_103;
    exitcond5_fu_137_p2 <= "1" when (p_z_assign_reg_56 = ap_const_lv2_2) else "0";
    exitcond6_fu_173_p2 <= "1" when (p_z_assign_3_reg_79 = ap_const_lv2_2) else "0";
    exitcond_fu_212_p2 <= "1" when (p_z_assign_4_reg_115 = ap_const_lv2_2) else "0";
    filter_1_fu_179_p2 <= std_logic_vector(unsigned(p_z_assign_3_reg_79) + unsigned(ap_const_lv2_1));
    filter_2_fu_218_p2 <= std_logic_vector(unsigned(p_z_assign_4_reg_115) + unsigned(ap_const_lv2_1));
    filter_fu_143_p2 <= std_logic_vector(unsigned(p_z_assign_reg_56) + unsigned(ap_const_lv2_1));
    grp_exp_16_8_s_fu_126_ap_start <= grp_exp_16_8_s_fu_126_ap_start_reg;

    grp_exp_16_8_s_fu_126_x_V_assign_proc : process(in_V_1_reg_343, in_V_fu_199_p2, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_exp_16_8_s_fu_126_x_V <= in_V_1_reg_343;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_exp_16_8_s_fu_126_x_V <= in_V_fu_199_p2;
        else 
            grp_exp_16_8_s_fu_126_x_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_260_ap_start_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_260_ap_start <= ap_const_logic_1;
        else 
            grp_fu_260_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_260_p0 <= (grp_exp_16_8_s_fu_126_ap_return & ap_const_lv8_0);
    grp_fu_260_p1 <= tmp_105_tr_cast_reg_319(16 - 1 downto 0);
    in_V_1_fu_234_p2 <= std_logic_vector(unsigned(p_Val2_4_fu_228_p3) - unsigned(p_Val2_1_reg_46));
    in_V_fu_199_p2 <= std_logic_vector(unsigned(p_Val2_s_fu_193_p3) - unsigned(p_Val2_1_reg_46));
    max_value_V_1_phi_s_fu_165_p3 <= 
        max_value_V_fu_153_p3 when (tmp_s_fu_159_p2(0) = '1') else 
        p_Val2_1_reg_46;
    max_value_V_fu_153_p3 <= 
        classifier_1_1_2_input_data_1_V_read when (tmp_2_fu_149_p1(0) = '1') else 
        classifier_1_1_2_input_data_0_V_read;
    p_Val2_4_fu_228_p3 <= 
        classifier_1_1_2_input_data_1_V_read when (tmp_4_fu_224_p1(0) = '1') else 
        classifier_1_1_2_input_data_0_V_read;
    p_Val2_s_fu_193_p3 <= 
        classifier_1_1_2_input_data_1_V_read when (tmp_3_fu_189_p1(0) = '1') else 
        classifier_1_1_2_input_data_0_V_read;
    sum_exp_z_V_fu_206_p2 <= std_logic_vector(unsigned(grp_exp_16_8_s_fu_126_ap_return) + unsigned(p_Val2_2_reg_67));
        tmp_105_tr_cast_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_67),24));

    tmp_2_fu_149_p1 <= p_z_assign_reg_56(1 - 1 downto 0);
    tmp_3_fu_189_p1 <= p_z_assign_3_reg_79(1 - 1 downto 0);
    tmp_4_fu_224_p1 <= p_z_assign_4_reg_115(1 - 1 downto 0);
    tmp_5_fu_265_p1 <= grp_fu_260_p2(16 - 1 downto 0);
    tmp_s_fu_159_p2 <= "1" when (signed(max_value_V_fu_153_p3) > signed(p_Val2_1_reg_46)) else "0";
end behav;
