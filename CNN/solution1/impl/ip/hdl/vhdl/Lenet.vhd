-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Lenet is
generic (
    C_S_AXI_AXILITE_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_AXILITE_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_axilite_AWVALID : IN STD_LOGIC;
    s_axi_axilite_AWREADY : OUT STD_LOGIC;
    s_axi_axilite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_axilite_WVALID : IN STD_LOGIC;
    s_axi_axilite_WREADY : OUT STD_LOGIC;
    s_axi_axilite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_axilite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITE_DATA_WIDTH/8-1 downto 0);
    s_axi_axilite_ARVALID : IN STD_LOGIC;
    s_axi_axilite_ARREADY : OUT STD_LOGIC;
    s_axi_axilite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_axilite_RVALID : OUT STD_LOGIC;
    s_axi_axilite_RREADY : IN STD_LOGIC;
    s_axi_axilite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_axilite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_axilite_BVALID : OUT STD_LOGIC;
    s_axi_axilite_BREADY : IN STD_LOGIC;
    s_axi_axilite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Lenet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Lenet,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.718312,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=16,HLS_SYN_FF=3993,HLS_SYN_LUT=5460,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_in_data_V_ce0 : STD_LOGIC;
    signal data_in_data_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_size_x : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_size_y : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_size_z : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_data_V_ce0 : STD_LOGIC;
    signal conv_data_V_we0 : STD_LOGIC;
    signal conv_size_x : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_size_y : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_size_z : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_data_V_ce0 : STD_LOGIC;
    signal relu_data_V_we0 : STD_LOGIC;
    signal relu_size_x : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_size_y : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_size_z : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_size_x : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_size_y : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_size_z : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_size_x : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_size_y : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_size_z : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_size_x : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_size_y : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_size_z : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_size_x_read_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_size_y_read_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_size_z_read_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_size_x_read_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_size_y_read_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_size_x_read_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_size_y_read_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_size_x_read_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_size_y_read_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_size_x_read_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_size_y_read_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_output_data_0_V_reg_374 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_forward_fc_fu_268_ap_idle : STD_LOGIC;
    signal grp_forward_fc_fu_268_ap_ready : STD_LOGIC;
    signal grp_forward_fc_fu_268_ap_done : STD_LOGIC;
    signal grp_copy_tensor_1_fu_225_ap_idle : STD_LOGIC;
    signal grp_copy_tensor_1_fu_225_ap_ready : STD_LOGIC;
    signal grp_copy_tensor_1_fu_225_ap_done : STD_LOGIC;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal fc1_output_data_1_V_reg_380 : STD_LOGIC_VECTOR (15 downto 0);
    signal softmax_input_data_0_reg_386 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_copy_tensor_3_fu_281_ap_idle : STD_LOGIC;
    signal grp_copy_tensor_3_fu_281_ap_ready : STD_LOGIC;
    signal grp_copy_tensor_3_fu_281_ap_done : STD_LOGIC;
    signal grp_copy_tensor_fu_248_ap_idle : STD_LOGIC;
    signal grp_copy_tensor_fu_248_ap_ready : STD_LOGIC;
    signal grp_copy_tensor_fu_248_ap_done : STD_LOGIC;
    signal ap_block_state13_on_subcall_done : BOOLEAN;
    signal softmax_input_data_1_reg_391 : STD_LOGIC_VECTOR (15 downto 0);
    signal softmax_y_hat_data_0_reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_softmax_fu_204_ap_idle : STD_LOGIC;
    signal grp_softmax_fu_204_ap_ready : STD_LOGIC;
    signal grp_softmax_fu_204_ap_done : STD_LOGIC;
    signal softmax_y_hat_data_1_reg_401 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1_input_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv1_input_data_V_ce0 : STD_LOGIC;
    signal conv1_input_data_V_we0 : STD_LOGIC;
    signal conv1_input_data_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1_output_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv1_output_data_V_ce0 : STD_LOGIC;
    signal conv1_output_data_V_we0 : STD_LOGIC;
    signal conv1_output_data_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1_a_slice_pad_da_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fx_input_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fx_input_data_V_ce0 : STD_LOGIC;
    signal fx_input_data_V_we0 : STD_LOGIC;
    signal fx_input_data_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fx_output_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fx_output_data_V_ce0 : STD_LOGIC;
    signal fx_output_data_V_we0 : STD_LOGIC;
    signal fx_output_data_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_input_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fc1_input_data_V_ce0 : STD_LOGIC;
    signal fc1_input_data_V_we0 : STD_LOGIC;
    signal fc1_input_data_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_softmax_fu_204_ap_start : STD_LOGIC;
    signal grp_softmax_fu_204_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_softmax_fu_204_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Conv_forward_fu_216_ap_start : STD_LOGIC;
    signal grp_Conv_forward_fu_216_ap_done : STD_LOGIC;
    signal grp_Conv_forward_fu_216_ap_idle : STD_LOGIC;
    signal grp_Conv_forward_fu_216_ap_ready : STD_LOGIC;
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 : STD_LOGIC;
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0 : STD_LOGIC;
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0 : STD_LOGIC;
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0 : STD_LOGIC;
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0 : STD_LOGIC;
    signal grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_tensor_1_fu_225_ap_start : STD_LOGIC;
    signal grp_copy_tensor_1_fu_225_in1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_tensor_1_fu_225_in1_V_ce0 : STD_LOGIC;
    signal grp_copy_tensor_1_fu_225_in1_V_we0 : STD_LOGIC;
    signal grp_copy_tensor_1_fu_225_in1_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_tensor_1_fu_225_in2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_tensor_1_fu_225_in2_V_ce0 : STD_LOGIC;
    signal grp_copy_tensor_1_fu_225_in2_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_tensor_1_fu_225_size1_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_tensor_1_fu_225_size1_y : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_tensor_1_fu_225_size2_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_tensor_1_fu_225_size2_y : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_tensor_1_fu_225_size2_z : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_tensor_fu_248_ap_start : STD_LOGIC;
    signal grp_copy_tensor_fu_248_in1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_tensor_fu_248_in1_V_ce0 : STD_LOGIC;
    signal grp_copy_tensor_fu_248_in1_V_we0 : STD_LOGIC;
    signal grp_copy_tensor_fu_248_in1_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_tensor_2_fu_258_ap_start : STD_LOGIC;
    signal grp_copy_tensor_2_fu_258_ap_done : STD_LOGIC;
    signal grp_copy_tensor_2_fu_258_ap_idle : STD_LOGIC;
    signal grp_copy_tensor_2_fu_258_ap_ready : STD_LOGIC;
    signal grp_copy_tensor_2_fu_258_in1_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_copy_tensor_2_fu_258_in1_V_ce0 : STD_LOGIC;
    signal grp_copy_tensor_2_fu_258_in1_V_we0 : STD_LOGIC;
    signal grp_copy_tensor_2_fu_258_in1_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_forward_fc_fu_268_ap_start : STD_LOGIC;
    signal grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0 : STD_LOGIC;
    signal grp_forward_fc_fu_268_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_forward_fc_fu_268_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_forward_ReLu_fu_275_ap_start : STD_LOGIC;
    signal grp_forward_ReLu_fu_275_ap_done : STD_LOGIC;
    signal grp_forward_ReLu_fu_275_ap_idle : STD_LOGIC;
    signal grp_forward_ReLu_fu_275_ap_ready : STD_LOGIC;
    signal grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0 : STD_LOGIC;
    signal grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0 : STD_LOGIC;
    signal grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0 : STD_LOGIC;
    signal grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_tensor_3_fu_281_ap_start : STD_LOGIC;
    signal grp_copy_tensor_3_fu_281_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_tensor_3_fu_281_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_softmax_fu_204_ap_start_reg : STD_LOGIC := '0';
    signal grp_Conv_forward_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_copy_tensor_1_fu_225_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_copy_tensor_fu_248_ap_start_reg : STD_LOGIC := '0';
    signal grp_copy_tensor_2_fu_258_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_forward_fc_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal grp_forward_ReLu_fu_275_ap_start_reg : STD_LOGIC := '0';
    signal grp_copy_tensor_3_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state8_on_subcall_done : BOOLEAN;

    component softmax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        classifier_1_1_2_input_data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        classifier_1_1_2_input_data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 : OUT STD_LOGIC;
        conv_layer1_2_2_2_1_2_2_2_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        conv_layer1_2_2_2_1_2_2_2_output_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0 : OUT STD_LOGIC;
        conv_layer1_2_2_2_1_2_2_2_output_data_V_we0 : OUT STD_LOGIC;
        conv_layer1_2_2_2_1_2_2_2_output_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv_layer1_2_2_2_1_2_2_2_output_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0 : OUT STD_LOGIC;
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0 : OUT STD_LOGIC;
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component copy_tensor_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        in1_V_ce0 : OUT STD_LOGIC;
        in1_V_we0 : OUT STD_LOGIC;
        in1_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        in2_V_ce0 : OUT STD_LOGIC;
        in2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        size1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        size1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        size2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        size2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        size2_z : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_tensor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        in1_V_ce0 : OUT STD_LOGIC;
        in1_V_we0 : OUT STD_LOGIC;
        in1_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in2_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        in2_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        size1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        size1_y : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_tensor_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in1_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        in1_V_ce0 : OUT STD_LOGIC;
        in1_V_we0 : OUT STD_LOGIC;
        in1_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        size1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        size1_y : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_fc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fc_layer_2_2_2_2_input_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        fc_layer_2_2_2_2_input_data_V_ce0 : OUT STD_LOGIC;
        fc_layer_2_2_2_2_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component forward_ReLu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        activation_layer_2_2_2_input_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        activation_layer_2_2_2_input_data_V_ce0 : OUT STD_LOGIC;
        activation_layer_2_2_2_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        activation_layer_2_2_2_output_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        activation_layer_2_2_2_output_data_V_ce0 : OUT STD_LOGIC;
        activation_layer_2_2_2_output_data_V_we0 : OUT STD_LOGIC;
        activation_layer_2_2_2_output_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component copy_tensor_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Lenet_conv1_inputjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Lenet_conv1_a_slilbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Lenet_axilite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data_in_data_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        data_in_data_V_ce0 : IN STD_LOGIC;
        data_in_data_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_in_size_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_size_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_size_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_data_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        conv_data_V_ce0 : IN STD_LOGIC;
        conv_data_V_we0 : IN STD_LOGIC;
        conv_data_V_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        conv_size_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_size_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_size_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        relu_data_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        relu_data_V_ce0 : IN STD_LOGIC;
        relu_data_V_we0 : IN STD_LOGIC;
        relu_data_V_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        relu_size_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        relu_size_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        relu_size_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool_size_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool_size_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool_size_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_data_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        fc_data_V_ce0 : IN STD_LOGIC;
        fc_data_V_we0 : IN STD_LOGIC;
        fc_data_V_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        fc_size_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_size_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_size_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_data_V_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_out_data_V_ce0 : IN STD_LOGIC;
        data_out_data_V_we0 : IN STD_LOGIC;
        data_out_data_V_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_out_size_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_size_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_size_z : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Lenet_axilite_s_axi_U : component Lenet_axilite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_axilite_AWVALID,
        AWREADY => s_axi_axilite_AWREADY,
        AWADDR => s_axi_axilite_AWADDR,
        WVALID => s_axi_axilite_WVALID,
        WREADY => s_axi_axilite_WREADY,
        WDATA => s_axi_axilite_WDATA,
        WSTRB => s_axi_axilite_WSTRB,
        ARVALID => s_axi_axilite_ARVALID,
        ARREADY => s_axi_axilite_ARREADY,
        ARADDR => s_axi_axilite_ARADDR,
        RVALID => s_axi_axilite_RVALID,
        RREADY => s_axi_axilite_RREADY,
        RDATA => s_axi_axilite_RDATA,
        RRESP => s_axi_axilite_RRESP,
        BVALID => s_axi_axilite_BVALID,
        BREADY => s_axi_axilite_BREADY,
        BRESP => s_axi_axilite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data_in_data_V_address0 => grp_copy_tensor_1_fu_225_in2_V_address0,
        data_in_data_V_ce0 => data_in_data_V_ce0,
        data_in_data_V_q0 => data_in_data_V_q0,
        data_in_size_x => data_in_size_x,
        data_in_size_y => data_in_size_y,
        data_in_size_z => data_in_size_z,
        conv_data_V_address0 => grp_copy_tensor_1_fu_225_in1_V_address0,
        conv_data_V_ce0 => conv_data_V_ce0,
        conv_data_V_we0 => conv_data_V_we0,
        conv_data_V_d0 => grp_copy_tensor_1_fu_225_in1_V_d0,
        conv_size_x => conv_size_x,
        conv_size_y => conv_size_y,
        conv_size_z => conv_size_z,
        relu_data_V_address0 => grp_copy_tensor_1_fu_225_in1_V_address0,
        relu_data_V_ce0 => relu_data_V_ce0,
        relu_data_V_we0 => relu_data_V_we0,
        relu_data_V_d0 => grp_copy_tensor_1_fu_225_in1_V_d0,
        relu_size_x => relu_size_x,
        relu_size_y => relu_size_y,
        relu_size_z => relu_size_z,
        pool_size_x => pool_size_x,
        pool_size_y => pool_size_y,
        pool_size_z => pool_size_z,
        fc_data_V_address0 => grp_copy_tensor_fu_248_in1_V_address0,
        fc_data_V_ce0 => grp_copy_tensor_fu_248_in1_V_ce0,
        fc_data_V_we0 => grp_copy_tensor_fu_248_in1_V_we0,
        fc_data_V_d0 => grp_copy_tensor_fu_248_in1_V_d0,
        fc_size_x => fc_size_x,
        fc_size_y => fc_size_y,
        fc_size_z => fc_size_z,
        data_out_data_V_address0 => grp_copy_tensor_2_fu_258_in1_V_address0,
        data_out_data_V_ce0 => grp_copy_tensor_2_fu_258_in1_V_ce0,
        data_out_data_V_we0 => grp_copy_tensor_2_fu_258_in1_V_we0,
        data_out_data_V_d0 => grp_copy_tensor_2_fu_258_in1_V_d0,
        data_out_size_x => data_out_size_x,
        data_out_size_y => data_out_size_y,
        data_out_size_z => data_out_size_z);

    conv1_input_data_V_U : component Lenet_conv1_inputjbC
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv1_input_data_V_address0,
        ce0 => conv1_input_data_V_ce0,
        we0 => conv1_input_data_V_we0,
        d0 => grp_copy_tensor_1_fu_225_in1_V_d0,
        q0 => conv1_input_data_V_q0);

    conv1_output_data_V_U : component Lenet_conv1_inputjbC
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv1_output_data_V_address0,
        ce0 => conv1_output_data_V_ce0,
        we0 => conv1_output_data_V_we0,
        d0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0,
        q0 => conv1_output_data_V_q0);

    conv1_a_slice_pad_da_U : component Lenet_conv1_a_slilbW
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0,
        ce0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0,
        we0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0,
        d0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0,
        q0 => conv1_a_slice_pad_da_q0);

    fx_input_data_V_U : component Lenet_conv1_inputjbC
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fx_input_data_V_address0,
        ce0 => fx_input_data_V_ce0,
        we0 => fx_input_data_V_we0,
        d0 => grp_copy_tensor_1_fu_225_in1_V_d0,
        q0 => fx_input_data_V_q0);

    fx_output_data_V_U : component Lenet_conv1_inputjbC
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fx_output_data_V_address0,
        ce0 => fx_output_data_V_ce0,
        we0 => fx_output_data_V_we0,
        d0 => grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0,
        q0 => fx_output_data_V_q0);

    fc1_input_data_V_U : component Lenet_conv1_inputjbC
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc1_input_data_V_address0,
        ce0 => fc1_input_data_V_ce0,
        we0 => fc1_input_data_V_we0,
        d0 => grp_copy_tensor_1_fu_225_in1_V_d0,
        q0 => fc1_input_data_V_q0);

    grp_softmax_fu_204 : component softmax
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_softmax_fu_204_ap_start,
        ap_done => grp_softmax_fu_204_ap_done,
        ap_idle => grp_softmax_fu_204_ap_idle,
        ap_ready => grp_softmax_fu_204_ap_ready,
        classifier_1_1_2_input_data_0_V_read => softmax_input_data_0_reg_386,
        classifier_1_1_2_input_data_1_V_read => softmax_input_data_1_reg_391,
        ap_return_0 => grp_softmax_fu_204_ap_return_0,
        ap_return_1 => grp_softmax_fu_204_ap_return_1);

    grp_Conv_forward_fu_216 : component Conv_forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Conv_forward_fu_216_ap_start,
        ap_done => grp_Conv_forward_fu_216_ap_done,
        ap_idle => grp_Conv_forward_fu_216_ap_idle,
        ap_ready => grp_Conv_forward_fu_216_ap_ready,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_q0 => conv1_input_data_V_q0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_address0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_we0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_d0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_d0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_q0 => conv1_output_data_V_q0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0 => grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_q0 => conv1_a_slice_pad_da_q0);

    grp_copy_tensor_1_fu_225 : component copy_tensor_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_tensor_1_fu_225_ap_start,
        ap_done => grp_copy_tensor_1_fu_225_ap_done,
        ap_idle => grp_copy_tensor_1_fu_225_ap_idle,
        ap_ready => grp_copy_tensor_1_fu_225_ap_ready,
        in1_V_address0 => grp_copy_tensor_1_fu_225_in1_V_address0,
        in1_V_ce0 => grp_copy_tensor_1_fu_225_in1_V_ce0,
        in1_V_we0 => grp_copy_tensor_1_fu_225_in1_V_we0,
        in1_V_d0 => grp_copy_tensor_1_fu_225_in1_V_d0,
        in2_V_address0 => grp_copy_tensor_1_fu_225_in2_V_address0,
        in2_V_ce0 => grp_copy_tensor_1_fu_225_in2_V_ce0,
        in2_V_q0 => grp_copy_tensor_1_fu_225_in2_V_q0,
        size1_x => grp_copy_tensor_1_fu_225_size1_x,
        size1_y => grp_copy_tensor_1_fu_225_size1_y,
        size2_x => grp_copy_tensor_1_fu_225_size2_x,
        size2_y => grp_copy_tensor_1_fu_225_size2_y,
        size2_z => grp_copy_tensor_1_fu_225_size2_z);

    grp_copy_tensor_fu_248 : component copy_tensor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_tensor_fu_248_ap_start,
        ap_done => grp_copy_tensor_fu_248_ap_done,
        ap_idle => grp_copy_tensor_fu_248_ap_idle,
        ap_ready => grp_copy_tensor_fu_248_ap_ready,
        in1_V_address0 => grp_copy_tensor_fu_248_in1_V_address0,
        in1_V_ce0 => grp_copy_tensor_fu_248_in1_V_ce0,
        in1_V_we0 => grp_copy_tensor_fu_248_in1_V_we0,
        in1_V_d0 => grp_copy_tensor_fu_248_in1_V_d0,
        in2_0_V_read => fc1_output_data_0_V_reg_374,
        in2_1_V_read => fc1_output_data_1_V_reg_380,
        size1_x => fc_size_x_read_reg_364,
        size1_y => fc_size_y_read_reg_369);

    grp_copy_tensor_2_fu_258 : component copy_tensor_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_tensor_2_fu_258_ap_start,
        ap_done => grp_copy_tensor_2_fu_258_ap_done,
        ap_idle => grp_copy_tensor_2_fu_258_ap_idle,
        ap_ready => grp_copy_tensor_2_fu_258_ap_ready,
        in1_V_address0 => grp_copy_tensor_2_fu_258_in1_V_address0,
        in1_V_ce0 => grp_copy_tensor_2_fu_258_in1_V_ce0,
        in1_V_we0 => grp_copy_tensor_2_fu_258_in1_V_we0,
        in1_V_d0 => grp_copy_tensor_2_fu_258_in1_V_d0,
        p_read => softmax_y_hat_data_0_reg_396,
        p_read1 => softmax_y_hat_data_1_reg_401,
        size1_x => data_out_size_x_read_reg_334,
        size1_y => data_out_size_y_read_reg_339);

    grp_forward_fc_fu_268 : component forward_fc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_forward_fc_fu_268_ap_start,
        ap_done => grp_forward_fc_fu_268_ap_done,
        ap_idle => grp_forward_fc_fu_268_ap_idle,
        ap_ready => grp_forward_fc_fu_268_ap_ready,
        fc_layer_2_2_2_2_input_data_V_address0 => grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0,
        fc_layer_2_2_2_2_input_data_V_ce0 => grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0,
        fc_layer_2_2_2_2_input_data_V_q0 => fc1_input_data_V_q0,
        ap_return_0 => grp_forward_fc_fu_268_ap_return_0,
        ap_return_1 => grp_forward_fc_fu_268_ap_return_1);

    grp_forward_ReLu_fu_275 : component forward_ReLu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_forward_ReLu_fu_275_ap_start,
        ap_done => grp_forward_ReLu_fu_275_ap_done,
        ap_idle => grp_forward_ReLu_fu_275_ap_idle,
        ap_ready => grp_forward_ReLu_fu_275_ap_ready,
        activation_layer_2_2_2_input_data_V_address0 => grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0,
        activation_layer_2_2_2_input_data_V_ce0 => grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0,
        activation_layer_2_2_2_input_data_V_q0 => fx_input_data_V_q0,
        activation_layer_2_2_2_output_data_V_address0 => grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0,
        activation_layer_2_2_2_output_data_V_ce0 => grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0,
        activation_layer_2_2_2_output_data_V_we0 => grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0,
        activation_layer_2_2_2_output_data_V_d0 => grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_d0);

    grp_copy_tensor_3_fu_281 : component copy_tensor_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_tensor_3_fu_281_ap_start,
        ap_done => grp_copy_tensor_3_fu_281_ap_done,
        ap_idle => grp_copy_tensor_3_fu_281_ap_idle,
        ap_ready => grp_copy_tensor_3_fu_281_ap_ready,
        p_read2 => fc1_output_data_0_V_reg_374,
        p_read7 => fc1_output_data_1_V_reg_380,
        ap_return_0 => grp_copy_tensor_3_fu_281_ap_return_0,
        ap_return_1 => grp_copy_tensor_3_fu_281_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Conv_forward_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Conv_forward_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Conv_forward_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv_forward_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_Conv_forward_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_tensor_1_fu_225_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copy_tensor_1_fu_225_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_copy_tensor_1_fu_225_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_tensor_1_fu_225_ap_ready = ap_const_logic_1)) then 
                    grp_copy_tensor_1_fu_225_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_tensor_2_fu_258_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copy_tensor_2_fu_258_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_softmax_fu_204_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_copy_tensor_2_fu_258_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_tensor_2_fu_258_ap_ready = ap_const_logic_1)) then 
                    grp_copy_tensor_2_fu_258_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_tensor_3_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copy_tensor_3_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then 
                    grp_copy_tensor_3_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_tensor_3_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_copy_tensor_3_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_tensor_fu_248_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copy_tensor_fu_248_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then 
                    grp_copy_tensor_fu_248_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_tensor_fu_248_ap_ready = ap_const_logic_1)) then 
                    grp_copy_tensor_fu_248_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_forward_ReLu_fu_275_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_forward_ReLu_fu_275_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_forward_ReLu_fu_275_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_forward_ReLu_fu_275_ap_ready = ap_const_logic_1)) then 
                    grp_forward_ReLu_fu_275_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_forward_fc_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_forward_fc_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_forward_fc_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_forward_fc_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_forward_fc_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_fu_204_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_softmax_fu_204_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_on_subcall_done))) then 
                    grp_softmax_fu_204_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_fu_204_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_fu_204_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                conv_size_x_read_reg_344 <= conv_size_x;
                conv_size_y_read_reg_349 <= conv_size_y;
                data_in_size_x_read_reg_319 <= data_in_size_x;
                data_in_size_y_read_reg_324 <= data_in_size_y;
                data_in_size_z_read_reg_329 <= data_in_size_z;
                data_out_size_x_read_reg_334 <= data_out_size_x;
                data_out_size_y_read_reg_339 <= data_out_size_y;
                fc_size_x_read_reg_364 <= fc_size_x;
                fc_size_y_read_reg_369 <= fc_size_y;
                relu_size_x_read_reg_354 <= relu_size_x;
                relu_size_y_read_reg_359 <= relu_size_y;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then
                fc1_output_data_0_V_reg_374 <= grp_forward_fc_fu_268_ap_return_0;
                fc1_output_data_1_V_reg_380 <= grp_forward_fc_fu_268_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_on_subcall_done))) then
                softmax_input_data_0_reg_386 <= grp_copy_tensor_3_fu_281_ap_return_0;
                softmax_input_data_1_reg_391 <= grp_copy_tensor_3_fu_281_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_softmax_fu_204_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                softmax_y_hat_data_0_reg_396 <= grp_softmax_fu_204_ap_return_0;
                softmax_y_hat_data_1_reg_401 <= grp_softmax_fu_204_ap_return_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, grp_copy_tensor_1_fu_225_ap_done, ap_block_state12_on_subcall_done, ap_CS_fsm_state13, ap_block_state13_on_subcall_done, ap_CS_fsm_state14, grp_softmax_fu_204_ap_done, grp_Conv_forward_fu_216_ap_done, grp_copy_tensor_2_fu_258_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_copy_tensor_1_fu_225_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_Conv_forward_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_copy_tensor_1_fu_225_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_copy_tensor_1_fu_225_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((grp_softmax_fu_204_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((grp_copy_tensor_2_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state12_on_subcall_done_assign_proc : process(grp_forward_fc_fu_268_ap_done, grp_copy_tensor_1_fu_225_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((grp_copy_tensor_1_fu_225_ap_done = ap_const_logic_0) or (grp_forward_fc_fu_268_ap_done = ap_const_logic_0));
    end process;


    ap_block_state13_on_subcall_done_assign_proc : process(grp_copy_tensor_3_fu_281_ap_done, grp_copy_tensor_fu_248_ap_done)
    begin
                ap_block_state13_on_subcall_done <= ((grp_copy_tensor_fu_248_ap_done = ap_const_logic_0) or (grp_copy_tensor_3_fu_281_ap_done = ap_const_logic_0));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(grp_copy_tensor_1_fu_225_ap_done, grp_forward_ReLu_fu_275_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_forward_ReLu_fu_275_ap_done = ap_const_logic_0) or (grp_copy_tensor_1_fu_225_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_copy_tensor_2_fu_258_ap_done, ap_CS_fsm_state15)
    begin
        if (((grp_copy_tensor_2_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_copy_tensor_2_fu_258_ap_done, ap_CS_fsm_state15)
    begin
        if (((grp_copy_tensor_2_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    conv1_input_data_V_address0_assign_proc : process(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0, grp_copy_tensor_1_fu_225_in1_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_input_data_V_address0 <= grp_copy_tensor_1_fu_225_in1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_input_data_V_address0 <= grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0;
        else 
            conv1_input_data_V_address0 <= "XXX";
        end if; 
    end process;


    conv1_input_data_V_ce0_assign_proc : process(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0, grp_copy_tensor_1_fu_225_in1_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_input_data_V_ce0 <= grp_copy_tensor_1_fu_225_in1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_input_data_V_ce0 <= grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;
        else 
            conv1_input_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_input_data_V_we0_assign_proc : process(grp_copy_tensor_1_fu_225_in1_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_input_data_V_we0 <= grp_copy_tensor_1_fu_225_in1_V_we0;
        else 
            conv1_input_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_data_V_address0_assign_proc : process(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0, grp_copy_tensor_1_fu_225_in2_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            conv1_output_data_V_address0 <= grp_copy_tensor_1_fu_225_in2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_output_data_V_address0 <= grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_address0;
        else 
            conv1_output_data_V_address0 <= "XXX";
        end if; 
    end process;


    conv1_output_data_V_ce0_assign_proc : process(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0, grp_copy_tensor_1_fu_225_in2_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            conv1_output_data_V_ce0 <= grp_copy_tensor_1_fu_225_in2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_output_data_V_ce0 <= grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0;
        else 
            conv1_output_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_data_V_we0_assign_proc : process(grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_output_data_V_we0 <= grp_Conv_forward_fu_216_conv_layer1_2_2_2_1_2_2_2_output_data_V_we0;
        else 
            conv1_output_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_data_V_ce0_assign_proc : process(grp_copy_tensor_1_fu_225_in1_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_data_V_ce0 <= grp_copy_tensor_1_fu_225_in1_V_ce0;
        else 
            conv_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_data_V_we0_assign_proc : process(grp_copy_tensor_1_fu_225_in1_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_data_V_we0 <= grp_copy_tensor_1_fu_225_in1_V_we0;
        else 
            conv_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_data_V_ce0_assign_proc : process(grp_copy_tensor_1_fu_225_in2_V_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_in_data_V_ce0 <= grp_copy_tensor_1_fu_225_in2_V_ce0;
        else 
            data_in_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1_input_data_V_address0_assign_proc : process(ap_CS_fsm_state12, grp_copy_tensor_1_fu_225_in1_V_address0, grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc1_input_data_V_address0 <= grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc1_input_data_V_address0 <= grp_copy_tensor_1_fu_225_in1_V_address0;
        else 
            fc1_input_data_V_address0 <= "XXX";
        end if; 
    end process;


    fc1_input_data_V_ce0_assign_proc : process(ap_CS_fsm_state12, grp_copy_tensor_1_fu_225_in1_V_ce0, grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc1_input_data_V_ce0 <= grp_forward_fc_fu_268_fc_layer_2_2_2_2_input_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc1_input_data_V_ce0 <= grp_copy_tensor_1_fu_225_in1_V_ce0;
        else 
            fc1_input_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1_input_data_V_we0_assign_proc : process(grp_copy_tensor_1_fu_225_in1_V_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc1_input_data_V_we0 <= grp_copy_tensor_1_fu_225_in1_V_we0;
        else 
            fc1_input_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fx_input_data_V_address0_assign_proc : process(grp_copy_tensor_1_fu_225_in1_V_address0, grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fx_input_data_V_address0 <= grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fx_input_data_V_address0 <= grp_copy_tensor_1_fu_225_in1_V_address0;
        else 
            fx_input_data_V_address0 <= "XXX";
        end if; 
    end process;


    fx_input_data_V_ce0_assign_proc : process(grp_copy_tensor_1_fu_225_in1_V_ce0, grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fx_input_data_V_ce0 <= grp_forward_ReLu_fu_275_activation_layer_2_2_2_input_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fx_input_data_V_ce0 <= grp_copy_tensor_1_fu_225_in1_V_ce0;
        else 
            fx_input_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fx_input_data_V_we0_assign_proc : process(grp_copy_tensor_1_fu_225_in1_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fx_input_data_V_we0 <= grp_copy_tensor_1_fu_225_in1_V_we0;
        else 
            fx_input_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fx_output_data_V_address0_assign_proc : process(ap_CS_fsm_state12, grp_copy_tensor_1_fu_225_in2_V_address0, grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fx_output_data_V_address0 <= grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fx_output_data_V_address0 <= grp_copy_tensor_1_fu_225_in2_V_address0;
        else 
            fx_output_data_V_address0 <= "XXX";
        end if; 
    end process;


    fx_output_data_V_ce0_assign_proc : process(ap_CS_fsm_state12, grp_copy_tensor_1_fu_225_in2_V_ce0, grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fx_output_data_V_ce0 <= grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fx_output_data_V_ce0 <= grp_copy_tensor_1_fu_225_in2_V_ce0;
        else 
            fx_output_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fx_output_data_V_we0_assign_proc : process(grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fx_output_data_V_we0 <= grp_forward_ReLu_fu_275_activation_layer_2_2_2_output_data_V_we0;
        else 
            fx_output_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv_forward_fu_216_ap_start <= grp_Conv_forward_fu_216_ap_start_reg;
    grp_copy_tensor_1_fu_225_ap_start <= grp_copy_tensor_1_fu_225_ap_start_reg;

    grp_copy_tensor_1_fu_225_in2_V_q0_assign_proc : process(data_in_data_V_q0, ap_CS_fsm_state12, conv1_output_data_V_q0, fx_output_data_V_q0, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_copy_tensor_1_fu_225_in2_V_q0 <= fx_output_data_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_copy_tensor_1_fu_225_in2_V_q0 <= conv1_output_data_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_copy_tensor_1_fu_225_in2_V_q0 <= data_in_data_V_q0;
        else 
            grp_copy_tensor_1_fu_225_in2_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_tensor_1_fu_225_size1_x_assign_proc : process(conv_size_x_read_reg_344, relu_size_x_read_reg_354, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_copy_tensor_1_fu_225_size1_x <= relu_size_x_read_reg_354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_copy_tensor_1_fu_225_size1_x <= conv_size_x_read_reg_344;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_copy_tensor_1_fu_225_size1_x <= ap_const_lv32_2;
        else 
            grp_copy_tensor_1_fu_225_size1_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_tensor_1_fu_225_size1_y_assign_proc : process(conv_size_y_read_reg_349, relu_size_y_read_reg_359, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_copy_tensor_1_fu_225_size1_y <= relu_size_y_read_reg_359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_copy_tensor_1_fu_225_size1_y <= conv_size_y_read_reg_349;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_copy_tensor_1_fu_225_size1_y <= ap_const_lv32_2;
        else 
            grp_copy_tensor_1_fu_225_size1_y <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_tensor_1_fu_225_size2_x_assign_proc : process(data_in_size_x_read_reg_319, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_copy_tensor_1_fu_225_size2_x <= ap_const_lv32_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_copy_tensor_1_fu_225_size2_x <= data_in_size_x_read_reg_319;
        else 
            grp_copy_tensor_1_fu_225_size2_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_tensor_1_fu_225_size2_y_assign_proc : process(data_in_size_y_read_reg_324, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_copy_tensor_1_fu_225_size2_y <= ap_const_lv32_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_copy_tensor_1_fu_225_size2_y <= data_in_size_y_read_reg_324;
        else 
            grp_copy_tensor_1_fu_225_size2_y <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_tensor_1_fu_225_size2_z_assign_proc : process(data_in_size_z_read_reg_329, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_copy_tensor_1_fu_225_size2_z <= ap_const_lv32_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_copy_tensor_1_fu_225_size2_z <= data_in_size_z_read_reg_329;
        else 
            grp_copy_tensor_1_fu_225_size2_z <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_copy_tensor_2_fu_258_ap_start <= grp_copy_tensor_2_fu_258_ap_start_reg;
    grp_copy_tensor_3_fu_281_ap_start <= grp_copy_tensor_3_fu_281_ap_start_reg;
    grp_copy_tensor_fu_248_ap_start <= grp_copy_tensor_fu_248_ap_start_reg;
    grp_forward_ReLu_fu_275_ap_start <= grp_forward_ReLu_fu_275_ap_start_reg;
    grp_forward_fc_fu_268_ap_start <= grp_forward_fc_fu_268_ap_start_reg;
    grp_softmax_fu_204_ap_start <= grp_softmax_fu_204_ap_start_reg;

    relu_data_V_ce0_assign_proc : process(ap_CS_fsm_state12, grp_copy_tensor_1_fu_225_in1_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            relu_data_V_ce0 <= grp_copy_tensor_1_fu_225_in1_V_ce0;
        else 
            relu_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu_data_V_we0_assign_proc : process(ap_CS_fsm_state12, grp_copy_tensor_1_fu_225_in1_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            relu_data_V_we0 <= grp_copy_tensor_1_fu_225_in1_V_we0;
        else 
            relu_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
