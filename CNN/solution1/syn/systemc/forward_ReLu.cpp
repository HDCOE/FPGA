// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "forward_ReLu.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic forward_ReLu::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic forward_ReLu::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> forward_ReLu::ap_ST_fsm_state1 = "1";
const sc_lv<5> forward_ReLu::ap_ST_fsm_state2 = "10";
const sc_lv<5> forward_ReLu::ap_ST_fsm_state3 = "100";
const sc_lv<5> forward_ReLu::ap_ST_fsm_state4 = "1000";
const sc_lv<5> forward_ReLu::ap_ST_fsm_state5 = "10000";
const sc_lv<32> forward_ReLu::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> forward_ReLu::ap_const_lv32_1 = "1";
const sc_lv<32> forward_ReLu::ap_const_lv32_2 = "10";
const sc_lv<1> forward_ReLu::ap_const_lv1_0 = "0";
const sc_lv<32> forward_ReLu::ap_const_lv32_3 = "11";
const sc_lv<2> forward_ReLu::ap_const_lv2_0 = "00";
const sc_lv<1> forward_ReLu::ap_const_lv1_1 = "1";
const sc_lv<32> forward_ReLu::ap_const_lv32_4 = "100";
const sc_lv<2> forward_ReLu::ap_const_lv2_2 = "10";
const sc_lv<2> forward_ReLu::ap_const_lv2_1 = "1";
const sc_lv<32> forward_ReLu::ap_const_lv32_F = "1111";
const sc_lv<16> forward_ReLu::ap_const_lv16_0 = "0000000000000000";
const bool forward_ReLu::ap_const_boolean_1 = true;

forward_ReLu::forward_ReLu(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_activation_layer_2_2_2_input_data_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_2_fu_157_p1 );

    SC_METHOD(thread_activation_layer_2_2_2_input_data_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_activation_layer_2_2_2_output_data_V_address0);
    sensitive << ( tmp_2_reg_213 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_activation_layer_2_2_2_output_data_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_activation_layer_2_2_2_output_data_V_d0);
    sensitive << ( activation_layer_2_2_2_input_data_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_12_fu_162_p3 );

    SC_METHOD(thread_activation_layer_2_2_2_output_data_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond7_fu_99_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond7_fu_99_p2 );

    SC_METHOD(thread_ch_fu_133_p2);
    sensitive << ( p_z_assign_reg_84 );

    SC_METHOD(thread_exitcond7_fu_99_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_x_assign_reg_62 );

    SC_METHOD(thread_exitcond8_fu_111_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_y_assign_reg_73 );

    SC_METHOD(thread_exitcond_fu_127_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_z_assign_reg_84 );

    SC_METHOD(thread_i_fu_105_p2);
    sensitive << ( p_x_assign_reg_62 );

    SC_METHOD(thread_j_fu_117_p2);
    sensitive << ( p_y_assign_reg_73 );

    SC_METHOD(thread_p_x_assign_cast_fu_95_p1);
    sensitive << ( p_x_assign_reg_62 );

    SC_METHOD(thread_tmp1_fu_143_p4);
    sensitive << ( tmp_reg_200 );
    sensitive << ( tmp_11_fu_139_p1 );

    SC_METHOD(thread_tmp_11_fu_139_p1);
    sensitive << ( p_z_assign_reg_84 );

    SC_METHOD(thread_tmp_12_fu_162_p3);
    sensitive << ( activation_layer_2_2_2_input_data_V_q0 );

    SC_METHOD(thread_tmp_2_fu_157_p1);
    sensitive << ( tmp_s_fu_152_p2 );

    SC_METHOD(thread_tmp_fu_123_p1);
    sensitive << ( p_y_assign_reg_73 );

    SC_METHOD(thread_tmp_s_fu_152_p2);
    sensitive << ( p_x_assign_cast_reg_179 );
    sensitive << ( tmp1_fu_143_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond8_fu_111_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_127_p2 );
    sensitive << ( exitcond7_fu_99_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "forward_ReLu_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, activation_layer_2_2_2_input_data_V_address0, "(port)activation_layer_2_2_2_input_data_V_address0");
    sc_trace(mVcdFile, activation_layer_2_2_2_input_data_V_ce0, "(port)activation_layer_2_2_2_input_data_V_ce0");
    sc_trace(mVcdFile, activation_layer_2_2_2_input_data_V_q0, "(port)activation_layer_2_2_2_input_data_V_q0");
    sc_trace(mVcdFile, activation_layer_2_2_2_output_data_V_address0, "(port)activation_layer_2_2_2_output_data_V_address0");
    sc_trace(mVcdFile, activation_layer_2_2_2_output_data_V_ce0, "(port)activation_layer_2_2_2_output_data_V_ce0");
    sc_trace(mVcdFile, activation_layer_2_2_2_output_data_V_we0, "(port)activation_layer_2_2_2_output_data_V_we0");
    sc_trace(mVcdFile, activation_layer_2_2_2_output_data_V_d0, "(port)activation_layer_2_2_2_output_data_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_x_assign_cast_fu_95_p1, "p_x_assign_cast_fu_95_p1");
    sc_trace(mVcdFile, p_x_assign_cast_reg_179, "p_x_assign_cast_reg_179");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_105_p2, "i_fu_105_p2");
    sc_trace(mVcdFile, i_reg_187, "i_reg_187");
    sc_trace(mVcdFile, j_fu_117_p2, "j_fu_117_p2");
    sc_trace(mVcdFile, j_reg_195, "j_reg_195");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_123_p1, "tmp_fu_123_p1");
    sc_trace(mVcdFile, tmp_reg_200, "tmp_reg_200");
    sc_trace(mVcdFile, exitcond8_fu_111_p2, "exitcond8_fu_111_p2");
    sc_trace(mVcdFile, ch_fu_133_p2, "ch_fu_133_p2");
    sc_trace(mVcdFile, ch_reg_208, "ch_reg_208");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_2_fu_157_p1, "tmp_2_fu_157_p1");
    sc_trace(mVcdFile, tmp_2_reg_213, "tmp_2_reg_213");
    sc_trace(mVcdFile, exitcond_fu_127_p2, "exitcond_fu_127_p2");
    sc_trace(mVcdFile, p_x_assign_reg_62, "p_x_assign_reg_62");
    sc_trace(mVcdFile, p_y_assign_reg_73, "p_y_assign_reg_73");
    sc_trace(mVcdFile, exitcond7_fu_99_p2, "exitcond7_fu_99_p2");
    sc_trace(mVcdFile, p_z_assign_reg_84, "p_z_assign_reg_84");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_11_fu_139_p1, "tmp_11_fu_139_p1");
    sc_trace(mVcdFile, tmp1_fu_143_p4, "tmp1_fu_143_p4");
    sc_trace(mVcdFile, tmp_s_fu_152_p2, "tmp_s_fu_152_p2");
    sc_trace(mVcdFile, tmp_12_fu_162_p3, "tmp_12_fu_162_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

forward_ReLu::~forward_ReLu() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void forward_ReLu::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond8_fu_111_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_x_assign_reg_62 = i_reg_187.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_x_assign_reg_62 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(exitcond7_fu_99_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_y_assign_reg_73 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_127_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_y_assign_reg_73 = j_reg_195.read();
    }
    if ((esl_seteq<1,1,1>(exitcond8_fu_111_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_z_assign_reg_84 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        p_z_assign_reg_84 = ch_reg_208.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ch_reg_208 = ch_fu_133_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_187 = i_fu_105_p2.read();
        p_x_assign_cast_reg_179 = p_x_assign_cast_fu_95_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_195 = j_fu_117_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_127_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_2_reg_213 = tmp_2_fu_157_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond8_fu_111_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_reg_200 = tmp_fu_123_p1.read();
    }
}

void forward_ReLu::thread_activation_layer_2_2_2_input_data_V_address0() {
    activation_layer_2_2_2_input_data_V_address0 =  (sc_lv<3>) (tmp_2_fu_157_p1.read());
}

void forward_ReLu::thread_activation_layer_2_2_2_input_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        activation_layer_2_2_2_input_data_V_ce0 = ap_const_logic_1;
    } else {
        activation_layer_2_2_2_input_data_V_ce0 = ap_const_logic_0;
    }
}

void forward_ReLu::thread_activation_layer_2_2_2_output_data_V_address0() {
    activation_layer_2_2_2_output_data_V_address0 =  (sc_lv<3>) (tmp_2_reg_213.read());
}

void forward_ReLu::thread_activation_layer_2_2_2_output_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        activation_layer_2_2_2_output_data_V_ce0 = ap_const_logic_1;
    } else {
        activation_layer_2_2_2_output_data_V_ce0 = ap_const_logic_0;
    }
}

void forward_ReLu::thread_activation_layer_2_2_2_output_data_V_d0() {
    activation_layer_2_2_2_output_data_V_d0 = (!tmp_12_fu_162_p3.read()[0].is_01())? sc_lv<16>(): ((tmp_12_fu_162_p3.read()[0].to_bool())? ap_const_lv16_0: activation_layer_2_2_2_input_data_V_q0.read());
}

void forward_ReLu::thread_activation_layer_2_2_2_output_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        activation_layer_2_2_2_output_data_V_we0 = ap_const_logic_1;
    } else {
        activation_layer_2_2_2_output_data_V_we0 = ap_const_logic_0;
    }
}

void forward_ReLu::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void forward_ReLu::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void forward_ReLu::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void forward_ReLu::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void forward_ReLu::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void forward_ReLu::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond7_fu_99_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void forward_ReLu::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void forward_ReLu::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond7_fu_99_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void forward_ReLu::thread_ch_fu_133_p2() {
    ch_fu_133_p2 = (!p_z_assign_reg_84.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_z_assign_reg_84.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void forward_ReLu::thread_exitcond7_fu_99_p2() {
    exitcond7_fu_99_p2 = (!p_x_assign_reg_62.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_x_assign_reg_62.read() == ap_const_lv2_2);
}

void forward_ReLu::thread_exitcond8_fu_111_p2() {
    exitcond8_fu_111_p2 = (!p_y_assign_reg_73.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_y_assign_reg_73.read() == ap_const_lv2_2);
}

void forward_ReLu::thread_exitcond_fu_127_p2() {
    exitcond_fu_127_p2 = (!p_z_assign_reg_84.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_z_assign_reg_84.read() == ap_const_lv2_2);
}

void forward_ReLu::thread_i_fu_105_p2() {
    i_fu_105_p2 = (!p_x_assign_reg_62.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_x_assign_reg_62.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void forward_ReLu::thread_j_fu_117_p2() {
    j_fu_117_p2 = (!p_y_assign_reg_73.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_y_assign_reg_73.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void forward_ReLu::thread_p_x_assign_cast_fu_95_p1() {
    p_x_assign_cast_fu_95_p1 = esl_zext<3,2>(p_x_assign_reg_62.read());
}

void forward_ReLu::thread_tmp1_fu_143_p4() {
    tmp1_fu_143_p4 = esl_concat<2,1>(esl_concat<1,1>(tmp_11_fu_139_p1.read(), tmp_reg_200.read()), ap_const_lv1_0);
}

void forward_ReLu::thread_tmp_11_fu_139_p1() {
    tmp_11_fu_139_p1 = p_z_assign_reg_84.read().range(1-1, 0);
}

void forward_ReLu::thread_tmp_12_fu_162_p3() {
    tmp_12_fu_162_p3 = activation_layer_2_2_2_input_data_V_q0.read().range(15, 15);
}

void forward_ReLu::thread_tmp_2_fu_157_p1() {
    tmp_2_fu_157_p1 = esl_zext<64,3>(tmp_s_fu_152_p2.read());
}

void forward_ReLu::thread_tmp_fu_123_p1() {
    tmp_fu_123_p1 = p_y_assign_reg_73.read().range(1-1, 0);
}

void forward_ReLu::thread_tmp_s_fu_152_p2() {
    tmp_s_fu_152_p2 = (!p_x_assign_cast_reg_179.read().is_01() || !tmp1_fu_143_p4.read().is_01())? sc_lv<3>(): (sc_biguint<3>(p_x_assign_cast_reg_179.read()) + sc_biguint<3>(tmp1_fu_143_p4.read()));
}

void forward_ReLu::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond7_fu_99_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond8_fu_111_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_127_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

