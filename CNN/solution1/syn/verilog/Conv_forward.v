// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_forward (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_address0,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0,
        conv_layer1_2_2_2_1_2_2_2_input_data_V_q0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_address0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_we0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_d0,
        conv_layer1_2_2_2_1_2_2_2_output_data_V_q0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0,
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_layer1_2_2_2_1_2_2_2_input_data_V_address0;
output   conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;
input  [15:0] conv_layer1_2_2_2_1_2_2_2_input_data_V_q0;
output  [2:0] conv_layer1_2_2_2_1_2_2_2_output_data_V_address0;
output   conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0;
output   conv_layer1_2_2_2_1_2_2_2_output_data_V_we0;
output  [15:0] conv_layer1_2_2_2_1_2_2_2_output_data_V_d0;
input  [15:0] conv_layer1_2_2_2_1_2_2_2_output_data_V_q0;
output  [4:0] conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0;
output   conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0;
output   conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0;
output  [15:0] conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0;
input  [15:0] conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] conv_layer1_2_2_2_1_2_2_2_output_data_V_address0;
reg conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0;
reg conv_layer1_2_2_2_1_2_2_2_output_data_V_we0;
reg[15:0] conv_layer1_2_2_2_1_2_2_2_output_data_V_d0;
reg[4:0] conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0;
reg conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0;
reg conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] conv1_W_data_V_address0;
reg    conv1_W_data_V_ce0;
wire   [9:0] conv1_W_data_V_q0;
wire   [1:0] filter_N_fu_183_p2;
reg   [1:0] filter_N_reg_474;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_18_cast_fu_197_p1;
reg   [5:0] tmp_18_cast_reg_479;
wire   [0:0] exitcond_fu_177_p2;
wire   [1:0] i_fu_207_p2;
reg   [1:0] i_reg_487;
wire    ap_CS_fsm_state4;
wire   [31:0] v_2_cast6_fu_223_p1;
reg   [31:0] v_2_cast6_reg_492;
wire   [0:0] exitcond2_fu_201_p2;
wire   [3:0] v_2_cast_fu_227_p1;
reg   [3:0] v_2_cast_reg_497;
wire   [31:0] vert_end_cast_fu_237_p1;
reg   [31:0] vert_end_cast_reg_502;
wire   [1:0] j_fu_247_p2;
reg   [1:0] j_reg_510;
wire    ap_CS_fsm_state5;
wire   [31:0] horiz_start_cast_fu_263_p1;
reg   [31:0] horiz_start_cast_reg_515;
wire   [0:0] exitcond1_fu_241_p2;
reg   [2:0] conv_layer1_output_d_reg_520;
wire   [31:0] horiz_end_cast_fu_296_p1;
reg   [31:0] horiz_end_cast_reg_525;
wire   [30:0] tmp_16_fu_300_p1;
reg   [30:0] tmp_16_reg_530;
wire   [1:0] ch_fu_310_p2;
reg   [1:0] ch_reg_538;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_53_cast_fu_328_p1;
reg   [31:0] tmp_53_cast_reg_543;
wire   [0:0] exitcond3_fu_304_p2;
wire  signed [31:0] p_x_assign_2_cast_fu_349_p1;
reg  signed [31:0] p_x_assign_2_cast_reg_548;
wire   [5:0] tmp_24_fu_417_p2;
reg   [5:0] tmp_24_reg_559;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_20_fu_358_p2;
wire   [31:0] ho_1_fu_422_p2;
reg   [31:0] ho_1_reg_569;
wire   [31:0] v_fu_428_p2;
wire    ap_CS_fsm_state9;
reg  signed [15:0] conv_layer1_a_slice_1_reg_584;
reg  signed [9:0] conv1_W_data_V_load_reg_589;
wire    ap_CS_fsm_state10;
wire    grp_Padding_fu_169_ap_start;
wire    grp_Padding_fu_169_ap_done;
wire    grp_Padding_fu_169_ap_idle;
wire    grp_Padding_fu_169_ap_ready;
wire   [2:0] grp_Padding_fu_169_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0;
wire    grp_Padding_fu_169_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;
wire   [4:0] grp_Padding_fu_169_padd_out_data_V_address0;
wire    grp_Padding_fu_169_padd_out_data_V_ce0;
wire    grp_Padding_fu_169_padd_out_data_V_we0;
wire   [15:0] grp_Padding_fu_169_padd_out_data_V_d0;
reg   [1:0] p_z_assign_reg_104;
wire    ap_CS_fsm_state2;
reg   [1:0] p_x_assign_reg_116;
reg   [1:0] p_y_assign_reg_128;
reg   [1:0] p_z_assign_2_reg_139;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_19_fu_353_p2;
reg   [31:0] p_x_assign_1_reg_150;
reg   [31:0] p_y_assign_1_reg_160;
wire    ap_CS_fsm_state11;
reg    grp_Padding_fu_169_ap_start_reg;
wire   [63:0] tmp_15_fu_285_p1;
wire  signed [63:0] tmp_22_fu_380_p1;
wire  signed [63:0] tmp_24_cast_fu_434_p1;
wire   [4:0] tmp_fu_189_p3;
wire   [1:0] v_2_fu_213_p2;
wire   [2:0] v_2_cast7_fu_219_p1;
wire   [2:0] vert_end_fu_231_p2;
wire   [1:0] horiz_start_fu_253_p2;
wire   [0:0] tmp_40_fu_273_p1;
wire   [1:0] tmp1_fu_267_p2;
wire   [2:0] tmp_s_fu_277_p3;
wire   [2:0] horiz_start_cast5_fu_259_p1;
wire   [2:0] horiz_end_fu_290_p2;
wire   [0:0] tmp_41_fu_316_p1;
wire   [4:0] tmp_17_fu_320_p3;
wire   [2:0] tmp_18_fu_332_p3;
wire   [3:0] tmp_54_cast_fu_340_p1;
wire   [3:0] p_x_assign_2_fu_344_p2;
wire   [31:0] tmp_42_fu_363_p2;
wire   [31:0] tmp2_fu_369_p2;
wire   [31:0] tmp_21_fu_375_p2;
wire   [30:0] tmp_43_fu_385_p1;
wire   [30:0] p_y_assign_s_fu_389_p2;
wire   [31:0] tmp_23_fu_394_p3;
wire   [31:0] tmp3_fu_402_p2;
wire   [31:0] tmp_25_fu_407_p2;
wire   [5:0] tmp_44_fu_413_p1;
wire  signed [23:0] grp_fu_462_p3;
wire   [23:0] grp_fu_462_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_Padding_fu_169_ap_start_reg = 1'b0;
end

Conv_forward_convbkb #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1_W_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_W_data_V_address0),
    .ce0(conv1_W_data_V_ce0),
    .q0(conv1_W_data_V_q0)
);

Padding grp_Padding_fu_169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Padding_fu_169_ap_start),
    .ap_done(grp_Padding_fu_169_ap_done),
    .ap_idle(grp_Padding_fu_169_ap_idle),
    .ap_ready(grp_Padding_fu_169_ap_ready),
    .conv_layer1_2_2_2_1_2_2_2_input_data_V_address0(grp_Padding_fu_169_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0),
    .conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0(grp_Padding_fu_169_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0),
    .conv_layer1_2_2_2_1_2_2_2_input_data_V_q0(conv_layer1_2_2_2_1_2_2_2_input_data_V_q0),
    .padd_out_data_V_address0(grp_Padding_fu_169_padd_out_data_V_address0),
    .padd_out_data_V_ce0(grp_Padding_fu_169_padd_out_data_V_ce0),
    .padd_out_data_V_we0(grp_Padding_fu_169_padd_out_data_V_we0),
    .padd_out_data_V_d0(grp_Padding_fu_169_padd_out_data_V_d0)
);

Lenet_mac_muladd_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
Lenet_mac_muladd_cud_U10(
    .din0(conv_layer1_a_slice_1_reg_584),
    .din1(conv1_W_data_V_load_reg_589),
    .din2(grp_fu_462_p2),
    .dout(grp_fu_462_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Padding_fu_169_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_Padding_fu_169_ap_start_reg <= 1'b1;
        end else if ((grp_Padding_fu_169_ap_ready == 1'b1)) begin
            grp_Padding_fu_169_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_x_assign_1_reg_150 <= v_2_cast6_reg_492;
    end else if (((tmp_20_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        p_x_assign_1_reg_150 <= v_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_x_assign_reg_116 <= i_reg_487;
    end else if (((exitcond_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_x_assign_reg_116 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_19_fu_353_p2 == 1'd1))) begin
        p_y_assign_1_reg_160 <= horiz_start_cast_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_y_assign_1_reg_160 <= ho_1_reg_569;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_304_p2 == 1'd1))) begin
        p_y_assign_reg_128 <= j_reg_510;
    end else if (((exitcond2_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_y_assign_reg_128 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_19_fu_353_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_z_assign_2_reg_139 <= ch_reg_538;
    end else if (((exitcond1_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_z_assign_2_reg_139 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_z_assign_reg_104 <= filter_N_reg_474;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_fu_169_ap_done == 1'b1))) begin
        p_z_assign_reg_104 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ch_reg_538 <= ch_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv1_W_data_V_load_reg_589 <= conv1_W_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer1_a_slice_1_reg_584 <= conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        conv_layer1_output_d_reg_520 <= tmp_15_fu_285_p1;
        horiz_end_cast_reg_525[2 : 1] <= horiz_end_cast_fu_296_p1[2 : 1];
        horiz_start_cast_reg_515[1] <= horiz_start_cast_fu_263_p1[1];
        tmp_16_reg_530[1] <= tmp_16_fu_300_p1[1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        filter_N_reg_474 <= filter_N_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_20_fu_358_p2 == 1'd1))) begin
        ho_1_reg_569 <= ho_1_fu_422_p2;
        tmp_24_reg_559 <= tmp_24_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_487 <= i_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_510 <= j_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_x_assign_2_cast_reg_548[31 : 1] <= p_x_assign_2_cast_fu_349_p1[31 : 1];
        tmp_53_cast_reg_543[4] <= tmp_53_cast_fu_328_p1[4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_18_cast_reg_479[4 : 3] <= tmp_18_cast_fu_197_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        v_2_cast6_reg_492[1] <= v_2_cast6_fu_223_p1[1];
        v_2_cast_reg_497[1] <= v_2_cast_fu_227_p1[1];
        vert_end_cast_reg_502[2 : 1] <= vert_end_cast_fu_237_p1[2 : 1];
    end
end

always @ (*) begin
    if ((((exitcond_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv1_W_data_V_ce0 = 1'b1;
    end else begin
        conv1_W_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0 = tmp_22_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0 = grp_Padding_fu_169_padd_out_data_V_address0;
    end else begin
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0 = grp_Padding_fu_169_padd_out_data_V_ce0;
    end else begin
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0 = grp_Padding_fu_169_padd_out_data_V_we0;
    end else begin
        conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_address0 = conv_layer1_output_d_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_address0 = tmp_15_fu_285_p1;
    end else begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0 = 1'b1;
    end else begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_d0 = {{grp_fu_462_p3[23:8]}};
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_d0 = 16'd0;
    end else begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((exitcond1_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_we0 = 1'b1;
    end else begin
        conv_layer1_2_2_2_1_2_2_2_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_fu_169_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_304_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_19_fu_353_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_20_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ch_fu_310_p2 = (p_z_assign_2_reg_139 + 2'd1);

assign conv1_W_data_V_address0 = tmp_24_cast_fu_434_p1;

assign conv_layer1_2_2_2_1_2_2_2_a_slice_pad_data_V_d0 = grp_Padding_fu_169_padd_out_data_V_d0;

assign conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 = grp_Padding_fu_169_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0;

assign conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 = grp_Padding_fu_169_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;

assign exitcond1_fu_241_p2 = ((p_y_assign_reg_128 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_201_p2 = ((p_x_assign_reg_116 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond3_fu_304_p2 = ((p_z_assign_2_reg_139 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_177_p2 = ((p_z_assign_reg_104 == 2'd2) ? 1'b1 : 1'b0);

assign filter_N_fu_183_p2 = (p_z_assign_reg_104 + 2'd1);

assign grp_Padding_fu_169_ap_start = grp_Padding_fu_169_ap_start_reg;

assign grp_fu_462_p2 = {{conv_layer1_2_2_2_1_2_2_2_output_data_V_q0}, {8'd0}};

assign ho_1_fu_422_p2 = (32'd1 + p_y_assign_1_reg_160);

assign horiz_end_cast_fu_296_p1 = horiz_end_fu_290_p2;

assign horiz_end_fu_290_p2 = (3'd2 + horiz_start_cast5_fu_259_p1);

assign horiz_start_cast5_fu_259_p1 = horiz_start_fu_253_p2;

assign horiz_start_cast_fu_263_p1 = horiz_start_fu_253_p2;

assign horiz_start_fu_253_p2 = p_y_assign_reg_128 << 2'd1;

assign i_fu_207_p2 = (p_x_assign_reg_116 + 2'd1);

assign j_fu_247_p2 = (p_y_assign_reg_128 + 2'd1);

assign p_x_assign_2_cast_fu_349_p1 = $signed(p_x_assign_2_fu_344_p2);

assign p_x_assign_2_fu_344_p2 = (tmp_54_cast_fu_340_p1 - v_2_cast_reg_497);

assign p_y_assign_s_fu_389_p2 = (tmp_43_fu_385_p1 - tmp_16_reg_530);

assign tmp1_fu_267_p2 = (horiz_start_fu_253_p2 + p_x_assign_reg_116);

assign tmp2_fu_369_p2 = (p_x_assign_1_reg_150 + tmp_42_fu_363_p2);

assign tmp3_fu_402_p2 = ($signed(p_x_assign_2_cast_reg_548) + $signed(tmp_23_fu_394_p3));

assign tmp_15_fu_285_p1 = tmp_s_fu_277_p3;

assign tmp_16_fu_300_p1 = horiz_start_fu_253_p2;

assign tmp_17_fu_320_p3 = {{tmp_41_fu_316_p1}, {4'd0}};

assign tmp_18_cast_fu_197_p1 = tmp_fu_189_p3;

assign tmp_18_fu_332_p3 = {{tmp_41_fu_316_p1}, {2'd0}};

assign tmp_19_fu_353_p2 = (($signed(p_x_assign_1_reg_150) < $signed(vert_end_cast_reg_502)) ? 1'b1 : 1'b0);

assign tmp_20_fu_358_p2 = (($signed(p_y_assign_1_reg_160) < $signed(horiz_end_cast_reg_525)) ? 1'b1 : 1'b0);

assign tmp_21_fu_375_p2 = (tmp2_fu_369_p2 + tmp_53_cast_reg_543);

assign tmp_22_fu_380_p1 = $signed(tmp_21_fu_375_p2);

assign tmp_23_fu_394_p3 = {{p_y_assign_s_fu_389_p2}, {1'd0}};

assign tmp_24_cast_fu_434_p1 = $signed(tmp_24_reg_559);

assign tmp_24_fu_417_p2 = (tmp_44_fu_413_p1 + tmp_18_cast_reg_479);

assign tmp_25_fu_407_p2 = (tmp3_fu_402_p2 + p_x_assign_1_reg_150);

assign tmp_40_fu_273_p1 = p_z_assign_reg_104[0:0];

assign tmp_41_fu_316_p1 = p_z_assign_2_reg_139[0:0];

assign tmp_42_fu_363_p2 = p_y_assign_1_reg_160 << 32'd2;

assign tmp_43_fu_385_p1 = p_y_assign_1_reg_160[30:0];

assign tmp_44_fu_413_p1 = tmp_25_fu_407_p2[5:0];

assign tmp_53_cast_fu_328_p1 = tmp_17_fu_320_p3;

assign tmp_54_cast_fu_340_p1 = tmp_18_fu_332_p3;

assign tmp_fu_189_p3 = {{p_z_assign_reg_104}, {3'd0}};

assign tmp_s_fu_277_p3 = {{tmp_40_fu_273_p1}, {tmp1_fu_267_p2}};

assign v_2_cast6_fu_223_p1 = v_2_fu_213_p2;

assign v_2_cast7_fu_219_p1 = v_2_fu_213_p2;

assign v_2_cast_fu_227_p1 = v_2_fu_213_p2;

assign v_2_fu_213_p2 = p_x_assign_reg_116 << 2'd1;

assign v_fu_428_p2 = (p_x_assign_1_reg_150 + 32'd1);

assign vert_end_cast_fu_237_p1 = vert_end_fu_231_p2;

assign vert_end_fu_231_p2 = (3'd2 + v_2_cast7_fu_219_p1);

always @ (posedge ap_clk) begin
    tmp_18_cast_reg_479[2:0] <= 3'b000;
    tmp_18_cast_reg_479[5] <= 1'b0;
    v_2_cast6_reg_492[0] <= 1'b0;
    v_2_cast6_reg_492[31:2] <= 30'b000000000000000000000000000000;
    v_2_cast_reg_497[0] <= 1'b0;
    v_2_cast_reg_497[3:2] <= 2'b00;
    vert_end_cast_reg_502[0] <= 1'b0;
    vert_end_cast_reg_502[31:3] <= 29'b00000000000000000000000000000;
    horiz_start_cast_reg_515[0] <= 1'b0;
    horiz_start_cast_reg_515[31:2] <= 30'b000000000000000000000000000000;
    horiz_end_cast_reg_525[0] <= 1'b0;
    horiz_end_cast_reg_525[31:3] <= 29'b00000000000000000000000000000;
    tmp_16_reg_530[0] <= 1'b0;
    tmp_16_reg_530[30:2] <= 29'b00000000000000000000000000000;
    tmp_53_cast_reg_543[3:0] <= 4'b0000;
    tmp_53_cast_reg_543[31:5] <= 27'b000000000000000000000000000;
    p_x_assign_2_cast_reg_548[0] <= 1'b0;
end

endmodule //Conv_forward
