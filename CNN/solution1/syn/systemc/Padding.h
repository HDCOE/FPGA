// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Padding_HH_
#define _Padding_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Padding : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > conv_layer1_2_2_2_1_2_2_2_input_data_V_address0;
    sc_out< sc_logic > conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0;
    sc_in< sc_lv<16> > conv_layer1_2_2_2_1_2_2_2_input_data_V_q0;
    sc_out< sc_lv<5> > padd_out_data_V_address0;
    sc_out< sc_logic > padd_out_data_V_ce0;
    sc_out< sc_logic > padd_out_data_V_we0;
    sc_out< sc_lv<16> > padd_out_data_V_d0;


    // Module declarations
    Padding(sc_module_name name);
    SC_HAS_PROCESS(Padding);

    ~Padding();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > p_x_assign_cast6_fu_112_p1;
    sc_signal< sc_lv<5> > p_x_assign_cast6_reg_255;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > i_fu_122_p2;
    sc_signal< sc_lv<3> > i_reg_263;
    sc_signal< sc_lv<1> > tmp_s_fu_128_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_268;
    sc_signal< sc_lv<1> > exitcond2_fu_116_p2;
    sc_signal< sc_lv<1> > p_not_fu_134_p2;
    sc_signal< sc_lv<1> > p_not_reg_273;
    sc_signal< sc_lv<3> > j_fu_146_p2;
    sc_signal< sc_lv<3> > j_reg_281;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > brmerge2_fu_174_p2;
    sc_signal< sc_lv<1> > brmerge2_reg_286;
    sc_signal< sc_lv<1> > exitcond1_fu_140_p2;
    sc_signal< sc_lv<2> > tmp_27_fu_180_p1;
    sc_signal< sc_lv<2> > tmp_27_reg_290;
    sc_signal< sc_lv<3> > tmp3_fu_190_p2;
    sc_signal< sc_lv<3> > tmp3_reg_295;
    sc_signal< sc_lv<2> > c_fu_202_p2;
    sc_signal< sc_lv<2> > c_reg_303;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > tmp_11_fu_226_p1;
    sc_signal< sc_lv<64> > tmp_11_reg_308;
    sc_signal< sc_lv<1> > exitcond_fu_196_p2;
    sc_signal< sc_lv<3> > p_x_assign_reg_78;
    sc_signal< sc_lv<3> > p_y_assign_reg_90;
    sc_signal< sc_lv<2> > p_z_assign_reg_101;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > tmp_14_fu_250_p1;
    sc_signal< sc_lv<1> > tmp_9_fu_152_p2;
    sc_signal< sc_lv<1> > p_not1_fu_158_p2;
    sc_signal< sc_lv<1> > tmp1_fu_169_p2;
    sc_signal< sc_lv<1> > tmp_fu_164_p2;
    sc_signal< sc_lv<3> > tmp_28_fu_184_p2;
    sc_signal< sc_lv<1> > tmp_29_fu_208_p1;
    sc_signal< sc_lv<5> > tmp2_fu_212_p4;
    sc_signal< sc_lv<5> > tmp_10_fu_221_p2;
    sc_signal< sc_lv<3> > tmp_12_fu_231_p3;
    sc_signal< sc_lv<3> > tmp4_fu_239_p2;
    sc_signal< sc_lv<3> > tmp_13_fu_245_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_brmerge2_fu_174_p2();
    void thread_c_fu_202_p2();
    void thread_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0();
    void thread_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0();
    void thread_exitcond1_fu_140_p2();
    void thread_exitcond2_fu_116_p2();
    void thread_exitcond_fu_196_p2();
    void thread_i_fu_122_p2();
    void thread_j_fu_146_p2();
    void thread_p_not1_fu_158_p2();
    void thread_p_not_fu_134_p2();
    void thread_p_x_assign_cast6_fu_112_p1();
    void thread_padd_out_data_V_address0();
    void thread_padd_out_data_V_ce0();
    void thread_padd_out_data_V_d0();
    void thread_padd_out_data_V_we0();
    void thread_tmp1_fu_169_p2();
    void thread_tmp2_fu_212_p4();
    void thread_tmp3_fu_190_p2();
    void thread_tmp4_fu_239_p2();
    void thread_tmp_10_fu_221_p2();
    void thread_tmp_11_fu_226_p1();
    void thread_tmp_12_fu_231_p3();
    void thread_tmp_13_fu_245_p2();
    void thread_tmp_14_fu_250_p1();
    void thread_tmp_27_fu_180_p1();
    void thread_tmp_28_fu_184_p2();
    void thread_tmp_29_fu_208_p1();
    void thread_tmp_9_fu_152_p2();
    void thread_tmp_fu_164_p2();
    void thread_tmp_s_fu_128_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
