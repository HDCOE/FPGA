// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "copy_tensor_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic copy_tensor_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic copy_tensor_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> copy_tensor_1::ap_ST_fsm_state1 = "1";
const sc_lv<6> copy_tensor_1::ap_ST_fsm_state2 = "10";
const sc_lv<6> copy_tensor_1::ap_ST_fsm_state3 = "100";
const sc_lv<6> copy_tensor_1::ap_ST_fsm_state4 = "1000";
const sc_lv<6> copy_tensor_1::ap_ST_fsm_state5 = "10000";
const sc_lv<6> copy_tensor_1::ap_ST_fsm_state6 = "100000";
const sc_lv<32> copy_tensor_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> copy_tensor_1::ap_const_lv32_1 = "1";
const sc_lv<32> copy_tensor_1::ap_const_lv32_2 = "10";
const sc_lv<1> copy_tensor_1::ap_const_lv1_1 = "1";
const sc_lv<32> copy_tensor_1::ap_const_lv32_3 = "11";
const sc_lv<32> copy_tensor_1::ap_const_lv32_4 = "100";
const sc_lv<31> copy_tensor_1::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<1> copy_tensor_1::ap_const_lv1_0 = "0";
const sc_lv<32> copy_tensor_1::ap_const_lv32_5 = "101";
const sc_lv<31> copy_tensor_1::ap_const_lv31_1 = "1";
const bool copy_tensor_1::ap_const_boolean_1 = true;

copy_tensor_1::copy_tensor_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_162_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_162_p2 );

    SC_METHOD(thread_i_1_fu_217_p2);
    sensitive << ( i_reg_137 );

    SC_METHOD(thread_i_cast_fu_208_p1);
    sensitive << ( i_reg_137 );

    SC_METHOD(thread_in1_V_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_fu_238_p1 );

    SC_METHOD(thread_in1_V_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_in1_V_d0);
    sensitive << ( in2_V_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_in1_V_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_in2_V_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_7_fu_233_p1 );

    SC_METHOD(thread_in2_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_j_1_fu_182_p2);
    sensitive << ( j_reg_126 );

    SC_METHOD(thread_j_cast_fu_173_p1);
    sensitive << ( j_reg_126 );

    SC_METHOD(thread_k_1_fu_167_p2);
    sensitive << ( k_reg_91 );

    SC_METHOD(thread_k_cast_fu_158_p1);
    sensitive << ( k_reg_91 );

    SC_METHOD(thread_next_mul2_fu_148_p2);
    sensitive << ( size2_y );
    sensitive << ( phi_mul1_reg_114 );

    SC_METHOD(thread_next_mul_fu_153_p2);
    sensitive << ( size1_y );
    sensitive << ( phi_mul_reg_102 );

    SC_METHOD(thread_tmp3_fu_200_p1);
    sensitive << ( size1_x );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp3_fu_200_p2);
    sensitive << ( tmp_reg_295 );
    sensitive << ( tmp3_fu_200_p1 );

    SC_METHOD(thread_tmp4_fu_194_p2);
    sensitive << ( phi_mul1_reg_114 );
    sensitive << ( j_cast_fu_173_p1 );

    SC_METHOD(thread_tmp5_fu_204_p1);
    sensitive << ( size2_x );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp5_fu_204_p2);
    sensitive << ( tmp4_reg_300 );
    sensitive << ( tmp5_fu_204_p1 );

    SC_METHOD(thread_tmp_2_fu_177_p2);
    sensitive << ( size2_y );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_cast_fu_173_p1 );

    SC_METHOD(thread_tmp_3_fu_212_p1);
    sensitive << ( size2_x );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_3_fu_212_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_cast_fu_208_p1 );
    sensitive << ( tmp_3_fu_212_p1 );

    SC_METHOD(thread_tmp_4_fu_223_p2);
    sensitive << ( tmp3_reg_305 );
    sensitive << ( i_cast_fu_208_p1 );

    SC_METHOD(thread_tmp_5_fu_238_p1);
    sensitive << ( tmp_4_reg_323 );

    SC_METHOD(thread_tmp_6_fu_228_p2);
    sensitive << ( tmp5_reg_310 );
    sensitive << ( i_cast_fu_208_p1 );

    SC_METHOD(thread_tmp_7_fu_233_p1);
    sensitive << ( tmp_6_fu_228_p2 );

    SC_METHOD(thread_tmp_fu_188_p2);
    sensitive << ( phi_mul_reg_102 );
    sensitive << ( j_cast_fu_173_p1 );

    SC_METHOD(thread_tmp_s_fu_162_p2);
    sensitive << ( size2_z );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_cast_fu_158_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_177_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_3_fu_212_p2 );
    sensitive << ( tmp_s_fu_162_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "copy_tensor_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in1_V_address0, "(port)in1_V_address0");
    sc_trace(mVcdFile, in1_V_ce0, "(port)in1_V_ce0");
    sc_trace(mVcdFile, in1_V_we0, "(port)in1_V_we0");
    sc_trace(mVcdFile, in1_V_d0, "(port)in1_V_d0");
    sc_trace(mVcdFile, in2_V_address0, "(port)in2_V_address0");
    sc_trace(mVcdFile, in2_V_ce0, "(port)in2_V_ce0");
    sc_trace(mVcdFile, in2_V_q0, "(port)in2_V_q0");
    sc_trace(mVcdFile, size1_x, "(port)size1_x");
    sc_trace(mVcdFile, size1_y, "(port)size1_y");
    sc_trace(mVcdFile, size2_x, "(port)size2_x");
    sc_trace(mVcdFile, size2_y, "(port)size2_y");
    sc_trace(mVcdFile, size2_z, "(port)size2_z");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, next_mul2_fu_148_p2, "next_mul2_fu_148_p2");
    sc_trace(mVcdFile, next_mul2_reg_269, "next_mul2_reg_269");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, next_mul_fu_153_p2, "next_mul_fu_153_p2");
    sc_trace(mVcdFile, next_mul_reg_274, "next_mul_reg_274");
    sc_trace(mVcdFile, k_1_fu_167_p2, "k_1_fu_167_p2");
    sc_trace(mVcdFile, k_1_reg_282, "k_1_reg_282");
    sc_trace(mVcdFile, j_1_fu_182_p2, "j_1_fu_182_p2");
    sc_trace(mVcdFile, j_1_reg_290, "j_1_reg_290");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_188_p2, "tmp_fu_188_p2");
    sc_trace(mVcdFile, tmp_reg_295, "tmp_reg_295");
    sc_trace(mVcdFile, tmp_2_fu_177_p2, "tmp_2_fu_177_p2");
    sc_trace(mVcdFile, tmp4_fu_194_p2, "tmp4_fu_194_p2");
    sc_trace(mVcdFile, tmp4_reg_300, "tmp4_reg_300");
    sc_trace(mVcdFile, tmp3_fu_200_p2, "tmp3_fu_200_p2");
    sc_trace(mVcdFile, tmp3_reg_305, "tmp3_reg_305");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp5_fu_204_p2, "tmp5_fu_204_p2");
    sc_trace(mVcdFile, tmp5_reg_310, "tmp5_reg_310");
    sc_trace(mVcdFile, i_1_fu_217_p2, "i_1_fu_217_p2");
    sc_trace(mVcdFile, i_1_reg_318, "i_1_reg_318");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_4_fu_223_p2, "tmp_4_fu_223_p2");
    sc_trace(mVcdFile, tmp_4_reg_323, "tmp_4_reg_323");
    sc_trace(mVcdFile, tmp_3_fu_212_p2, "tmp_3_fu_212_p2");
    sc_trace(mVcdFile, k_reg_91, "k_reg_91");
    sc_trace(mVcdFile, phi_mul_reg_102, "phi_mul_reg_102");
    sc_trace(mVcdFile, phi_mul1_reg_114, "phi_mul1_reg_114");
    sc_trace(mVcdFile, j_reg_126, "j_reg_126");
    sc_trace(mVcdFile, tmp_s_fu_162_p2, "tmp_s_fu_162_p2");
    sc_trace(mVcdFile, i_reg_137, "i_reg_137");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_7_fu_233_p1, "tmp_7_fu_233_p1");
    sc_trace(mVcdFile, tmp_5_fu_238_p1, "tmp_5_fu_238_p1");
    sc_trace(mVcdFile, k_cast_fu_158_p1, "k_cast_fu_158_p1");
    sc_trace(mVcdFile, j_cast_fu_173_p1, "j_cast_fu_173_p1");
    sc_trace(mVcdFile, tmp3_fu_200_p1, "tmp3_fu_200_p1");
    sc_trace(mVcdFile, tmp5_fu_204_p1, "tmp5_fu_204_p1");
    sc_trace(mVcdFile, i_cast_fu_208_p1, "i_cast_fu_208_p1");
    sc_trace(mVcdFile, tmp_3_fu_212_p1, "tmp_3_fu_212_p1");
    sc_trace(mVcdFile, tmp_6_fu_228_p2, "tmp_6_fu_228_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

copy_tensor_1::~copy_tensor_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void copy_tensor_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_137 = ap_const_lv31_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_reg_137 = i_1_reg_318.read();
    }
    if ((esl_seteq<1,1,1>(tmp_s_fu_162_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_126 = ap_const_lv31_0;
    } else if ((esl_seteq<1,1,1>(tmp_3_fu_212_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        j_reg_126 = j_1_reg_290.read();
    }
    if ((esl_seteq<1,1,1>(tmp_2_fu_177_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        k_reg_91 = k_1_reg_282.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_reg_91 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(tmp_2_fu_177_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        phi_mul1_reg_114 = next_mul2_reg_269.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul1_reg_114 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(tmp_2_fu_177_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        phi_mul_reg_102 = next_mul_reg_274.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul_reg_102 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_1_reg_318 = i_1_fu_217_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_290 = j_1_fu_182_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_1_reg_282 = k_1_fu_167_p2.read();
        next_mul2_reg_269 = next_mul2_fu_148_p2.read();
        next_mul_reg_274 = next_mul_fu_153_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp3_reg_305 = tmp3_fu_200_p2.read();
        tmp5_reg_310 = tmp5_fu_204_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_2_fu_177_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp4_reg_300 = tmp4_fu_194_p2.read();
        tmp_reg_295 = tmp_fu_188_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_3_fu_212_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        tmp_4_reg_323 = tmp_4_fu_223_p2.read();
    }
}

void copy_tensor_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void copy_tensor_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void copy_tensor_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void copy_tensor_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void copy_tensor_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void copy_tensor_1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void copy_tensor_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_s_fu_162_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void copy_tensor_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void copy_tensor_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_162_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void copy_tensor_1::thread_i_1_fu_217_p2() {
    i_1_fu_217_p2 = (!i_reg_137.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_137.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void copy_tensor_1::thread_i_cast_fu_208_p1() {
    i_cast_fu_208_p1 = esl_zext<32,31>(i_reg_137.read());
}

void copy_tensor_1::thread_in1_V_address0() {
    in1_V_address0 =  (sc_lv<3>) (tmp_5_fu_238_p1.read());
}

void copy_tensor_1::thread_in1_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        in1_V_ce0 = ap_const_logic_1;
    } else {
        in1_V_ce0 = ap_const_logic_0;
    }
}

void copy_tensor_1::thread_in1_V_d0() {
    in1_V_d0 = in2_V_q0.read();
}

void copy_tensor_1::thread_in1_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        in1_V_we0 = ap_const_logic_1;
    } else {
        in1_V_we0 = ap_const_logic_0;
    }
}

void copy_tensor_1::thread_in2_V_address0() {
    in2_V_address0 =  (sc_lv<3>) (tmp_7_fu_233_p1.read());
}

void copy_tensor_1::thread_in2_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        in2_V_ce0 = ap_const_logic_1;
    } else {
        in2_V_ce0 = ap_const_logic_0;
    }
}

void copy_tensor_1::thread_j_1_fu_182_p2() {
    j_1_fu_182_p2 = (!j_reg_126.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_reg_126.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void copy_tensor_1::thread_j_cast_fu_173_p1() {
    j_cast_fu_173_p1 = esl_zext<32,31>(j_reg_126.read());
}

void copy_tensor_1::thread_k_1_fu_167_p2() {
    k_1_fu_167_p2 = (!k_reg_91.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(k_reg_91.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void copy_tensor_1::thread_k_cast_fu_158_p1() {
    k_cast_fu_158_p1 = esl_zext<32,31>(k_reg_91.read());
}

void copy_tensor_1::thread_next_mul2_fu_148_p2() {
    next_mul2_fu_148_p2 = (!phi_mul1_reg_114.read().is_01() || !size2_y.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_114.read()) + sc_biguint<32>(size2_y.read()));
}

void copy_tensor_1::thread_next_mul_fu_153_p2() {
    next_mul_fu_153_p2 = (!phi_mul_reg_102.read().is_01() || !size1_y.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_102.read()) + sc_biguint<32>(size1_y.read()));
}

void copy_tensor_1::thread_tmp3_fu_200_p1() {
    tmp3_fu_200_p1 = size1_x.read();
}

void copy_tensor_1::thread_tmp3_fu_200_p2() {
    tmp3_fu_200_p2 = (!tmp_reg_295.read().is_01() || !tmp3_fu_200_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_reg_295.read()) * sc_bigint<32>(tmp3_fu_200_p1.read());
}

void copy_tensor_1::thread_tmp4_fu_194_p2() {
    tmp4_fu_194_p2 = (!j_cast_fu_173_p1.read().is_01() || !phi_mul1_reg_114.read().is_01())? sc_lv<32>(): (sc_biguint<32>(j_cast_fu_173_p1.read()) + sc_biguint<32>(phi_mul1_reg_114.read()));
}

void copy_tensor_1::thread_tmp5_fu_204_p1() {
    tmp5_fu_204_p1 = size2_x.read();
}

void copy_tensor_1::thread_tmp5_fu_204_p2() {
    tmp5_fu_204_p2 = (!tmp4_reg_300.read().is_01() || !tmp5_fu_204_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp4_reg_300.read()) * sc_bigint<32>(tmp5_fu_204_p1.read());
}

void copy_tensor_1::thread_tmp_2_fu_177_p2() {
    tmp_2_fu_177_p2 = (!j_cast_fu_173_p1.read().is_01() || !size2_y.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_cast_fu_173_p1.read()) < sc_bigint<32>(size2_y.read()));
}

void copy_tensor_1::thread_tmp_3_fu_212_p1() {
    tmp_3_fu_212_p1 = size2_x.read();
}

void copy_tensor_1::thread_tmp_3_fu_212_p2() {
    tmp_3_fu_212_p2 = (!i_cast_fu_208_p1.read().is_01() || !tmp_3_fu_212_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_208_p1.read()) < sc_bigint<32>(tmp_3_fu_212_p1.read()));
}

void copy_tensor_1::thread_tmp_4_fu_223_p2() {
    tmp_4_fu_223_p2 = (!i_cast_fu_208_p1.read().is_01() || !tmp3_reg_305.read().is_01())? sc_lv<32>(): (sc_biguint<32>(i_cast_fu_208_p1.read()) + sc_biguint<32>(tmp3_reg_305.read()));
}

void copy_tensor_1::thread_tmp_5_fu_238_p1() {
    tmp_5_fu_238_p1 = esl_sext<64,32>(tmp_4_reg_323.read());
}

void copy_tensor_1::thread_tmp_6_fu_228_p2() {
    tmp_6_fu_228_p2 = (!i_cast_fu_208_p1.read().is_01() || !tmp5_reg_310.read().is_01())? sc_lv<32>(): (sc_biguint<32>(i_cast_fu_208_p1.read()) + sc_biguint<32>(tmp5_reg_310.read()));
}

void copy_tensor_1::thread_tmp_7_fu_233_p1() {
    tmp_7_fu_233_p1 = esl_sext<64,32>(tmp_6_fu_228_p2.read());
}

void copy_tensor_1::thread_tmp_fu_188_p2() {
    tmp_fu_188_p2 = (!j_cast_fu_173_p1.read().is_01() || !phi_mul_reg_102.read().is_01())? sc_lv<32>(): (sc_biguint<32>(j_cast_fu_173_p1.read()) + sc_biguint<32>(phi_mul_reg_102.read()));
}

void copy_tensor_1::thread_tmp_s_fu_162_p2() {
    tmp_s_fu_162_p2 = (!k_cast_fu_158_p1.read().is_01() || !size2_z.read().is_01())? sc_lv<1>(): (sc_bigint<32>(k_cast_fu_158_p1.read()) < sc_bigint<32>(size2_z.read()));
}

void copy_tensor_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_s_fu_162_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_2_fu_177_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(tmp_3_fu_212_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

