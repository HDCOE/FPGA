-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forward_fc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fc_layer_2_2_2_2_input_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    fc_layer_2_2_2_2_input_data_V_ce0 : OUT STD_LOGIC;
    fc_layer_2_2_2_2_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of forward_fc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc1_W_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc1_W_data_V_ce0 : STD_LOGIC;
    signal fc1_W_data_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal filter_fu_183_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal filter_reg_336 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_x_assign_cast_fu_201_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_x_assign_cast_reg_341 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_211_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_349 : STD_LOGIC_VECTOR (1 downto 0);
    signal fc_layer_output_data_2_fu_221_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer_output_data_3_fu_229_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_243_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_367 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_8_fu_249_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_259_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_380 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_6_fu_278_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_reg_385 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal fc1_W_data_V_load_reg_400 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal fc_layer_output_data_reg_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc_layer_output_data_1_reg_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_z_assign_reg_96 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_s_reg_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_x_assign_reg_120 : STD_LOGIC_VECTOR (1 downto 0);
    signal dot_out_1_reg_131 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_y_assign_reg_143 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_1_reg_154 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_z_assign_1_reg_166 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_217_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_265_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_269_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_283_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_324_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component Lenet_mac_muladd_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Conv_forward_convbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    fc1_W_data_V_U : component Conv_forward_convbkb
    generic map (
        DataWidth => 10,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_W_data_V_address0,
        ce0 => fc1_W_data_V_ce0,
        q0 => fc1_W_data_V_q0);

    Lenet_mac_muladd_eOg_U18 : component Lenet_mac_muladd_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc1_W_data_V_load_reg_400,
        din1 => fc_layer_2_2_2_2_input_data_V_q0,
        din2 => grp_fu_324_p2,
        dout => grp_fu_324_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((exitcond1_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_0_preg <= fc_layer_output_data_reg_72;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((exitcond1_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_1_preg <= fc_layer_output_data_1_reg_84;
                end if; 
            end if;
        end if;
    end process;


    dot_out_1_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                dot_out_1_reg_131 <= p_Val2_s_reg_108;
            elsif (((exitcond_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                dot_out_1_reg_131 <= p_Val2_1_reg_154;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_1_reg_154 <= dot_out_1_reg_131;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_Val2_1_reg_154 <= grp_fu_324_p3(23 downto 8);
            end if; 
        end if;
    end process;

    p_Val2_s_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_108 <= ap_const_lv16_0;
            elsif (((exitcond3_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_reg_108 <= dot_out_1_reg_131;
            end if; 
        end if;
    end process;

    p_x_assign_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_x_assign_reg_120 <= ap_const_lv2_0;
            elsif (((exitcond3_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_x_assign_reg_120 <= i_reg_349;
            end if; 
        end if;
    end process;

    p_y_assign_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_y_assign_reg_143 <= ap_const_lv2_0;
            elsif (((exitcond_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_y_assign_reg_143 <= j_reg_367;
            end if; 
        end if;
    end process;

    p_z_assign_1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_z_assign_1_reg_166 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_z_assign_1_reg_166 <= c_reg_380;
            end if; 
        end if;
    end process;

    p_z_assign_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_z_assign_reg_96 <= filter_reg_336;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_z_assign_reg_96 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                c_reg_380 <= c_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                fc1_W_data_V_load_reg_400 <= fc1_W_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                fc_layer_output_data_1_reg_84 <= fc_layer_output_data_3_fu_229_p3;
                fc_layer_output_data_reg_72 <= fc_layer_output_data_2_fu_221_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                filter_reg_336 <= filter_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_349 <= i_fu_211_p2;
                    p_x_assign_cast_reg_341(1 downto 0) <= p_x_assign_cast_fu_201_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_367 <= j_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_6_reg_385 <= tmp_6_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_8_reg_372 <= tmp_8_fu_249_p1;
            end if;
        end if;
    end process;
    p_x_assign_cast_reg_341(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_205_p2, ap_CS_fsm_state4, exitcond3_fu_237_p2, ap_CS_fsm_state5, exitcond_fu_253_p2, exitcond1_fu_177_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_177_p2)
    begin
        if ((((exitcond1_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_177_p2)
    begin
        if (((exitcond1_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state2, fc_layer_output_data_reg_72, exitcond1_fu_177_p2, ap_return_0_preg)
    begin
        if (((exitcond1_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_0 <= fc_layer_output_data_reg_72;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state2, fc_layer_output_data_1_reg_84, exitcond1_fu_177_p2, ap_return_1_preg)
    begin
        if (((exitcond1_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_1 <= fc_layer_output_data_1_reg_84;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    c_fu_259_p2 <= std_logic_vector(unsigned(p_z_assign_1_reg_166) + unsigned(ap_const_lv2_1));
    exitcond1_fu_177_p2 <= "1" when (p_z_assign_reg_96 = ap_const_lv2_2) else "0";
    exitcond2_fu_205_p2 <= "1" when (p_x_assign_reg_120 = ap_const_lv2_2) else "0";
    exitcond3_fu_237_p2 <= "1" when (p_y_assign_reg_143 = ap_const_lv2_2) else "0";
    exitcond_fu_253_p2 <= "1" when (p_z_assign_1_reg_166 = ap_const_lv2_2) else "0";
    fc1_W_data_V_address0 <= tmp_3_fu_291_p1(4 - 1 downto 0);

    fc1_W_data_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc1_W_data_V_ce0 <= ap_const_logic_1;
        else 
            fc1_W_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer_2_2_2_2_input_data_V_address0 <= tmp_7_fu_296_p1(3 - 1 downto 0);

    fc_layer_2_2_2_2_input_data_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer_2_2_2_2_input_data_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer_2_2_2_2_input_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer_output_data_2_fu_221_p3 <= 
        fc_layer_output_data_reg_72 when (tmp_fu_217_p1(0) = '1') else 
        p_Val2_s_reg_108;
    fc_layer_output_data_3_fu_229_p3 <= 
        p_Val2_s_reg_108 when (tmp_fu_217_p1(0) = '1') else 
        fc_layer_output_data_1_reg_84;
    filter_fu_183_p2 <= std_logic_vector(unsigned(p_z_assign_reg_96) + unsigned(ap_const_lv2_1));
    grp_fu_324_p2 <= (p_Val2_1_reg_154 & ap_const_lv8_0);
    i_fu_211_p2 <= std_logic_vector(unsigned(p_x_assign_reg_120) + unsigned(ap_const_lv2_1));
    j_fu_243_p2 <= std_logic_vector(unsigned(p_y_assign_reg_143) + unsigned(ap_const_lv2_1));
    p_x_assign_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_x_assign_reg_120),3));
    tmp1_fu_269_p4 <= ((tmp_10_fu_265_p1 & tmp_8_reg_372) & ap_const_lv1_0);
    tmp_10_fu_265_p1 <= p_z_assign_1_reg_166(1 - 1 downto 0);
    tmp_1_fu_283_p3 <= (p_z_assign_reg_96 & tmp_6_fu_278_p2);
    tmp_3_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_283_p3),64));
    tmp_6_fu_278_p2 <= std_logic_vector(unsigned(p_x_assign_cast_reg_341) + unsigned(tmp1_fu_269_p4));
    tmp_7_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_385),64));
    tmp_8_fu_249_p1 <= p_y_assign_reg_143(1 - 1 downto 0);
    tmp_fu_217_p1 <= p_z_assign_reg_96(1 - 1 downto 0);
end behav;
