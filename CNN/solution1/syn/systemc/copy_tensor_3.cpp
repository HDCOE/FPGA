// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "copy_tensor_3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic copy_tensor_3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic copy_tensor_3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> copy_tensor_3::ap_ST_fsm_state1 = "1";
const sc_lv<2> copy_tensor_3::ap_ST_fsm_state2 = "10";
const sc_lv<32> copy_tensor_3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> copy_tensor_3::ap_const_lv32_1 = "1";
const sc_lv<2> copy_tensor_3::ap_const_lv2_0 = "00";
const sc_lv<1> copy_tensor_3::ap_const_lv1_0 = "0";
const sc_lv<1> copy_tensor_3::ap_const_lv1_1 = "1";
const sc_lv<2> copy_tensor_3::ap_const_lv2_2 = "10";
const sc_lv<2> copy_tensor_3::ap_const_lv2_1 = "1";
const bool copy_tensor_3::ap_const_boolean_1 = true;

copy_tensor_3::copy_tensor_3(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_59_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_59_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_59_p2 );
    sensitive << ( in1_V_s_fu_26 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_59_p2 );
    sensitive << ( in1_V16_s_fu_22 );

    SC_METHOD(thread_exitcond2_fu_59_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_reg_42 );

    SC_METHOD(thread_in1_V_0_in1_V16_2_fu_82_p3);
    sensitive << ( p_read7 );
    sensitive << ( in1_V16_s_fu_22 );
    sensitive << ( tmp_fu_71_p1 );

    SC_METHOD(thread_in1_V_2_in1_V_fu_75_p3);
    sensitive << ( p_read2 );
    sensitive << ( in1_V_s_fu_26 );
    sensitive << ( tmp_fu_71_p1 );

    SC_METHOD(thread_k_1_fu_65_p2);
    sensitive << ( k_reg_42 );

    SC_METHOD(thread_tmp_fu_71_p1);
    sensitive << ( k_reg_42 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_59_p2 );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "copy_tensor_3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, k_1_fu_65_p2, "k_1_fu_65_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_reg_42, "k_reg_42");
    sc_trace(mVcdFile, exitcond2_fu_59_p2, "exitcond2_fu_59_p2");
    sc_trace(mVcdFile, in1_V16_s_fu_22, "in1_V16_s_fu_22");
    sc_trace(mVcdFile, in1_V_0_in1_V16_2_fu_82_p3, "in1_V_0_in1_V16_2_fu_82_p3");
    sc_trace(mVcdFile, in1_V_s_fu_26, "in1_V_s_fu_26");
    sc_trace(mVcdFile, in1_V_2_in1_V_fu_75_p3, "in1_V_2_in1_V_fu_75_p3");
    sc_trace(mVcdFile, tmp_fu_71_p1, "tmp_fu_71_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

copy_tensor_3::~copy_tensor_3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void copy_tensor_3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_59_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        k_reg_42 = k_1_fu_65_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        k_reg_42 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_59_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        in1_V16_s_fu_22 = in1_V_0_in1_V16_2_fu_82_p3.read();
        in1_V_s_fu_26 = in1_V_2_in1_V_fu_75_p3.read();
    }
}

void copy_tensor_3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void copy_tensor_3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void copy_tensor_3::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond2_fu_59_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void copy_tensor_3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void copy_tensor_3::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond2_fu_59_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void copy_tensor_3::thread_ap_return_0() {
    ap_return_0 = in1_V_s_fu_26.read();
}

void copy_tensor_3::thread_ap_return_1() {
    ap_return_1 = in1_V16_s_fu_22.read();
}

void copy_tensor_3::thread_exitcond2_fu_59_p2() {
    exitcond2_fu_59_p2 = (!k_reg_42.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_42.read() == ap_const_lv2_2);
}

void copy_tensor_3::thread_in1_V_0_in1_V16_2_fu_82_p3() {
    in1_V_0_in1_V16_2_fu_82_p3 = (!tmp_fu_71_p1.read()[0].is_01())? sc_lv<16>(): ((tmp_fu_71_p1.read()[0].to_bool())? p_read7.read(): in1_V16_s_fu_22.read());
}

void copy_tensor_3::thread_in1_V_2_in1_V_fu_75_p3() {
    in1_V_2_in1_V_fu_75_p3 = (!tmp_fu_71_p1.read()[0].is_01())? sc_lv<16>(): ((tmp_fu_71_p1.read()[0].to_bool())? in1_V_s_fu_26.read(): p_read2.read());
}

void copy_tensor_3::thread_k_1_fu_65_p2() {
    k_1_fu_65_p2 = (!k_reg_42.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(k_reg_42.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void copy_tensor_3::thread_tmp_fu_71_p1() {
    tmp_fu_71_p1 = k_reg_42.read().range(1-1, 0);
}

void copy_tensor_3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_59_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

