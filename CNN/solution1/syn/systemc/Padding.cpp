// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Padding.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Padding::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Padding::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Padding::ap_ST_fsm_state1 = "1";
const sc_lv<5> Padding::ap_ST_fsm_state2 = "10";
const sc_lv<5> Padding::ap_ST_fsm_state3 = "100";
const sc_lv<5> Padding::ap_ST_fsm_state4 = "1000";
const sc_lv<5> Padding::ap_ST_fsm_state5 = "10000";
const sc_lv<32> Padding::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Padding::ap_const_lv32_1 = "1";
const sc_lv<1> Padding::ap_const_lv1_0 = "0";
const sc_lv<32> Padding::ap_const_lv32_2 = "10";
const sc_lv<32> Padding::ap_const_lv32_3 = "11";
const sc_lv<3> Padding::ap_const_lv3_0 = "000";
const sc_lv<1> Padding::ap_const_lv1_1 = "1";
const sc_lv<32> Padding::ap_const_lv32_4 = "100";
const sc_lv<2> Padding::ap_const_lv2_0 = "00";
const sc_lv<16> Padding::ap_const_lv16_0 = "0000000000000000";
const sc_lv<3> Padding::ap_const_lv3_4 = "100";
const sc_lv<3> Padding::ap_const_lv3_1 = "1";
const sc_lv<3> Padding::ap_const_lv3_2 = "10";
const sc_lv<2> Padding::ap_const_lv2_2 = "10";
const sc_lv<2> Padding::ap_const_lv2_1 = "1";
const sc_lv<3> Padding::ap_const_lv3_5 = "101";
const bool Padding::ap_const_boolean_1 = true;

Padding::Padding(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_116_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_116_p2 );

    SC_METHOD(thread_brmerge2_fu_174_p2);
    sensitive << ( tmp1_fu_169_p2 );
    sensitive << ( tmp_fu_164_p2 );

    SC_METHOD(thread_c_fu_202_p2);
    sensitive << ( p_z_assign_reg_101 );

    SC_METHOD(thread_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_14_fu_250_p1 );

    SC_METHOD(thread_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond1_fu_140_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_y_assign_reg_90 );

    SC_METHOD(thread_exitcond2_fu_116_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_x_assign_reg_78 );

    SC_METHOD(thread_exitcond_fu_196_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_z_assign_reg_101 );

    SC_METHOD(thread_i_fu_122_p2);
    sensitive << ( p_x_assign_reg_78 );

    SC_METHOD(thread_j_fu_146_p2);
    sensitive << ( p_y_assign_reg_90 );

    SC_METHOD(thread_p_not1_fu_158_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_140_p2 );
    sensitive << ( p_y_assign_reg_90 );

    SC_METHOD(thread_p_not_fu_134_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_116_p2 );
    sensitive << ( p_x_assign_reg_78 );

    SC_METHOD(thread_p_x_assign_cast6_fu_112_p1);
    sensitive << ( p_x_assign_reg_78 );

    SC_METHOD(thread_padd_out_data_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_11_fu_226_p1 );
    sensitive << ( tmp_11_reg_308 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_padd_out_data_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_padd_out_data_V_d0);
    sensitive << ( conv_layer1_2_2_2_1_2_2_2_input_data_V_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_padd_out_data_V_we0);
    sensitive << ( brmerge2_reg_286 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_196_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp1_fu_169_p2);
    sensitive << ( p_not_reg_273 );
    sensitive << ( p_not1_fu_158_p2 );

    SC_METHOD(thread_tmp2_fu_212_p4);
    sensitive << ( tmp_27_reg_290 );
    sensitive << ( tmp_29_fu_208_p1 );

    SC_METHOD(thread_tmp3_fu_190_p2);
    sensitive << ( p_x_assign_reg_78 );
    sensitive << ( tmp_28_fu_184_p2 );

    SC_METHOD(thread_tmp4_fu_239_p2);
    sensitive << ( tmp_12_fu_231_p3 );

    SC_METHOD(thread_tmp_10_fu_221_p2);
    sensitive << ( p_x_assign_cast6_reg_255 );
    sensitive << ( tmp2_fu_212_p4 );

    SC_METHOD(thread_tmp_11_fu_226_p1);
    sensitive << ( tmp_10_fu_221_p2 );

    SC_METHOD(thread_tmp_12_fu_231_p3);
    sensitive << ( tmp_29_fu_208_p1 );

    SC_METHOD(thread_tmp_13_fu_245_p2);
    sensitive << ( tmp3_reg_295 );
    sensitive << ( tmp4_fu_239_p2 );

    SC_METHOD(thread_tmp_14_fu_250_p1);
    sensitive << ( tmp_13_fu_245_p2 );

    SC_METHOD(thread_tmp_27_fu_180_p1);
    sensitive << ( p_y_assign_reg_90 );

    SC_METHOD(thread_tmp_28_fu_184_p2);
    sensitive << ( p_y_assign_reg_90 );

    SC_METHOD(thread_tmp_29_fu_208_p1);
    sensitive << ( p_z_assign_reg_101 );

    SC_METHOD(thread_tmp_9_fu_152_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_140_p2 );
    sensitive << ( p_y_assign_reg_90 );

    SC_METHOD(thread_tmp_fu_164_p2);
    sensitive << ( tmp_s_reg_268 );
    sensitive << ( tmp_9_fu_152_p2 );

    SC_METHOD(thread_tmp_s_fu_128_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_116_p2 );
    sensitive << ( p_x_assign_reg_78 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_116_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_140_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_196_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Padding_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, conv_layer1_2_2_2_1_2_2_2_input_data_V_address0, "(port)conv_layer1_2_2_2_1_2_2_2_input_data_V_address0");
    sc_trace(mVcdFile, conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0, "(port)conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0");
    sc_trace(mVcdFile, conv_layer1_2_2_2_1_2_2_2_input_data_V_q0, "(port)conv_layer1_2_2_2_1_2_2_2_input_data_V_q0");
    sc_trace(mVcdFile, padd_out_data_V_address0, "(port)padd_out_data_V_address0");
    sc_trace(mVcdFile, padd_out_data_V_ce0, "(port)padd_out_data_V_ce0");
    sc_trace(mVcdFile, padd_out_data_V_we0, "(port)padd_out_data_V_we0");
    sc_trace(mVcdFile, padd_out_data_V_d0, "(port)padd_out_data_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_x_assign_cast6_fu_112_p1, "p_x_assign_cast6_fu_112_p1");
    sc_trace(mVcdFile, p_x_assign_cast6_reg_255, "p_x_assign_cast6_reg_255");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_122_p2, "i_fu_122_p2");
    sc_trace(mVcdFile, i_reg_263, "i_reg_263");
    sc_trace(mVcdFile, tmp_s_fu_128_p2, "tmp_s_fu_128_p2");
    sc_trace(mVcdFile, tmp_s_reg_268, "tmp_s_reg_268");
    sc_trace(mVcdFile, exitcond2_fu_116_p2, "exitcond2_fu_116_p2");
    sc_trace(mVcdFile, p_not_fu_134_p2, "p_not_fu_134_p2");
    sc_trace(mVcdFile, p_not_reg_273, "p_not_reg_273");
    sc_trace(mVcdFile, j_fu_146_p2, "j_fu_146_p2");
    sc_trace(mVcdFile, j_reg_281, "j_reg_281");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, brmerge2_fu_174_p2, "brmerge2_fu_174_p2");
    sc_trace(mVcdFile, brmerge2_reg_286, "brmerge2_reg_286");
    sc_trace(mVcdFile, exitcond1_fu_140_p2, "exitcond1_fu_140_p2");
    sc_trace(mVcdFile, tmp_27_fu_180_p1, "tmp_27_fu_180_p1");
    sc_trace(mVcdFile, tmp_27_reg_290, "tmp_27_reg_290");
    sc_trace(mVcdFile, tmp3_fu_190_p2, "tmp3_fu_190_p2");
    sc_trace(mVcdFile, tmp3_reg_295, "tmp3_reg_295");
    sc_trace(mVcdFile, c_fu_202_p2, "c_fu_202_p2");
    sc_trace(mVcdFile, c_reg_303, "c_reg_303");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_11_fu_226_p1, "tmp_11_fu_226_p1");
    sc_trace(mVcdFile, tmp_11_reg_308, "tmp_11_reg_308");
    sc_trace(mVcdFile, exitcond_fu_196_p2, "exitcond_fu_196_p2");
    sc_trace(mVcdFile, p_x_assign_reg_78, "p_x_assign_reg_78");
    sc_trace(mVcdFile, p_y_assign_reg_90, "p_y_assign_reg_90");
    sc_trace(mVcdFile, p_z_assign_reg_101, "p_z_assign_reg_101");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_14_fu_250_p1, "tmp_14_fu_250_p1");
    sc_trace(mVcdFile, tmp_9_fu_152_p2, "tmp_9_fu_152_p2");
    sc_trace(mVcdFile, p_not1_fu_158_p2, "p_not1_fu_158_p2");
    sc_trace(mVcdFile, tmp1_fu_169_p2, "tmp1_fu_169_p2");
    sc_trace(mVcdFile, tmp_fu_164_p2, "tmp_fu_164_p2");
    sc_trace(mVcdFile, tmp_28_fu_184_p2, "tmp_28_fu_184_p2");
    sc_trace(mVcdFile, tmp_29_fu_208_p1, "tmp_29_fu_208_p1");
    sc_trace(mVcdFile, tmp2_fu_212_p4, "tmp2_fu_212_p4");
    sc_trace(mVcdFile, tmp_10_fu_221_p2, "tmp_10_fu_221_p2");
    sc_trace(mVcdFile, tmp_12_fu_231_p3, "tmp_12_fu_231_p3");
    sc_trace(mVcdFile, tmp4_fu_239_p2, "tmp4_fu_239_p2");
    sc_trace(mVcdFile, tmp_13_fu_245_p2, "tmp_13_fu_245_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Padding::~Padding() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Padding::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_140_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_x_assign_reg_78 = i_reg_263.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_x_assign_reg_78 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_196_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_y_assign_reg_90 = j_reg_281.read();
    } else if ((esl_seteq<1,1,1>(exitcond2_fu_116_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_y_assign_reg_90 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_140_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_z_assign_reg_101 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        p_z_assign_reg_101 = c_reg_303.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_140_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        brmerge2_reg_286 = brmerge2_fu_174_p2.read();
        tmp3_reg_295 = tmp3_fu_190_p2.read();
        tmp_27_reg_290 = tmp_27_fu_180_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_reg_303 = c_fu_202_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_263 = i_fu_122_p2.read();
        p_x_assign_cast6_reg_255 = p_x_assign_cast6_fu_112_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_281 = j_fu_146_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_116_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_not_reg_273 = p_not_fu_134_p2.read();
        tmp_s_reg_268 = tmp_s_fu_128_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_196_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_11_reg_308 = tmp_11_fu_226_p1.read();
    }
}

void Padding::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Padding::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Padding::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Padding::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Padding::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Padding::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond2_fu_116_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Padding::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Padding::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond2_fu_116_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Padding::thread_brmerge2_fu_174_p2() {
    brmerge2_fu_174_p2 = (tmp1_fu_169_p2.read() | tmp_fu_164_p2.read());
}

void Padding::thread_c_fu_202_p2() {
    c_fu_202_p2 = (!p_z_assign_reg_101.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_z_assign_reg_101.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Padding::thread_conv_layer1_2_2_2_1_2_2_2_input_data_V_address0() {
    conv_layer1_2_2_2_1_2_2_2_input_data_V_address0 =  (sc_lv<3>) (tmp_14_fu_250_p1.read());
}

void Padding::thread_conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 = ap_const_logic_1;
    } else {
        conv_layer1_2_2_2_1_2_2_2_input_data_V_ce0 = ap_const_logic_0;
    }
}

void Padding::thread_exitcond1_fu_140_p2() {
    exitcond1_fu_140_p2 = (!p_y_assign_reg_90.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(p_y_assign_reg_90.read() == ap_const_lv3_4);
}

void Padding::thread_exitcond2_fu_116_p2() {
    exitcond2_fu_116_p2 = (!p_x_assign_reg_78.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(p_x_assign_reg_78.read() == ap_const_lv3_4);
}

void Padding::thread_exitcond_fu_196_p2() {
    exitcond_fu_196_p2 = (!p_z_assign_reg_101.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(p_z_assign_reg_101.read() == ap_const_lv2_2);
}

void Padding::thread_i_fu_122_p2() {
    i_fu_122_p2 = (!p_x_assign_reg_78.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(p_x_assign_reg_78.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Padding::thread_j_fu_146_p2() {
    j_fu_146_p2 = (!p_y_assign_reg_90.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(p_y_assign_reg_90.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Padding::thread_p_not1_fu_158_p2() {
    p_not1_fu_158_p2 = (!p_y_assign_reg_90.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): (sc_biguint<3>(p_y_assign_reg_90.read()) > sc_biguint<3>(ap_const_lv3_2));
}

void Padding::thread_p_not_fu_134_p2() {
    p_not_fu_134_p2 = (!p_x_assign_reg_78.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): (sc_biguint<3>(p_x_assign_reg_78.read()) > sc_biguint<3>(ap_const_lv3_2));
}

void Padding::thread_p_x_assign_cast6_fu_112_p1() {
    p_x_assign_cast6_fu_112_p1 = esl_zext<5,3>(p_x_assign_reg_78.read());
}

void Padding::thread_padd_out_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        padd_out_data_V_address0 =  (sc_lv<5>) (tmp_11_reg_308.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        padd_out_data_V_address0 =  (sc_lv<5>) (tmp_11_fu_226_p1.read());
    } else {
        padd_out_data_V_address0 = "XXXXX";
    }
}

void Padding::thread_padd_out_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        padd_out_data_V_ce0 = ap_const_logic_1;
    } else {
        padd_out_data_V_ce0 = ap_const_logic_0;
    }
}

void Padding::thread_padd_out_data_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        padd_out_data_V_d0 = conv_layer1_2_2_2_1_2_2_2_input_data_V_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        padd_out_data_V_d0 = ap_const_lv16_0;
    } else {
        padd_out_data_V_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void Padding::thread_padd_out_data_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_196_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(brmerge2_reg_286.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, brmerge2_reg_286.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())))) {
        padd_out_data_V_we0 = ap_const_logic_1;
    } else {
        padd_out_data_V_we0 = ap_const_logic_0;
    }
}

void Padding::thread_tmp1_fu_169_p2() {
    tmp1_fu_169_p2 = (p_not_reg_273.read() | p_not1_fu_158_p2.read());
}

void Padding::thread_tmp2_fu_212_p4() {
    tmp2_fu_212_p4 = esl_concat<3,2>(esl_concat<1,2>(tmp_29_fu_208_p1.read(), tmp_27_reg_290.read()), ap_const_lv2_0);
}

void Padding::thread_tmp3_fu_190_p2() {
    tmp3_fu_190_p2 = (!tmp_28_fu_184_p2.read().is_01() || !p_x_assign_reg_78.read().is_01())? sc_lv<3>(): (sc_biguint<3>(tmp_28_fu_184_p2.read()) + sc_biguint<3>(p_x_assign_reg_78.read()));
}

void Padding::thread_tmp4_fu_239_p2() {
    tmp4_fu_239_p2 = (!tmp_12_fu_231_p3.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<3>(): (sc_biguint<3>(tmp_12_fu_231_p3.read()) + sc_bigint<3>(ap_const_lv3_5));
}

void Padding::thread_tmp_10_fu_221_p2() {
    tmp_10_fu_221_p2 = (!p_x_assign_cast6_reg_255.read().is_01() || !tmp2_fu_212_p4.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_x_assign_cast6_reg_255.read()) + sc_biguint<5>(tmp2_fu_212_p4.read()));
}

void Padding::thread_tmp_11_fu_226_p1() {
    tmp_11_fu_226_p1 = esl_zext<64,5>(tmp_10_fu_221_p2.read());
}

void Padding::thread_tmp_12_fu_231_p3() {
    tmp_12_fu_231_p3 = esl_concat<1,2>(tmp_29_fu_208_p1.read(), ap_const_lv2_0);
}

void Padding::thread_tmp_13_fu_245_p2() {
    tmp_13_fu_245_p2 = (!tmp4_fu_239_p2.read().is_01() || !tmp3_reg_295.read().is_01())? sc_lv<3>(): (sc_biguint<3>(tmp4_fu_239_p2.read()) + sc_biguint<3>(tmp3_reg_295.read()));
}

void Padding::thread_tmp_14_fu_250_p1() {
    tmp_14_fu_250_p1 = esl_zext<64,3>(tmp_13_fu_245_p2.read());
}

void Padding::thread_tmp_27_fu_180_p1() {
    tmp_27_fu_180_p1 = p_y_assign_reg_90.read().range(2-1, 0);
}

void Padding::thread_tmp_28_fu_184_p2() {
    tmp_28_fu_184_p2 = (!ap_const_lv3_1.is_01())? sc_lv<3>(): p_y_assign_reg_90.read() << (unsigned short)ap_const_lv3_1.to_uint();
}

void Padding::thread_tmp_29_fu_208_p1() {
    tmp_29_fu_208_p1 = p_z_assign_reg_101.read().range(1-1, 0);
}

void Padding::thread_tmp_9_fu_152_p2() {
    tmp_9_fu_152_p2 = (!p_y_assign_reg_90.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(p_y_assign_reg_90.read() == ap_const_lv3_0);
}

void Padding::thread_tmp_fu_164_p2() {
    tmp_fu_164_p2 = (tmp_s_reg_268.read() | tmp_9_fu_152_p2.read());
}

void Padding::thread_tmp_s_fu_128_p2() {
    tmp_s_fu_128_p2 = (!p_x_assign_reg_78.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(p_x_assign_reg_78.read() == ap_const_lv3_0);
}

void Padding::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_116_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_140_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_196_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

